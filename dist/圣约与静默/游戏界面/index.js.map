{"version":3,"file":"index.js","mappings":"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","sources":["src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/backgroundManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/characterManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/choiceManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/dialogueManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/journalManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/memoryManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/memoryUIManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/saveManager.ts","src://tavern_helper_template/external var \"_\"","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/settingsManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/scripts/components/uiManager.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/services/character-resource.service.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/services/game-data.service.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/services/game-state-generation.service.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/game.controller.ts","src://tavern_helper_template/src/圣约与静默/游戏界面/index.ts"],"sourcesContent":["/**\n * 背景管理器组件\n * 负责管理游戏中的背景图片显示和切换\n */\n\nexport class BackgroundManager {\n  // 背景图片映射\n  private backgroundMap: _.Dictionary<string> = {};\n\n  constructor() {\n    // 初始化背景图片映射\n    this.initBackgroundMap();\n\n    console.log('背景管理器初始化完成');\n  }\n\n  /**\n   * 初始化背景图片映射\n   */\n  private initBackgroundMap() {\n    // 设置基本背景映射\n    this.backgroundMap = {\n      公园_白天:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%85%AC%E5%9B%AD/%E7%99%BD%E5%A4%A9.jpg?ref_type=heads',\n      公园_黄昏:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%85%AC%E5%9B%AD/%E9%BB%84%E6%98%8F.jpg?ref_type=heads',\n      书店_内部:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E4%B9%A6%E5%BA%97%E5%86%85/%E4%B9%A6%E5%BA%97.jpg?ref_type=heads',\n      修道院_图书室:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E4%B9%A6%E5%BA%97%E5%86%85/%E4%B9%A6%E5%BA%97.jpg?ref_type=heads',\n      修道院_办公室:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%85%AC%E5%9B%AD/%E9%BB%84%E6%98%8F.jpg?ref_type=heads',\n      修道院_花园:\n        'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%85%AC%E5%9B%AD/%E7%99%BD%E5%A4%A9.jpg?ref_type=heads',\n    };\n  }\n\n  /**\n   * 设置背景图片\n   * @param location 位置\n   * @param scene 场景\n   */\n  public setBackground(location: string, scene: string) {\n    // 生成背景键\n    const backgroundKey = `${location}_${scene}`;\n\n    // 获取背景图片URL\n    let backgroundUrl = this.backgroundMap[backgroundKey];\n\n    // 如果没有找到特定的背景，尝试使用该位置的默认背景\n    if (!backgroundUrl) {\n      backgroundUrl = this.backgroundMap[`${location}_默认`];\n    }\n\n    // 如果还是没有找到，使用第一张图片作为默认\n    if (!backgroundUrl && !_.isEmpty(this.backgroundMap)) {\n      backgroundUrl = _.values(this.backgroundMap)[0];\n    }\n\n    if (backgroundUrl) {\n      // 设置背景图片\n      $('.background-container').css('backgroundImage', `url('${backgroundUrl}')`);\n      console.log(`已设置背景: ${backgroundKey}`);\n    } else {\n      console.warn(`未找到背景: ${backgroundKey}`);\n      // 设置默认背景颜色\n      $('.background-container').css({\n        backgroundImage: 'none',\n        backgroundColor: '#2a2a2a',\n      });\n    }\n  }\n\n  /**\n   * 添加背景图片映射\n   * @param key 背景键\n   * @param url 图片URL\n   */\n  public addBackground(key: string, url: string) {\n    this.backgroundMap[key] = url;\n  }\n\n  /**\n   * 应用背景切换特效\n   * @param effect 特效名称\n   */\n  public applyBackgroundEffect(effect: 'fade' | 'slide' | 'zoom') {\n    // 移除所有特效类\n    $('.background-container').removeClass('effect-fade effect-slide effect-zoom');\n\n    if (effect) {\n      // 添加指定特效类并使用jQuery UI的效果\n      const $bg = $('.background-container');\n\n      switch (effect) {\n        case 'fade':\n          $bg.addClass('effect-fade');\n          $bg.hide().fadeIn(1000);\n          break;\n        case 'slide':\n          $bg.addClass('effect-slide');\n          $bg.hide().slideDown(1000);\n          break;\n        case 'zoom':\n          $bg.addClass('effect-zoom');\n          $bg.hide().show('scale', {}, 1000);\n          break;\n      }\n\n      // 一段时间后移除特效类\n      setTimeout(() => {\n        $bg.removeClass(`effect-${effect}`);\n      }, 1000);\n    }\n  }\n\n  /**\n   * 获取所有背景键\n   */\n  public getAllBackgroundKeys(): string[] {\n    return _.keys(this.backgroundMap);\n  }\n}\n","/**\n * 角色管理器组件\n * 负责管理游戏中的角色立绘显示\n */\n\nimport { CharacterResource, CharacterResourceService, EmotionType } from '../../services/character-resource.service';\n\nexport class CharacterManager {\n  // 角色资源服务\n  private characterResourceService: CharacterResourceService;\n\n  // 当前显示的角色\n  private currentCharacters: {\n    left?: { id: string; emotion: EmotionType };\n    right?: { id: string; emotion: EmotionType };\n  } = {};\n\n  constructor(characterResourceService: CharacterResourceService) {\n    this.characterResourceService = characterResourceService;\n    console.log('角色管理器初始化完成');\n  }\n\n  /**\n   * 设置角色立绘\n   * @param characterId 角色ID\n   * @param emotion 表情差分\n   * @param position 位置 ('left' 或 'right')\n   */\n  public setCharacter(characterId: string, emotion: EmotionType = 'default', position: 'left' | 'right') {\n    const $element = $(`.character-${position}`);\n\n    if ($element.length === 0) {\n      console.error(`未找到${position}侧角色容器元素`);\n      return;\n    }\n\n    // 获取角色资源\n    const character = this.characterResourceService.getCharacter(characterId);\n\n    if (!character) {\n      console.error(`未找到ID为${characterId}的角色资源`);\n      this.hideCharacter(position);\n      return;\n    }\n\n    // 获取对应表情的立绘URL\n    const imageUrl = this.characterResourceService.getCharacterEmotionUrl(characterId, emotion);\n\n    if (!imageUrl) {\n      console.error(`角色${characterId}没有${emotion}表情差分`);\n      // 尝试使用默认表情\n      const defaultImageUrl = this.characterResourceService.getCharacterEmotionUrl(characterId);\n      if (!defaultImageUrl) {\n        this.hideCharacter(position);\n        return;\n      }\n      // 使用默认表情\n      this.setCharacterImage($element, character, defaultImageUrl, position, 'default');\n    } else {\n      // 使用指定表情\n      this.setCharacterImage($element, character, imageUrl, position, emotion);\n    }\n  }\n\n  /**\n   * 设置角色图像\n   */\n  private setCharacterImage(\n    $element: JQuery,\n    character: CharacterResource,\n    imageUrl: string,\n    position: 'left' | 'right',\n    emotion: EmotionType,\n  ) {\n    // 设置角色立绘\n    $element\n      .css({\n        backgroundImage: `url('${imageUrl}')`,\n        opacity: 1,\n      })\n      .data({\n        characterId: character.id,\n        characterName: character.name,\n      });\n\n    // 存储当前显示的角色\n    this.currentCharacters[position] = {\n      id: character.id,\n      emotion: emotion,\n    };\n\n    console.log(`已设置${character.name}的${emotion}表情立绘在${position}侧`);\n  }\n\n  /**\n   * 更新角色表情\n   * @param characterId 角色ID\n   * @param emotion 表情差分\n   */\n  public updateEmotion(characterId: string, emotion: EmotionType = 'default') {\n    // 查找角色当前在哪一侧\n    let position: 'left' | 'right' | null = null;\n\n    if (this.currentCharacters.left?.id === characterId) {\n      position = 'left';\n    } else if (this.currentCharacters.right?.id === characterId) {\n      position = 'right';\n    }\n\n    if (!position) {\n      console.warn(`未找到ID为${characterId}的角色在场景中`);\n      return;\n    }\n\n    // 更新表情\n    this.setCharacter(characterId, emotion, position);\n  }\n\n  /**\n   * 隐藏角色立绘\n   * @param position 位置 ('left', 'right' 或 'all')\n   */\n  public hideCharacter(position: 'left' | 'right' | 'all') {\n    if (position === 'left' || position === 'all') {\n      $('.character-left').css({\n        backgroundImage: 'none',\n        opacity: 0,\n      });\n      delete this.currentCharacters.left;\n    }\n\n    if (position === 'right' || position === 'all') {\n      $('.character-right').css({\n        backgroundImage: 'none',\n        opacity: 0,\n      });\n      delete this.currentCharacters.right;\n    }\n  }\n\n  /**\n   * 设置角色立绘特效\n   * @param position 位置 ('left' 或 'right')\n   * @param effect 特效名称 ('shake', 'focus', 'blur', 等)\n   */\n  public setCharacterEffect(position: 'left' | 'right', effect: string) {\n    const $element = $(`.character-${position}`);\n\n    if ($element.length === 0) {\n      console.error(`未找到${position}侧角色容器元素`);\n      return;\n    }\n\n    // 移除所有效果类\n    $element.removeClass('effect-shake effect-focus effect-blur');\n\n    // 添加指定效果类\n    if (effect) {\n      $element.addClass(`effect-${effect}`);\n\n      // 使用jQuery UI的效果\n      switch (effect) {\n        case 'shake':\n          $element.effect('shake', { times: 3, distance: 5 }, 500);\n          break;\n        case 'focus':\n          $('.characters-container .character').not($element).animate({ opacity: 0.5 }, 500);\n          $element.animate({ opacity: 1 }, 500);\n          break;\n        case 'blur':\n          $element.fadeOut(250).fadeIn(250);\n          break;\n      }\n    }\n  }\n\n  /**\n   * 交换角色立绘位置\n   */\n  public swapCharacters() {\n    const $leftChar = $('.character-left');\n    const $rightChar = $('.character-right');\n\n    if ($leftChar.length === 0 || $rightChar.length === 0) return;\n\n    // 保存当前角色状态\n    const leftChar = this.currentCharacters.left;\n    const rightChar = this.currentCharacters.right;\n\n    // 如果两边都有角色，交换它们\n    if (leftChar && rightChar) {\n      this.setCharacter(rightChar.id, rightChar.emotion, 'left');\n      this.setCharacter(leftChar.id, leftChar.emotion, 'right');\n\n      // 添加过渡动画\n      $leftChar.add($rightChar).css('transition', 'all 0.5s ease-in-out');\n    }\n  }\n\n  /**\n   * 根据对话更新角色显示\n   * @param speakerId 发言角色ID\n   * @param emotion 表情差分\n   */\n  public updateCharactersByDialogue(speakerId: string, emotion: EmotionType = 'default') {\n    // 如果是旁白，不更新角色\n    if (speakerId === 'narrator') return;\n\n    // 获取角色资源\n    const character = this.characterResourceService.getCharacter(speakerId);\n    if (!character) {\n      // 对于未预定义的角色，不执行立绘更新\n      console.log(`未找到ID为${speakerId}的角色资源，跳过立绘更新`);\n      return;\n    }\n\n    // 检查角色是否已在场景中\n    let position: 'left' | 'right' = 'right'; // 默认位置\n\n    if (this.currentCharacters.left?.id === speakerId) {\n      position = 'left';\n    } else if (this.currentCharacters.right?.id === speakerId) {\n      position = 'right';\n    } else {\n      // 如果角色不在场景中，根据角色预设位置添加\n      if (character.position === 'left' || character.position === 'right') {\n        position = character.position;\n      }\n\n      // 添加角色到场景\n      this.setCharacter(speakerId, emotion, position);\n      return;\n    }\n\n    // 更新已在场景中的角色表情\n    this.updateEmotion(speakerId, emotion);\n  }\n}\n","/**\n * 选项管理器组件\n * 负责管理游戏中的选项显示和处理\n */\n\nexport class ChoiceManager {\n  // 选项数据\n  private choices: string[] = [];\n\n  // 记录选项是否已经显示过\n  private choicesShown: boolean = false;\n\n  // 是否已隐藏选项\n  private choicesHidden: boolean = false;\n\n  // 选项选择回调\n  private onChoiceSelectedCallback: ((choice: string) => void) | null = null;\n\n  constructor() {\n    // 绑定自定义选项按钮事件\n    $('#custom-choice-button').on('click', () => {\n      const customChoice = $('#custom-choice-input').val() as string;\n      if (customChoice && customChoice.trim()) {\n        this.selectChoice(customChoice.trim());\n        $('#custom-choice-input').val('');\n      }\n    });\n\n    // 绑定自定义选项输入框回车事件\n    $('#custom-choice-input').on('keypress', e => {\n      if (e.key === 'Enter') {\n        const customChoice = $('#custom-choice-input').val() as string;\n        if (customChoice && customChoice.trim()) {\n          this.selectChoice(customChoice.trim());\n          $('#custom-choice-input').val('');\n        }\n      }\n    });\n\n    // 绑定隐藏按钮事件\n    $(document).on('click', '#hide-choices-btn', e => {\n      e.stopPropagation(); // 防止触发其他点击事件\n      this.hideChoices();\n    });\n\n    console.log('选项管理器初始化完成');\n  }\n\n  /**\n   * 设置选项列表\n   */\n  public setChoices(choices: string[]) {\n    this.choices = choices;\n    this.choicesShown = false;\n    this.choicesHidden = false;\n  }\n\n  /**\n   * 渲染选项\n   */\n  public renderChoices() {\n    const $presetChoices = $('.preset-choices');\n    if ($presetChoices.length === 0) return;\n\n    // 清空现有选项\n    $presetChoices.empty();\n\n    // 渲染每个选项按钮，添加索引数据属性以便于样式控制\n    _.forEach(this.choices, (choice, index) => {\n      $('<button>', {\n        class: 'choice-button',\n        text: choice,\n        'data-index': index,\n        'data-choice': choice,\n        click: () => this.selectChoice(choice),\n      }).appendTo($presetChoices);\n    });\n\n    // 根据选项数量设置容器宽度和样式\n    const $choicesContainer = $('.choices-container');\n    if (this.choices.length <= 2) {\n      $choicesContainer.addClass('compact-choices');\n    } else {\n      $choicesContainer.removeClass('compact-choices');\n    }\n  }\n\n  /**\n   * 显示选项\n   */\n  public showChoices() {\n    const $choicesContainer = $('.choices-container');\n    const $presetChoices = $('.preset-choices');\n\n    if ($choicesContainer.length === 0 || $presetChoices.length === 0) return;\n\n    // 渲染选项\n    this.renderChoices();\n\n    // 显示选项容器并添加动画效果\n    $choicesContainer.removeClass('hidden').hide().fadeIn(300);\n\n    // 标记选项已显示\n    this.choicesShown = true;\n    this.choicesHidden = false;\n\n    // 聚焦自定义输入框\n    setTimeout(() => {\n      $('#custom-choice-input').focus();\n    }, 300);\n  }\n\n  /**\n   * 隐藏选项\n   */\n  public hideChoices() {\n    const self = this;\n    $('.choices-container').fadeOut(300, function () {\n      $(this).addClass('hidden').show();\n      // 标记选项已隐藏\n      self.choicesHidden = true;\n    });\n  }\n\n  /**\n   * 检查是否可以重新显示选项\n   */\n  public canReshowChoices(): boolean {\n    return this.choicesShown && this.choicesHidden && this.choices.length > 0;\n  }\n\n  /**\n   * 重新显示上次的选项\n   */\n  public reshowChoices() {\n    if (this.canReshowChoices()) {\n      this.showChoices();\n    }\n  }\n\n  /**\n   * 选择选项\n   */\n  private selectChoice(choice: string) {\n    // 调用选择回调\n    if (this.onChoiceSelectedCallback) {\n      this.onChoiceSelectedCallback(choice);\n    }\n\n    // 隐藏选项\n    this.hideChoices();\n  }\n\n  /**\n   * 设置选项选择回调\n   */\n  public setOnChoiceSelected(callback: (choice: string) => void) {\n    this.onChoiceSelectedCallback = callback;\n  }\n\n  /**\n   * 添加选项\n   */\n  public addChoice(choice: string) {\n    if (!_.includes(this.choices, choice)) {\n      this.choices.push(choice);\n\n      // 如果选项容器已显示，更新选项\n      if (!$('.choices-container').hasClass('hidden')) {\n        this.renderChoices();\n      }\n    }\n  }\n\n  /**\n   * 移除选项\n   */\n  public removeChoice(choice: string) {\n    _.pull(this.choices, choice);\n\n    // 如果选项容器已显示，更新选项\n    if (!$('.choices-container').hasClass('hidden')) {\n      this.renderChoices();\n    }\n  }\n\n  /**\n   * 清空所有选项\n   */\n  public clearChoices() {\n    this.choices = [];\n\n    // 如果选项容器已显示，更新选项\n    if (!$('.choices-container').hasClass('hidden')) {\n      this.renderChoices();\n    }\n  }\n\n  /**\n   * 获取所有选项\n   */\n  public getAllChoices(): string[] {\n    return _.clone(this.choices);\n  }\n\n  /**\n   * 检查选项当前是否可见\n   * @returns 选项是否可见\n   */\n  public areChoicesVisible(): boolean {\n    // 如果选项已显示且未被隐藏，则认为选项当前可见\n    return this.choicesShown && !this.choicesHidden;\n  }\n}\n","/**\n * 对话管理器组件\n * 负责管理游戏中的对话显示、控制和效果\n */\n\nimport { CharacterResourceService } from '../../services/character-resource.service';\nimport { Dialogue, EmotionType } from '../models/gameData';\nimport { BackgroundManager } from './backgroundManager';\nimport { CharacterManager } from './characterManager';\n\n/**\n * 对话历史条目接口\n * 用于外部传入的对话历史记录\n */\nexport interface DialogueHistoryItem {\n  speaker: string;\n  content: string;\n  style?: string;\n  portrait?: {\n    character: string;\n    emotion: EmotionType;\n  };\n  background?: {\n    location: string;\n    scene: string;\n  };\n}\n\nexport class DialogueManager {\n  // 对话数据\n  private dialogues: Dialogue[] = [];\n  private currentDialogueIndex: number = 0;\n\n  // 服务引用\n  private characterResourceService: CharacterResourceService;\n  private characterManager: CharacterManager;\n  private backgroundManager: BackgroundManager;\n\n  // 自动播放设置\n  private isAutoPlaying: boolean = false;\n  private autoPlayInterval: number | null = null;\n  private autoPlaySpeed: number = 3000; // 毫秒\n\n  constructor(\n    characterResourceService: CharacterResourceService,\n    characterManager: CharacterManager,\n    backgroundManager: BackgroundManager,\n  ) {\n    this.characterResourceService = characterResourceService;\n    this.characterManager = characterManager;\n    this.backgroundManager = backgroundManager;\n\n    // 绑定自动播放按钮\n    $('#auto-play').on('click', () => {\n      this.toggleAutoPlay();\n    });\n\n    // 不再需要绑定下一步按钮，改为在GameController中绑定对话框点击\n    // $('.dialogue-next-button').on('click', () => {\n    //   this.showNextDialogue();\n    // });\n\n    console.log('对话管理器初始化完成');\n  }\n\n  /**\n   * 设置对话列表\n   */\n  public setDialogues(dialogues: Dialogue[]) {\n    this.dialogues = dialogues;\n    this.currentDialogueIndex = 0;\n  }\n\n  /**\n   * 显示特定索引的对话\n   */\n  public showDialogue(index: number) {\n    if (index < 0 || index >= this.dialogues.length) {\n      console.error('无效的对话索引');\n      return;\n    }\n\n    // 更新当前索引\n    this.currentDialogueIndex = index;\n    const dialogue = this.dialogues[index];\n\n    // 更新发言人名称 - 直接使用speaker属性，不做处理\n    const speakerName = dialogue.speaker;\n    $('.speaker-name').text(speakerName);\n\n    // 创建新对话文本元素\n    const $dialogueText = $('<div>', {\n      class: `dialogue-text style-${dialogue.style || 'normal'}`,\n      text: dialogue.content,\n    });\n\n    // 清空并添加新内容\n    $('.dialogue-content').empty().append($dialogueText);\n\n    // 滚动到底部\n    $('.dialogue-content').scrollTop($('.dialogue-content')[0].scrollHeight);\n\n    // 更新角色立绘\n    this.updateCharacterDisplay(dialogue);\n\n    // 更新背景（如果有指定）\n    this.updateBackground(dialogue);\n  }\n\n  /**\n   * 更新角色立绘显示\n   */\n  private updateCharacterDisplay(dialogue: Dialogue) {\n    // 如果对话没有指定portrait，尝试使用默认规则\n    if (!dialogue.portrait) {\n      // 判断角色是否在预设名单中\n      const character = this.characterResourceService.getCharacter(dialogue.speaker);\n      if (character) {\n        // 如果是预设角色，按原有逻辑显示\n        this.characterManager.updateCharactersByDialogue(dialogue.speaker, 'default');\n      } else {\n        // 如果不是预设角色，只显示名字，不显示立绘\n        this.characterManager.hideCharacter('all');\n      }\n      return;\n    }\n\n    // 如果有指定portrait，使用指定的角色和表情\n    const { character, emotion } = dialogue.portrait;\n\n    // 判断这个角色在左边还是右边\n    let position: 'left' | 'right' = 'right'; // 默认右侧\n\n    // 尝试获取角色资源来确定位置\n    const characterResource = this.characterResourceService.getCharacter(character);\n    if (characterResource && characterResource.position) {\n      position = characterResource.position as 'left' | 'right';\n    }\n\n    // 设置角色立绘\n    this.characterManager.setCharacter(character, emotion, position);\n  }\n\n  /**\n   * 更新背景显示\n   */\n  private updateBackground(dialogue: Dialogue) {\n    // 如果对话指定了背景，则更新背景\n    if (dialogue.background) {\n      const { location, scene } = dialogue.background;\n      this.backgroundManager.setBackground(location, scene);\n    }\n  }\n\n  /**\n   * 显示下一条对话\n   */\n  public showNextDialogue() {\n    if (this.currentDialogueIndex < this.dialogues.length - 1) {\n      this.showDialogue(this.currentDialogueIndex + 1);\n      return true;\n    }\n    return false; // 没有更多对话了\n  }\n\n  /**\n   * 显示上一条对话\n   */\n  public showPreviousDialogue() {\n    if (this.currentDialogueIndex > 0) {\n      this.showDialogue(this.currentDialogueIndex - 1);\n      return true;\n    }\n    return false; // 已经是第一条对话\n  }\n\n  /**\n   * 渲染对话内容\n   * 用于初始化或重新渲染对话界面\n   */\n  public renderDialogue(index: number = this.currentDialogueIndex) {\n    this.showDialogue(index);\n  }\n\n  /**\n   * 添加新对话\n   */\n  public addDialogue(dialogue: Dialogue) {\n    this.dialogues.push(dialogue);\n\n    // 如果添加的是第一条对话，则显示它\n    if (this.dialogues.length === 1) {\n      this.renderDialogue(0);\n    }\n  }\n\n  /**\n   * 清空所有对话\n   */\n  public clearDialogues() {\n    this.dialogues = [];\n    this.currentDialogueIndex = 0;\n\n    // 清空对话内容\n    $('.dialogue-content').empty();\n    $('.speaker-name').text('');\n\n    // 清空角色显示\n    this.characterManager.hideCharacter('all');\n  }\n\n  /**\n   * 切换自动播放\n   */\n  public toggleAutoPlay() {\n    this.isAutoPlaying = !this.isAutoPlaying;\n\n    // 获取自动播放按钮\n    const $autoPlayButton = $('#auto-play');\n\n    if (this.isAutoPlaying) {\n      // 启动自动播放\n      this.autoPlayInterval = window.setInterval(() => {\n        const hasMoreDialogue = this.showNextDialogue();\n        if (!hasMoreDialogue) {\n          // 没有更多对话了，停止自动播放\n          this.stopAutoPlay();\n        }\n      }, this.autoPlaySpeed);\n\n      // 更新按钮样式\n      $autoPlayButton.addClass('active').html('<i class=\"fas fa-pause\"></i>');\n    } else {\n      // 停止自动播放\n      this.stopAutoPlay();\n\n      // 更新按钮样式\n      $autoPlayButton.removeClass('active').html('<i class=\"fas fa-play\"></i>');\n    }\n  }\n\n  /**\n   * 停止自动播放\n   */\n  private stopAutoPlay() {\n    if (this.autoPlayInterval !== null) {\n      clearInterval(this.autoPlayInterval);\n      this.autoPlayInterval = null;\n    }\n    this.isAutoPlaying = false;\n\n    // 更新按钮样式\n    $('#auto-play').removeClass('active').html('<i class=\"fas fa-play\"></i>');\n  }\n\n  /**\n   * 设置自动播放速度\n   */\n  public setAutoPlaySpeed(speed: number) {\n    this.autoPlaySpeed = speed;\n\n    // 如果自动播放正在进行，重启它以应用新速度\n    if (this.isAutoPlaying) {\n      this.stopAutoPlay();\n      this.toggleAutoPlay();\n    }\n  }\n\n  /**\n   * 获取当前对话\n   */\n  public getCurrentDialogue(): Dialogue | null {\n    if (this.currentDialogueIndex >= 0 && this.currentDialogueIndex < this.dialogues.length) {\n      return this.dialogues[this.currentDialogueIndex];\n    }\n    return null;\n  }\n\n  /**\n   * 获取所有对话\n   */\n  public getAllDialogues(): Dialogue[] {\n    return _.cloneDeep(this.dialogues);\n  }\n\n  /**\n   * 显示对话历史记录\n   * @param externalDialogues 可选的外部对话历史数据\n   */\n  public showDialogueHistory(externalDialogues?: DialogueHistoryItem[]) {\n    // 保存当前索引\n    const currentIndex = this.currentDialogueIndex;\n\n    // 显示所有对话\n    const $dialogueContent = $('.dialogue-content');\n    $dialogueContent.empty();\n\n    // 决定使用哪个对话历史数据源\n    const dialoguesToShow = externalDialogues || this.dialogues;\n\n    // 使用lodash遍历对话\n    _.forEach(dialoguesToShow, (dialogue, index) => {\n      // 创建对话项容器\n      const $dialogueItem = $('<div>', {\n        class: 'dialogue-history-item',\n        'data-index': index,\n      });\n\n      // 创建发言人元素\n      const $speakerName = $('<div>', {\n        class: 'speaker-name-history',\n        text: dialogue.speaker,\n      });\n\n      // 创建对话内容元素\n      const $dialogueText = $('<div>', {\n        class: `dialogue-text-history style-${dialogue.style || 'normal'}`,\n        text: dialogue.content,\n      });\n\n      // 添加到容器\n      $dialogueItem.append($speakerName).append($dialogueText);\n\n      // 添加到对话内容区域\n      $dialogueContent.append($dialogueItem);\n    });\n\n    // 显示历史记录模式通知\n    $('#dialogue-history-notice').show();\n\n    // 添加\"返回\"按钮\n    const $returnButton = $('<button>', {\n      id: 'return-from-history',\n      class: 'btn btn-primary',\n      text: '返回对话',\n      click: () => {\n        // 隐藏通知\n        $('#dialogue-history-notice').hide();\n        // 移除历史记录样式\n        $dialogueContent.removeClass('history-mode');\n        // 渲染当前对话\n        this.renderDialogue(currentIndex);\n      },\n    });\n\n    // 添加返回按钮\n    $dialogueContent.append($returnButton);\n\n    // 添加历史记录样式\n    $dialogueContent.addClass('history-mode');\n  }\n\n  /**\n   * 获取当前对话索引\n   */\n  public getCurrentDialogueIndex(): number {\n    return this.currentDialogueIndex;\n  }\n\n  /**\n   * 对话是否已结束\n   */\n  public isDialogueFinished(): boolean {\n    return this.currentDialogueIndex >= this.dialogues.length - 1;\n  }\n}\n","/**\n * 日记管理器\n * 负责处理游戏中的日记功能，仅显示空白占位页\n */\n\nimport { GameData } from '../models/gameData';\n\nexport class JournalManager {\n  // 游戏数据引用\n  private gameData: GameData | null = null;\n\n  constructor() {\n    console.log('日记管理器初始化完成');\n  }\n\n  /**\n   * 设置游戏数据\n   * @param gameData 游戏数据\n   */\n  public setGameData(gameData: GameData | null) {\n    this.gameData = gameData;\n  }\n\n  /**\n   * 切换日记部分\n   */\n  public switchJournalSection(sectionId: string) {\n    // 移除所有导航项的激活状态\n    $('.journal-nav-item').removeClass('active');\n\n    // 移除所有内容区域的激活状态\n    $('.journal-section').removeClass('active');\n\n    // 激活选中的导航项和内容区域\n    $(`[data-section=\"${sectionId}\"]`).addClass('active');\n    $(`#${sectionId}-section`).addClass('active');\n\n    // 显示所有部分的空白占位页\n    this.showPlaceholder(sectionId);\n  }\n\n  /**\n   * 刷新日记内容\n   */\n  public refreshJournalContent() {\n    // 默认显示角色信息部分\n    this.showPlaceholder('characters');\n  }\n\n  /**\n   * 显示对应区域的空白占位页\n   * @param sectionId 区域ID\n   */\n  private showPlaceholder(sectionId: string) {\n    const $container = $(`#${sectionId}-section`);\n    if (!$container.length) return;\n\n    // 清空现有内容\n    $container.empty();\n\n    // 获取显示标题\n    let title = '日记';\n    switch (sectionId) {\n      case 'characters':\n        title = '角色信息';\n        break;\n      case 'monastery':\n        title = '修道院';\n        break;\n      case 'knowledge':\n        title = '知识库';\n        break;\n    }\n\n    // 添加空白页占位内容\n    $('<div>', {\n      class: 'journal-placeholder',\n      css: {\n        padding: '20px',\n        textAlign: 'center',\n      },\n    })\n      .append(\n        $('<h3>', {\n          text: title,\n          css: { marginBottom: '15px' },\n        }),\n      )\n      .append(\n        $('<p>', {\n          text: '内容暂未实现',\n          css: {\n            color: '#888',\n            fontStyle: 'italic',\n          },\n        }),\n      )\n      .appendTo($container);\n\n    console.log(`日记${title}部分已清空，仅保留占位符`);\n  }\n\n  /**\n   * 选择角色\n   * 保留方法签名但简化实现\n   */\n  public selectCharacter(characterId: string) {\n    // 仅记录交互，不执行实际操作\n    console.log(`尝试选择角色: ${characterId}，但该功能已简化为占位符`);\n  }\n}\n","/**\n * 记忆管理器组件\n * 负责管理游戏中的记忆系统和时间旅行机制\n */\n\nimport { StoryMemory } from '../models/gameData';\n\nexport class MemoryManager {\n  // 记忆数据\n  private memories: StoryMemory[] = [];\n  private selectedMemoryId: number | null = null;\n\n  // 使用会话存储跟踪是否已经保存过场景\n  private hasCreatedMemory: boolean = false;\n  private alreadySavedKey: string = 'memory_already_saved';\n\n  // 标记是否正在处理切换标签的操作\n  private isTabSwitching: boolean = false;\n\n  // 记忆选择回调\n  private onMemorySelectedCallback: ((memoryId: number) => void) | null = null;\n  private onMemorySavedCallback: ((memory: StoryMemory) => void) | null = null;\n  private onMemoryTravelCallback: ((memoryId: number) => void) | null = null;\n\n  constructor() {\n    // 绑定穿越按钮事件\n    $('#travel-to-memory').on('click', () => {\n      this.travelToSelectedMemory();\n    });\n\n    // 检查是否已保存过场景\n    this.checkIfAlreadySaved();\n\n    // 设置标签切换事件监听，确保只在需要时刷新\n    $('a[data-bs-toggle=\"tab\"]').on('hide.bs.tab', e => {\n      if ($(e.target).attr('href') === '#memory-tab') {\n        this.isTabSwitching = true;\n      }\n    });\n\n    $('a[data-bs-toggle=\"tab\"]').on('shown.bs.tab', e => {\n      if ($(e.target).attr('href') === '#memory-tab') {\n        // 在切换回记忆标签时，确保正确刷新数据而不是UI\n        // 重要：使用setTimeout是为了让DOM完全更新\n        setTimeout(() => {\n          // 先清空时间轴，防止重复\n          $('#memory-timeline').empty();\n          this.renderMemories();\n          this.isTabSwitching = false;\n        }, 50);\n      }\n    });\n\n    console.log('记忆管理器初始化完成');\n  }\n\n  /**\n   * 检查是否已经保存过场景\n   */\n  private checkIfAlreadySaved() {\n    const saved = sessionStorage.getItem(this.alreadySavedKey);\n    if (saved === 'true') {\n      this.hasCreatedMemory = true;\n      // 更新UI状态\n      this.updateSaveButtonState();\n    }\n  }\n\n  /**\n   * 更新保存按钮状态\n   */\n  private updateSaveButtonState() {\n    if (this.hasCreatedMemory) {\n      $('.memory-button')\n        .prop('disabled', true)\n        .css('opacity', '0.5')\n        .attr('title', '此场景已保存，每个场景只能保存一次')\n        .text('已保存');\n    }\n  }\n\n  /**\n   * 设置记忆列表\n   */\n  public setMemories(memories: StoryMemory[]) {\n    // 去重处理，确保每个ID只存在一次\n    const uniqueMemories: { [key: number]: StoryMemory } = {};\n\n    // 使用对象键值对去重\n    memories.forEach(memory => {\n      uniqueMemories[memory.id] = memory;\n    });\n\n    // 转换回数组\n    this.memories = Object.values(uniqueMemories);\n    console.log(`设置了${this.memories.length}个记忆点（去重后）`);\n  }\n\n  /**\n   * 渲染记忆时间轴\n   */\n  public renderMemories() {\n    const $timeline = $('#memory-timeline');\n    if ($timeline.length === 0) return;\n\n    // 如果正在切换标签，不立即渲染\n    if (this.isTabSwitching) {\n      return;\n    }\n\n    // 清空现有时间轴\n    $timeline.empty();\n\n    // 去重并按时间轴顺序排序记忆（按ID递增）\n    const uniqueMemories: { [key: number]: StoryMemory } = {};\n    this.memories.forEach(memory => {\n      uniqueMemories[memory.id] = memory;\n    });\n    const sortedMemories = _.sortBy(Object.values(uniqueMemories), 'id');\n\n    // 确保内存中的记忆也是去重的\n    this.memories = sortedMemories;\n\n    // 没有记忆点时显示提示\n    if (sortedMemories.length === 0) {\n      $timeline.html('<div class=\"memory-empty-timeline\">尚未创建记忆点。保存当前场景来创建一个新的记忆点。</div>');\n      return;\n    }\n\n    // 创建记忆节点 - 简化为纯圆点设计\n    _.forEach(sortedMemories, (memory, index) => {\n      // 创建简单的记忆节点\n      const $node = $('<div>', {\n        class: `memory-node-simple ${this.selectedMemoryId === memory.id ? 'selected' : ''}`,\n        'data-id': memory.id,\n        title: this.formatTimestamp(memory.timestamp || ''),\n        click: () => this.selectMemory(memory.id),\n      }).appendTo($timeline);\n    });\n\n    console.log(`已渲染${sortedMemories.length}个记忆点`);\n\n    // 更新保存按钮状态\n    this.updateSaveButtonState();\n  }\n\n  /**\n   * 格式化时间戳为更简短的格式\n   */\n  private formatTimestamp(timestamp: string): string {\n    // 提取日期和时间的关键部分\n    try {\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) {\n        // 如果不是标准日期格式，直接返回原始字符串\n        return timestamp;\n      }\n\n      // 返回简短格式：月/日 时:分\n      return `${date.getMonth() + 1}/${date.getDate()} ${date.getHours()}:${date\n        .getMinutes()\n        .toString()\n        .padStart(2, '0')}`;\n    } catch (e) {\n      // 如果解析失败，返回原始时间戳\n      return timestamp;\n    }\n  }\n\n  /**\n   * 选择记忆\n   */\n  public selectMemory(memoryId: number) {\n    // 查找记忆\n    const memory = _.find(this.memories, { id: memoryId });\n    if (!memory) {\n      console.error(`未找到ID为${memoryId}的记忆`);\n      return;\n    }\n\n    this.selectedMemoryId = memoryId;\n\n    // 更新记忆内容\n    const $content = $('#memory-content');\n    if ($content.length > 0) {\n      $content.empty();\n\n      // 如果有图片，显示图片\n      if (memory.image) {\n        $('<div>', {\n          class: 'memory-content-image',\n          css: { backgroundImage: `url('${memory.image}')` },\n        }).appendTo($content);\n      }\n\n      // 创建记忆内容元素\n      $('<div>', {\n        class: 'memory-content-text',\n        text: memory.content,\n      }).appendTo($content);\n\n      // 如果有时间戳，显示时间戳\n      if (memory.timestamp) {\n        $('<div>', {\n          class: 'memory-timestamp',\n          text: memory.timestamp,\n        }).appendTo($content);\n      }\n    }\n\n    // 更新记忆节点样式\n    $('.memory-node-simple').removeClass('selected');\n    $(`.memory-node-simple[data-id=\"${memoryId}\"]`).addClass('selected');\n\n    // 启用穿越按钮\n    $('#travel-to-memory').prop('disabled', false);\n\n    // 调用选择回调\n    if (this.onMemorySelectedCallback) {\n      this.onMemorySelectedCallback(memoryId);\n    }\n  }\n\n  /**\n   * 穿越到选中的记忆\n   */\n  private travelToSelectedMemory() {\n    if (this.selectedMemoryId === null) {\n      console.error('没有选中的记忆点');\n      return;\n    }\n\n    // 调用穿越回调\n    if (this.onMemoryTravelCallback) {\n      this.onMemoryTravelCallback(this.selectedMemoryId);\n    }\n  }\n\n  /**\n   * 添加新记忆\n   */\n  public addMemory(content: string, image?: string): StoryMemory | null {\n    // 检查是否已经保存过\n    if (this.hasCreatedMemory) {\n      console.warn('此场景已保存过，每个场景只能保存一次');\n      this.showOneTimeOnlyMessage();\n      return null;\n    }\n\n    // 生成新ID（通常应使用游戏状态数据中的下一个ID）\n    const memoryIds = _.map(this.memories, 'id');\n    const newId = this.memories.length > 0 ? (_.max(memoryIds) || 0) + 1 : 1;\n\n    // 创建新记忆\n    const newMemory: StoryMemory = {\n      id: newId,\n      content,\n      timestamp: new Date().toLocaleString(),\n      image,\n    };\n\n    // 添加到记忆列表\n    this.memories.push(newMemory);\n\n    // 标记为已保存并存储到会话\n    this.hasCreatedMemory = true;\n    sessionStorage.setItem(this.alreadySavedKey, 'true');\n\n    // 重新渲染时间轴\n    this.renderMemories();\n\n    // 选中新记忆\n    this.selectMemory(newId);\n\n    // 调用保存回调\n    if (this.onMemorySavedCallback) {\n      this.onMemorySavedCallback(newMemory);\n    }\n\n    return newMemory;\n  }\n\n  /**\n   * 显示只能保存一次的提示\n   */\n  private showOneTimeOnlyMessage() {\n    // 显示一个临时提示信息\n    const $notification = $('<div>', {\n      class: 'notification notification-warning',\n      text: '此场景已保存过，每个场景只能保存一次',\n    }).appendTo('#notification-container');\n\n    // 添加显示类\n    setTimeout(() => {\n      $notification.addClass('notification-show');\n    }, 10);\n\n    // 一段时间后隐藏和移除\n    setTimeout(() => {\n      $notification.addClass('notification-hide').removeClass('notification-show');\n      setTimeout(() => {\n        $notification.remove();\n      }, 300);\n    }, 3000);\n  }\n\n  /**\n   * 删除记忆\n   */\n  public deleteMemory(memoryId: number) {\n    // 查找记忆索引\n    const index = _.findIndex(this.memories, { id: memoryId });\n    if (index === -1) {\n      console.error(`未找到ID为${memoryId}的记忆`);\n      return;\n    }\n\n    // 删除记忆\n    this.memories.splice(index, 1);\n\n    // 重新渲染时间轴\n    this.renderMemories();\n\n    // 如果删除的是当前选中的记忆，清除选择\n    if (this.selectedMemoryId === memoryId) {\n      this.selectedMemoryId = null;\n      this.setEmptyMemoryContent();\n\n      // 禁用穿越按钮\n      $('#travel-to-memory').prop('disabled', true);\n    }\n  }\n\n  /**\n   * 获取当前选中的记忆\n   */\n  public getSelectedMemory(): StoryMemory | null {\n    if (this.selectedMemoryId === null) return null;\n\n    return _.find(this.memories, { id: this.selectedMemoryId }) || null;\n  }\n\n  /**\n   * 获取所有记忆\n   */\n  public getAllMemories(): StoryMemory[] {\n    // 确保返回的数据是去重的\n    const uniqueMemories: { [key: number]: StoryMemory } = {};\n    this.memories.forEach(memory => {\n      uniqueMemories[memory.id] = memory;\n    });\n    return _.cloneDeep(Object.values(uniqueMemories));\n  }\n\n  /**\n   * 设置空记忆内容\n   */\n  public setEmptyMemoryContent(message: string = '选择一个记忆点或保存当前场景') {\n    $('#memory-content').html(`<div class=\"memory-empty-message\">${message}</div>`);\n\n    // 禁用穿越按钮\n    $('#travel-to-memory').prop('disabled', true);\n  }\n\n  /**\n   * 设置记忆选择回调\n   */\n  public setOnMemorySelected(callback: (memoryId: number) => void) {\n    this.onMemorySelectedCallback = callback;\n  }\n\n  /**\n   * 设置记忆保存回调\n   */\n  public setOnMemorySaved(callback: (memory: StoryMemory) => void) {\n    this.onMemorySavedCallback = callback;\n  }\n\n  /**\n   * 设置记忆穿越回调\n   */\n  public setOnMemoryTravel(callback: (memoryId: number) => void) {\n    this.onMemoryTravelCallback = callback;\n  }\n\n  /**\n   * 清空记忆列表\n   */\n  public clearMemories() {\n    this.memories = [];\n    this.selectedMemoryId = null;\n\n    // 重置保存状态\n    this.hasCreatedMemory = false;\n    sessionStorage.removeItem(this.alreadySavedKey);\n\n    this.renderMemories();\n    this.setEmptyMemoryContent();\n  }\n\n  /**\n   * 初始化显示\n   */\n  public initializeDisplay() {\n    // 去重处理\n    const uniqueMemories: { [key: number]: StoryMemory } = {};\n    this.memories.forEach(memory => {\n      uniqueMemories[memory.id] = memory;\n    });\n    this.memories = Object.values(uniqueMemories);\n\n    if (this.memories.length > 0) {\n      this.renderMemories();\n    } else {\n      this.setEmptyMemoryContent();\n    }\n\n    // 检查是否已保存\n    this.checkIfAlreadySaved();\n  }\n}\n","/**\n * 记忆UI管理器\n * 负责处理游戏中的记忆功能UI部分\n */\n\nimport { GameData } from '../models/gameData';\nimport { MemoryManager } from './memoryManager';\nimport { SaveManager } from './saveManager';\nimport { UIManager } from './uiManager';\nimport { GameStateGenerationService } from '../../services/game-state-generation.service';\n\nexport class MemoryUIManager {\n  // 游戏数据引用\n  private gameData: GameData | null = null;\n  \n  // 依赖的其他管理器\n  private memoryManager: MemoryManager;\n  private saveManager: SaveManager;\n  private uiManager: UIManager;\n  private gameStateGenerationService: GameStateGenerationService;\n\n  constructor(\n    memoryManager: MemoryManager, \n    saveManager: SaveManager, \n    uiManager: UIManager,\n    gameStateGenerationService: GameStateGenerationService\n  ) {\n    this.memoryManager = memoryManager;\n    this.saveManager = saveManager;\n    this.uiManager = uiManager;\n    this.gameStateGenerationService = gameStateGenerationService;\n    \n    console.log('记忆UI管理器初始化完成');\n  }\n\n  /**\n   * 设置游戏数据\n   * @param gameData 游戏数据\n   */\n  public setGameData(gameData: GameData | null) {\n    this.gameData = gameData;\n  }\n\n  /**\n   * 刷新记忆时间轴\n   */\n  public refreshMemoryTimeline() {\n    if (!this.gameData) return;\n\n    this.memoryManager.setMemories(this.gameData.storySummary);\n    this.memoryManager.renderMemories();\n  }\n\n  /**\n   * 保存记忆\n   * @returns 新创建的记忆点\n   */\n  public saveMemory(): any {\n    if (!this.gameData) return null;\n\n    const newMemory = this.memoryManager.addMemory(\n      `${this.gameData.story.currentChapter} - 在${this.gameData.story.location}`,\n      // 可以考虑保存当前场景的截图\n    );\n\n    // 提示用户\n    this.uiManager.showNotification('记忆点已保存', 'success');\n    \n    return newMemory;\n  }\n\n  /**\n   * 穿越到记忆点\n   * @param onSuccess 成功穿越后的回调函数\n   */\n  public async travelToMemory(onSuccess: () => void) {\n    const selectedMemory = this.memoryManager.getSelectedMemory();\n    if (!selectedMemory) {\n      this.uiManager.showNotification('请先选择一个记忆点', 'warning');\n      return;\n    }\n\n    // 显示确认对话框\n    this.uiManager.showConfirmDialog(`确定要穿越到\"${selectedMemory.content}\"吗？`, async () => {\n      this.uiManager.showLoading('正在穿越时间...');\n\n      try {\n        let newState: GameData | null = null;\n        \n        // 先尝试从世界书中加载游戏状态\n        const loadedState = await this.saveManager.loadGameStateByID(selectedMemory.id);\n\n        if (loadedState) {\n          // 如果成功加载到，更新游戏状态\n          newState = loadedState;\n          console.log('从世界书中加载了游戏状态');\n        } else {\n          // 如果没有找到保存的状态，使用记忆点生成服务生成\n          const generatedState = await this.gameStateGenerationService.generateMemoryState(selectedMemory);\n\n          if (generatedState) {\n            newState = generatedState;\n            console.log('生成了新的记忆点游戏状态');\n          } else {\n            throw new Error('无法生成记忆点游戏状态');\n          }\n        }\n        \n        // 设置新的游戏状态\n        this.gameData = newState;\n        \n        // 调用成功回调\n        onSuccess();\n\n        this.uiManager.showNotification('时间旅行成功', 'success');\n      } catch (error) {\n        console.error('穿越时间失败:', error);\n        this.uiManager.showNotification('穿越失败: ' + (error instanceof Error ? error.message : '未知错误'), 'error');\n      } finally {\n        this.uiManager.hideLoading();\n      }\n    });\n  }\n  \n  /**\n   * 获取当前游戏数据\n   */\n  public getGameData(): GameData | null {\n    return this.gameData;\n  }\n} ","/**\n * 存档管理器组件\n * 负责游戏存档和读取功能\n */\nimport { GameData } from '../models/gameData';\nimport { DialogueHistoryItem } from './dialogueManager';\nimport { UIManager } from './uiManager';\n\n// 声明jQuery的modal方法\ndeclare global {\n  interface JQuery {\n    modal(action?: string): JQuery;\n  }\n}\n\n// 定义完整历史记录接口\nexport interface CompleteHistoryRecord {\n  id: string; // 唯一标识符\n  dialogues: Array<{\n    speaker: string;\n    content: string;\n    style?: string;\n  }>;\n  memories: Array<{\n    id: number;\n    content: string;\n  }>;\n}\n\nexport class SaveManager {\n  private uiManager: UIManager;\n  private worldBookName: string = '修女的追忆记录'; // 使用固定名称\n  private modalId: string = 'load-game-modal';\n  // 对话历史记录键名\n  private DIALOGUE_HISTORY_KEY: string = 'persistent_dialogue_history';\n  // 完整历史记录键名\n  private COMPLETE_HISTORY_KEY: string = 'complete_game_history';\n  // 存档类型\n  private SAVE_TYPE = {\n    AUTO: 'auto_save_',\n    MANUAL: 'save_',\n  };\n  // 当前最大存档ID\n  private currentMaxSaveId = {\n    auto: 0,\n    manual: 0,\n  };\n  // 缓存完整历史记录\n  private cachedCompleteHistory: CompleteHistoryRecord | null = null;\n\n  constructor(uiManager: UIManager) {\n    this.uiManager = uiManager;\n    this.initializeLoadGameModal();\n    this.initializeChatLorebook();\n\n    // 确保jQuery和Bootstrap正确加载\n    this.ensureBootstrapLoaded();\n\n    // 初始化时加载历史记录\n    this.loadCompleteHistory();\n  }\n\n  /**\n   * 确保Bootstrap正确加载\n   */\n  private ensureBootstrapLoaded(): void {\n    // 检查jQuery是否已加载\n    if (typeof $ === 'undefined') {\n      console.error('jQuery未加载，这可能导致modal功能失效');\n      return;\n    }\n\n    // 检查Bootstrap的modal功能是否可用\n    if (typeof $.fn.modal !== 'function') {\n      console.warn('Bootstrap modal未检测到，尝试加载');\n\n      // 尝试动态添加Bootstrap的CSS和JS\n      if (!document.getElementById('bootstrap-css')) {\n        const bootstrapCss = document.createElement('link');\n        bootstrapCss.id = 'bootstrap-css';\n        bootstrapCss.rel = 'stylesheet';\n        bootstrapCss.href = 'https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css';\n        document.head.appendChild(bootstrapCss);\n      }\n\n      if (!document.getElementById('bootstrap-js')) {\n        const bootstrapJs = document.createElement('script');\n        bootstrapJs.id = 'bootstrap-js';\n        bootstrapJs.src = 'https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js';\n        bootstrapJs.onload = () => {\n          console.log('Bootstrap已成功加载');\n          // 重新初始化modal\n          this.initializeLoadGameModal();\n        };\n        document.body.appendChild(bootstrapJs);\n      }\n    }\n  }\n\n  /**\n   * 初始化聊天世界书\n   */\n  private async initializeChatLorebook(): Promise<void> {\n    try {\n      console.log(`正在初始化固定世界书: ${this.worldBookName}`);\n\n      // 检查API可用性\n      if (typeof window.getLorebooks !== 'function' || typeof window.createLorebook !== 'function') {\n        console.error('世界书API不可用，无法初始化聊天世界书');\n        return;\n      }\n\n      // 获取所有世界书\n      const lorebooks = await window.getLorebooks();\n\n      // 检查我们的固定世界书是否存在\n      const worldBookExists = lorebooks.includes(this.worldBookName);\n\n      if (!worldBookExists) {\n        // 创建新的世界书\n        console.log(`创建新的固定世界书: ${this.worldBookName}`);\n        await window.createLorebook(this.worldBookName);\n\n        // 设置为当前聊天的世界书\n        if (typeof window.setChatLorebook === 'function') {\n          await window.setChatLorebook(this.worldBookName);\n        }\n      } else {\n        console.log(`找到现有的固定世界书: ${this.worldBookName}`);\n\n        // 确保设置为当前聊天的世界书\n        if (typeof window.setChatLorebook === 'function') {\n          await window.setChatLorebook(this.worldBookName);\n        }\n      }\n\n      // 初始化当前最大存档ID\n      await this.initializeMaxSaveIds();\n    } catch (error) {\n      console.error('初始化聊天世界书失败:', error);\n    }\n  }\n\n  /**\n   * 初始化最大存档ID\n   */\n  private async initializeMaxSaveIds(): Promise<void> {\n    try {\n      // 获取所有世界书条目\n      const allEntries = await this.getAllWorldBookEntries();\n      if (!allEntries || !allEntries.length) return;\n\n      // 找出自动存档最大ID\n      const autoSaves = allEntries.filter(entry => this.checkEntryKeyStartsWith(entry, this.SAVE_TYPE.AUTO));\n      if (autoSaves.length > 0) {\n        this.currentMaxSaveId.auto = Math.max(\n          ...autoSaves.map(entry => {\n            const idMatch = this.getEntryKey(entry).match(/(\\d+)$/);\n            return idMatch ? parseInt(idMatch[1], 10) : 0;\n          }),\n        );\n      }\n\n      // 找出手动存档最大ID\n      const manualSaves = allEntries.filter(entry => this.checkEntryKeyStartsWith(entry, this.SAVE_TYPE.MANUAL));\n      if (manualSaves.length > 0) {\n        this.currentMaxSaveId.manual = Math.max(\n          ...manualSaves.map(entry => {\n            const idMatch = this.getEntryKey(entry).match(/(\\d+)$/);\n            return idMatch ? parseInt(idMatch[1], 10) : 0;\n          }),\n        );\n      }\n\n      console.log(`初始化存档ID: 自动存档=${this.currentMaxSaveId.auto}, 手动存档=${this.currentMaxSaveId.manual}`);\n    } catch (error) {\n      console.error('初始化最大存档ID失败:', error);\n    }\n  }\n\n  /**\n   * 辅助函数：获取实际使用的键值\n   */\n  private getEntryKey(entry: any): string {\n    if (Array.isArray(entry.key) && entry.key.length > 0) {\n      return entry.key[0];\n    } else if (typeof entry.key === 'string') {\n      return entry.key;\n    }\n    return '';\n  }\n\n  /**\n   * 获取所有世界书条目\n   */\n  private async getAllWorldBookEntries(): Promise<any[]> {\n    try {\n      if (!this.worldBookName) {\n        console.warn('无法获取世界书条目：世界书名为空');\n        // 尝试重新初始化世界书\n        await this.initializeChatLorebook();\n        if (!this.worldBookName) {\n          return [];\n        }\n      }\n\n      // 检查API可用性\n      if (typeof window.getLorebookEntries !== 'function') {\n        console.error('世界书API不可用：getLorebookEntries函数未定义');\n        return [];\n      }\n\n      console.log(`正在获取世界书 ${this.worldBookName} 的所有条目...`);\n\n      // 尝试获取世界书条目\n      let entries;\n      try {\n        entries = await window.getLorebookEntries(this.worldBookName);\n      } catch (apiError) {\n        console.error(`调用getLorebookEntries API出错:`, apiError);\n\n        // 如果失败，尝试使用triggerSlash作为后备方案\n        if (typeof window.triggerSlash === 'function') {\n          try {\n            console.log('尝试使用triggerSlash作为后备方案获取条目');\n            const entriesJson = await window.triggerSlash(`/getlbentries ${this.worldBookName}`);\n            if (entriesJson) {\n              try {\n                entries = JSON.parse(entriesJson);\n              } catch (parseError) {\n                console.error('解析triggerSlash返回结果失败:', parseError);\n              }\n            }\n          } catch (slashError) {\n            console.error('使用triggerSlash获取条目失败:', slashError);\n          }\n        }\n      }\n\n      // 检查获取到的条目\n      if (!entries) {\n        console.log(`没有从世界书 ${this.worldBookName} 获取到条目`);\n        return [];\n      }\n\n      if (!Array.isArray(entries)) {\n        console.error('获取的条目不是数组类型:', entries);\n        return [];\n      }\n\n      console.log(`成功获取世界书条目，共 ${entries.length} 个`);\n\n      // 检查每个条目是否有效\n      if (entries.length > 0) {\n        const invalidEntries = entries.filter(entry => !entry || !entry.uid || typeof entry.uid !== 'number');\n        if (invalidEntries.length > 0) {\n          console.warn(`发现 ${invalidEntries.length} 个无效条目（缺少UID或UID类型错误）`);\n        }\n      } else {\n        console.log('世界书条目为空，可能是新创建的世界书');\n      }\n\n      return entries;\n    } catch (error) {\n      console.error('获取世界书条目失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 检查条目键是否以指定前缀开头\n   */\n  private checkEntryKeyStartsWith(entry: any, prefix: string): boolean {\n    if (!entry || !entry.key) return false;\n\n    if (Array.isArray(entry.key)) {\n      // 对于数组类型的key，检查是否有任意元素以prefix开头\n      return entry.key.some((k: string) => k && typeof k === 'string' && k.startsWith(prefix));\n    } else if (typeof entry.key === 'string') {\n      // 对于字符串类型的key，直接检查\n      return entry.key.startsWith(prefix);\n    }\n\n    return false;\n  }\n\n  /**\n   * 根据键名查找条目\n   */\n  private findEntryByKey(entries: any[], exactKey: string): any {\n    if (!entries || !Array.isArray(entries)) {\n      console.warn('查找条目时传入的条目列表无效');\n      return null;\n    }\n\n    if (!exactKey) {\n      console.warn('查找条目时传入的键名为空');\n      return null;\n    }\n\n    const foundEntry = entries.find(entry => {\n      if (!entry) return false;\n\n      if (Array.isArray(entry.key)) {\n        return entry.key.includes(exactKey);\n      }\n      return entry.key === exactKey;\n    });\n\n    if (foundEntry) {\n      if (!foundEntry.uid || typeof foundEntry.uid !== 'number' || isNaN(foundEntry.uid)) {\n        console.warn(`找到键名为 ${exactKey} 的条目，但其UID无效: ${foundEntry.uid}`);\n      } else {\n        console.log(`找到键名为 ${exactKey} 的条目，UID: ${foundEntry.uid}`);\n      }\n    } else {\n      console.log(`未找到键名为 ${exactKey} 的条目`);\n    }\n\n    return foundEntry;\n  }\n\n  /**\n   * 初始化加载游戏弹窗\n   */\n  private initializeLoadGameModal(): void {\n    // 检查是否已存在弹窗\n    if ($(`#${this.modalId}`).length === 0) {\n      // 创建弹窗\n      const modalHtml = `\n      <div id=\"${this.modalId}\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"loadGameModalTitle\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-lg\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"loadGameModalTitle\"><i class=\"fas fa-book-open\"></i> 修道院典籍记录</h5>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div class=\"modal-body\">\n              <div class=\"save-tabs\">\n                <button class=\"save-tab-btn active\" data-tab=\"auto\"><i class=\"fas fa-clock\"></i> 时间记忆</button>\n                <button class=\"save-tab-btn\" data-tab=\"manual\"><i class=\"fas fa-bookmark\"></i> 永久典籍</button>\n              </div>\n              <div class=\"save-tab-content\">\n                <div id=\"auto-saves-container\" class=\"save-tab-pane active\">\n                  <ul id=\"auto-save-list\" class=\"save-list\">\n                    <li class=\"save-item empty\">暂无自动记录点</li>\n                  </ul>\n                </div>\n                <div id=\"manual-saves-container\" class=\"save-tab-pane\">\n                  <ul id=\"manual-save-list\" class=\"save-list\">\n                    <li class=\"save-item empty\">暂无手动保存的典籍</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-primary\" id=\"btn-create-manual-save\">\n                <i class=\"fas fa-feather-alt\"></i> 记录当前典籍\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">关闭</button>\n            </div>\n          </div>\n        </div>\n      </div>`;\n\n      // 添加到页面\n      $('body').append(modalHtml);\n\n      // 确保模态框样式正确\n      const modalStyles = `\n        <style>\n          #${this.modalId} {\n            background-color: rgba(0, 0, 0, 0.5);\n          }\n          #${this.modalId}.show {\n            display: block !important;\n          }\n          .save-tabs {\n            display: flex;\n            border-bottom: 1px solid #dee2e6;\n            margin-bottom: 15px;\n          }\n          .save-tab-btn {\n            background: none;\n            border: none;\n            padding: 10px 15px;\n            cursor: pointer;\n            outline: none;\n          }\n          .save-tab-btn.active {\n            border-bottom: 2px solid #5d6e41;\n          }\n          .save-tab-pane {\n            display: none;\n          }\n          .save-tab-pane.active {\n            display: block;\n          }\n          .save-list {\n            list-style: none;\n            padding: 0;\n          }\n          .save-item {\n            margin-bottom: 10px;\n            border: 1px solid #dee2e6;\n            border-radius: 4px;\n            padding: 10px;\n            display: flex;\n            flex-direction: column;\n            cursor: pointer;\n            transition: box-shadow 0.3s;\n          }\n          .save-item:hover {\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n          }\n          .save-item.empty {\n            color: #6c757d;\n            cursor: default;\n            text-align: center;\n          }\n          .save-item-thumbnail {\n            height: 120px;\n            background-size: cover;\n            background-position: center;\n            border-radius: 4px;\n          }\n          .save-item-header {\n            display: flex;\n            justify-content: space-between;\n            margin: 10px 0 5px;\n          }\n          .save-item-title {\n            font-weight: bold;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n          }\n          .save-item-date {\n            font-size: 0.8em;\n            color: #6c757d;\n          }\n          .save-item-content {\n            font-size: 0.9em;\n            color: #333;\n            margin-bottom: 10px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n          }\n          .save-item-actions {\n            display: flex;\n            justify-content: space-between;\n          }\n          .btn-load, .btn-delete {\n            border: none;\n            padding: 5px 10px;\n            border-radius: 4px;\n            cursor: pointer;\n          }\n          .btn-load {\n            background-color: #5d6e41;\n            color: white;\n          }\n          .btn-delete {\n            background-color: #dc3545;\n            color: white;\n          }\n        </style>\n      `;\n      $('head').append(modalStyles);\n\n      // 移除原有事件绑定，防止重复绑定\n      $(document).off('click', `#${this.modalId} .save-tab-btn`);\n      $(document).off('click', '#btn-create-manual-save');\n\n      // 重新绑定标签切换事件\n      $(document).on('click', `#${this.modalId} .save-tab-btn`, e => {\n        const tabId = $(e.currentTarget).data('tab');\n        $(`#${this.modalId} .save-tab-btn`).removeClass('active');\n        $(`#${this.modalId} .save-tab-pane`).removeClass('active');\n        $(e.currentTarget).addClass('active');\n\n        if (tabId === 'auto') {\n          $(`#auto-saves-container`).addClass('active');\n        } else {\n          $(`#manual-saves-container`).addClass('active');\n        }\n      });\n\n      // 绑定创建手动存档按钮事件\n      $(document).on('click', '#btn-create-manual-save', () => {\n        console.log('创建手动存档按钮被点击');\n        this.createManualSave();\n      });\n\n      // 绑定关闭按钮事件\n      $(document).on('click', `#${this.modalId} .close, #${this.modalId} .btn-secondary`, () => {\n        this.closeLoadGameModal();\n      });\n\n      // 如果点击模态框外部，关闭模态框\n      $(document).on('click', `#${this.modalId}`, e => {\n        if ($(e.target).attr('id') === this.modalId) {\n          this.closeLoadGameModal();\n        }\n      });\n\n      console.log(`加载游戏弹窗已初始化，ID: ${this.modalId}`);\n    }\n  }\n\n  /**\n   * 关闭加载游戏弹窗\n   */\n  private closeLoadGameModal(): void {\n    if (typeof $.fn.modal === 'function') {\n      $(`#${this.modalId}`).modal('hide');\n    } else {\n      $(`#${this.modalId}`).css('display', 'none').removeClass('show');\n    }\n  }\n\n  /**\n   * 创建手动存档\n   */\n  private async createManualSave(): Promise<void> {\n    try {\n      console.log('开始创建手动存档流程');\n\n      // 显示确认对话框，让用户填写存档名称\n      this.uiManager.showInputDialog('请输入典籍标题', '手动存档', async saveName => {\n        console.log('用户输入的存档名称:', saveName);\n\n        if (!saveName) {\n          saveName = '手动存档';\n          console.log('使用默认存档名称:', saveName);\n        }\n\n        this.uiManager.showLoading('正在记录典籍...');\n\n        try {\n          // 获取当前游戏状态\n          console.log('获取当前游戏状态');\n          const gameData = await this.getCurrentGameData();\n\n          if (!gameData) {\n            console.error('无法获取当前游戏状态');\n            this.uiManager.showNotification('无法获取当前游戏状态', 'error');\n            return;\n          }\n\n          console.log('成功获取当前游戏状态，准备保存');\n\n          // 保存游戏状态\n          const saveResult = await this.saveGameState(gameData, true, saveName);\n\n          if (saveResult) {\n            console.log('手动存档成功保存');\n            this.uiManager.showNotification(`典籍\"${saveName}\"已成功记录`, 'success');\n\n            // 重新加载存档列表\n            console.log('刷新存档列表');\n            this.refreshSaveList();\n          } else {\n            console.error('保存游戏状态失败');\n            this.uiManager.showNotification('记录典籍失败', 'error');\n          }\n        } catch (error) {\n          console.error('创建手动存档失败:', error);\n          this.uiManager.showNotification('记录典籍失败', 'error');\n        } finally {\n          this.uiManager.hideLoading();\n        }\n      });\n    } catch (error) {\n      console.error('创建手动存档流程出错:', error);\n      this.uiManager.showNotification('记录典籍失败', 'error');\n    }\n  }\n\n  /**\n   * 获取当前游戏数据\n   */\n  private async getCurrentGameData(): Promise<GameData | null> {\n    // 这里需要从游戏控制器中获取当前游戏数据\n    // 为简化实现，暂时通过自定义事件获取\n    return new Promise(resolve => {\n      // 创建自定义事件，请求当前游戏数据\n      const requestEvent = new CustomEvent('request_game_data', {\n        detail: { callback: (gameData: GameData) => resolve(gameData) },\n      });\n      window.dispatchEvent(requestEvent);\n\n      // 如果5秒内没有响应，返回null\n      setTimeout(() => resolve(null), 5000);\n    });\n  }\n\n  /**\n   * 显示加载游戏弹窗\n   */\n  public async showLoadGameModal(): Promise<void> {\n    try {\n      this.uiManager.showLoading('正在获取存档列表...');\n\n      // 先刷新存档列表\n      await this.refreshSaveList();\n\n      // 确保jQuery和Bootstrap正确加载\n      this.ensureBootstrapLoaded();\n\n      // 检查modal方法是否可用\n      if (typeof $.fn.modal !== 'function') {\n        console.log('Bootstrap modal方法不可用，使用替代方法显示弹窗');\n\n        // 替代方法：直接显示元素\n        const modalElement = $(`#${this.modalId}`);\n        modalElement\n          .css({\n            display: 'block',\n            'padding-right': '17px',\n          })\n          .addClass('show');\n\n        // 添加overflow样式到body\n        $('body').addClass('modal-open').css('overflow', 'hidden');\n      } else {\n        console.log('使用Bootstrap modal方法显示弹窗');\n\n        // 使用Bootstrap的modal方法\n        try {\n          $(`#${this.modalId}`).modal('show');\n        } catch (modalError) {\n          console.error('显示modal出错:', modalError);\n\n          // 后备方案：直接显示元素\n          $(`#${this.modalId}`)\n            .css({\n              display: 'block',\n              'padding-right': '17px',\n            })\n            .addClass('show');\n\n          // 添加overflow样式到body\n          $('body').addClass('modal-open').css('overflow', 'hidden');\n        }\n      }\n\n      this.uiManager.hideLoading();\n    } catch (error) {\n      console.error('显示加载游戏弹窗失败:', error);\n      this.uiManager.showNotification('获取存档列表失败', 'error');\n      this.uiManager.hideLoading();\n    }\n  }\n\n  /**\n   * 刷新存档列表\n   */\n  private async refreshSaveList(): Promise<void> {\n    try {\n      // 获取所有存档\n      const { autoSaves, manualSaves } = await this.getAllSaves();\n\n      // 更新自动存档列表\n      const $autoSaveList = $('#auto-save-list');\n      $autoSaveList.empty();\n\n      if (autoSaves.length === 0) {\n        $autoSaveList.append('<li class=\"save-item empty\">暂无自动存档</li>');\n      } else {\n        // 按ID倒序排列，最新的存档在最前面\n        const sortedAutoSaves = autoSaves.sort((a, b) => b.saveId - a.saveId);\n\n        for (const save of sortedAutoSaves) {\n          this.appendSaveItem($autoSaveList, save);\n        }\n      }\n\n      // 更新手动存档列表\n      const $manualSaveList = $('#manual-save-list');\n      $manualSaveList.empty();\n\n      if (manualSaves.length === 0) {\n        $manualSaveList.append('<li class=\"save-item empty\">暂无手动存档</li>');\n      } else {\n        // 按ID倒序排列，最新的存档在最前面\n        const sortedManualSaves = manualSaves.sort((a, b) => b.saveId - a.saveId);\n\n        for (const save of sortedManualSaves) {\n          this.appendSaveItem($manualSaveList, save);\n        }\n      }\n    } catch (error) {\n      console.error('刷新存档列表失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 添加存档项到列表\n   */\n  private appendSaveItem($list: JQuery, save: any): void {\n    // 生成缩略图URL\n    let thumbnailUrl = '';\n    if (save.thumbnail) {\n      thumbnailUrl = save.thumbnail;\n    } else {\n      // 使用默认图片，根据存档类型选择不同的默认图片\n      thumbnailUrl = save.isAuto\n        ? 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E4%B9%A6%E5%BA%97%E5%86%85/%E4%B9%A6%E5%BA%97.jpg?ref_type=heads'\n        : 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%85%AC%E5%9B%AD/%E7%99%BD%E5%A4%A9.jpg?ref_type=heads';\n    }\n\n    const $saveItem = $('<li>', {\n      class: 'save-item',\n      'data-key': save.key,\n    });\n\n    // 添加缩略图\n    $('<div>', {\n      class: 'save-item-thumbnail',\n      style: `background-image: url(${thumbnailUrl})`,\n    }).appendTo($saveItem);\n\n    // 添加标题和日期\n    const $header = $('<div>', { class: 'save-item-header' });\n\n    $('<div>', {\n      class: 'save-item-title',\n      text: save.title,\n    }).appendTo($header);\n\n    $('<div>', {\n      class: 'save-item-date',\n      text: save.date,\n    }).appendTo($header);\n\n    $header.appendTo($saveItem);\n\n    // 添加内容摘要\n    $('<div>', {\n      class: 'save-item-content',\n      text: save.content || '无可用内容',\n    }).appendTo($saveItem);\n\n    // 添加操作按钮\n    const $actions = $('<div>', { class: 'save-item-actions' });\n\n    // 创建加载按钮\n    const $loadBtn = $('<button>', {\n      class: 'btn-load',\n      html: '<i class=\"fas fa-book-reader\"></i> 阅读',\n      'data-key': save.key,\n    });\n\n    // 创建删除按钮\n    const $deleteBtn = $('<button>', {\n      class: 'btn-delete',\n      html: '<i class=\"fas fa-trash-alt\"></i> 销毁',\n      'data-key': save.key,\n      'data-title': save.title,\n    });\n\n    // 将按钮添加到操作区域\n    $actions.append($loadBtn).append($deleteBtn);\n    $actions.appendTo($saveItem);\n\n    // 将整个存档项添加到列表\n    $list.append($saveItem);\n\n    // 使用直接事件绑定，避免使用on代理导致的问题\n    $loadBtn.on('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log('点击加载按钮，key:', save.key);\n      this.loadGameFromKey(save.key);\n      return false;\n    });\n\n    $deleteBtn.on('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log('点击删除按钮，key:', save.key, 'title:', save.title);\n      this.deleteSave(save.key, save.title);\n      return false;\n    });\n\n    // 为整个存档项添加点击事件\n    $saveItem.on('click', e => {\n      // 如果点击的是操作按钮，不进行处理\n      if ($(e.target).closest('.save-item-actions').length > 0) {\n        return;\n      }\n\n      // 否则触发加载存档\n      console.log('点击存档项，key:', save.key);\n      this.loadGameFromKey(save.key);\n    });\n  }\n\n  /**\n   * 删除存档\n   */\n  private async deleteSave(saveKey: string, saveTitle: string): Promise<void> {\n    try {\n      console.log('准备删除存档，key:', saveKey, 'title:', saveTitle);\n\n      // 确认删除\n      this.uiManager.showConfirmDialog(`确定要销毁典籍\"${saveTitle}\"吗？此操作不可逆。`, async () => {\n        console.log('用户确认删除存档，开始删除过程');\n        this.uiManager.showLoading('正在销毁典籍...');\n\n        try {\n          const allEntries = await window.getLorebookEntries(this.worldBookName);\n          const saveEntry = this.findEntryByKey(allEntries, saveKey);\n\n          if (saveEntry && saveEntry.uid) {\n            console.log(`找到存档条目，准备删除 UID=${saveEntry.uid}`);\n            await window.deleteLorebookEntry(this.worldBookName, saveEntry.uid);\n\n            // 刷新存档列表\n            await this.refreshSaveList();\n\n            this.uiManager.showNotification(`典籍\"${saveTitle}\"已成功销毁`, 'success');\n          } else {\n            console.error('找不到要删除的存档条目');\n            this.uiManager.showNotification('找不到指定的典籍记录', 'error');\n          }\n        } catch (error) {\n          console.error('删除存档过程中出错:', error);\n          this.uiManager.showNotification(\n            '销毁典籍失败: ' + (error instanceof Error ? error.message : '未知错误'),\n            'error',\n          );\n        } finally {\n          this.uiManager.hideLoading();\n        }\n      });\n    } catch (error) {\n      console.error('删除存档过程出错:', error);\n      this.uiManager.showNotification('销毁典籍失败', 'error');\n    }\n  }\n\n  /**\n   * 获取所有游戏存档\n   */\n  public async getAllSaves(): Promise<{ autoSaves: any[]; manualSaves: any[] }> {\n    try {\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        await this.initializeChatLorebook();\n      }\n\n      // 检查API是否可用\n      if (!this.worldBookName || typeof window.getLorebookEntries !== 'function') {\n        console.warn('世界书API不可用，无法获取存档');\n        return { autoSaves: [], manualSaves: [] };\n      }\n\n      // 获取所有世界书条目\n      const allEntries = await this.getAllWorldBookEntries();\n      if (!allEntries || !Array.isArray(allEntries) || allEntries.length === 0) {\n        return { autoSaves: [], manualSaves: [] };\n      }\n\n      // 筛选出自动存档条目\n      const autoSaveEntries = allEntries.filter(entry => this.checkEntryKeyStartsWith(entry, this.SAVE_TYPE.AUTO));\n\n      // 筛选出手动存档条目\n      const manualSaveEntries = allEntries.filter(entry => this.checkEntryKeyStartsWith(entry, this.SAVE_TYPE.MANUAL));\n\n      console.log(`找到 ${autoSaveEntries.length} 个自动存档和 ${manualSaveEntries.length} 个手动存档`);\n\n      // 处理自动存档数据\n      const autoSaves = await Promise.all(autoSaveEntries.map(entry => this.processSaveEntry(entry, true)));\n\n      // 处理手动存档数据\n      const manualSaves = await Promise.all(manualSaveEntries.map(entry => this.processSaveEntry(entry, false)));\n\n      // 过滤掉处理失败的存档并按ID排序\n      return {\n        autoSaves: autoSaves.filter(save => save !== null).sort((a, b) => b.saveId - a.saveId),\n        manualSaves: manualSaves.filter(save => save !== null).sort((a, b) => b.saveId - a.saveId),\n      };\n    } catch (error) {\n      console.error('获取存档列表失败:', error);\n      return { autoSaves: [], manualSaves: [] };\n    }\n  }\n\n  /**\n   * 处理存档条目\n   */\n  private async processSaveEntry(entry: any, isAuto: boolean): Promise<any> {\n    try {\n      if (!entry || !entry.key) {\n        console.warn('无效的存档条目:', entry);\n        return null;\n      }\n\n      // 获取键值（可能是字符串或数组）\n      let entryKey = '';\n      if (Array.isArray(entry.key) && entry.key.length > 0) {\n        // 查找符合条件的键\n        const prefix = isAuto ? this.SAVE_TYPE.AUTO : this.SAVE_TYPE.MANUAL;\n        const matchingKey = entry.key.find((k: string) => k && typeof k === 'string' && k.startsWith(prefix));\n        if (matchingKey) {\n          entryKey = matchingKey;\n        } else {\n          entryKey = entry.key[0]; // 默认使用第一个键\n        }\n      } else if (typeof entry.key === 'string') {\n        entryKey = entry.key;\n      } else {\n        console.warn('无效的键值类型:', entry.key);\n        return null;\n      }\n\n      // 从键中提取存档ID\n      const idMatch = entryKey.match(/(\\d+)$/);\n      const saveId = idMatch ? parseInt(idMatch[1], 10) : 0;\n\n      // 获取简要内容用于显示\n      const savePreview = {\n        key: entryKey,\n        uid: entry.uid, // 保存UID用于后续操作\n        title: entry.comment || (isAuto ? `自动记录点 #${saveId}` : `永久典籍 #${saveId}`),\n        saveId: saveId,\n        date: new Date(entry.created_at || Date.now()).toLocaleString(),\n        content: '',\n        thumbnail: '',\n        isAuto: isAuto,\n      };\n\n      // 尝试获取存档内容的摘要和缩略图\n      try {\n        // 优先使用条目的直接内容\n        let content = '';\n        if (entry.content) {\n          content = entry.content;\n        } else if (typeof window.triggerSlash === 'function') {\n          content = await window.triggerSlash(`/getentryfield file=${this.worldBookName} field=content ${entryKey}`);\n        }\n\n        if (content) {\n          try {\n            const gameData = JSON.parse(content);\n            if (gameData.storySummary && gameData.storySummary.length > 0) {\n              const latestSummary = gameData.storySummary[gameData.storySummary.length - 1];\n              savePreview.content = latestSummary.content;\n\n              // 如果有图片，则使用该图片作为缩略图\n              if (latestSummary.image) {\n                savePreview.thumbnail = latestSummary.image;\n              }\n            }\n          } catch (jsonError) {\n            console.warn('解析存档内容失败:', jsonError);\n          }\n        }\n      } catch (error) {\n        console.warn('无法获取存档内容摘要:', error);\n      }\n\n      return savePreview;\n    } catch (error) {\n      console.error('处理存档数据出错:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 从存档键加载游戏\n   */\n  private async loadGameFromKey(saveKey: string): Promise<void> {\n    try {\n      console.log('准备加载存档，key:', saveKey);\n\n      // 确认加载\n      this.uiManager.showConfirmDialog('确定要加载此存档吗？当前游戏进度将丢失。', async () => {\n        console.log('用户确认加载存档，开始加载过程');\n        this.uiManager.showLoading('正在加载存档...');\n\n        try {\n          // 加载游戏状态\n          const gameData = await this.loadGameState(saveKey);\n\n          if (gameData) {\n            console.log('存档加载成功，准备关闭弹窗并更新游戏状态');\n\n            // 关闭弹窗\n            this.closeLoadGameModal();\n\n            // 触发加载完成事件，传递游戏数据给游戏控制器\n            console.log('触发gameloaded事件');\n            const loadEvent = new CustomEvent('gameloaded', {\n              detail: { gameData },\n            });\n            window.dispatchEvent(loadEvent);\n\n            this.uiManager.showNotification('加载存档成功', 'success');\n          } else {\n            console.error('加载游戏状态失败，gameData为null');\n            this.uiManager.showNotification('加载存档失败', 'error');\n          }\n        } catch (error) {\n          console.error('加载存档处理过程中出错:', error);\n          this.uiManager.showNotification(\n            '加载存档失败: ' + (error instanceof Error ? error.message : '未知错误'),\n            'error',\n          );\n        } finally {\n          this.uiManager.hideLoading();\n        }\n      });\n    } catch (error) {\n      console.error('加载存档过程出错:', error);\n      this.uiManager.showNotification('加载存档失败', 'error');\n    }\n  }\n\n  /**\n   * 将当前游戏状态保存到世界书\n   * @param gameData 游戏数据\n   * @param isManual 是否为手动存档\n   * @param customName 自定义存档名称（仅用于手动存档）\n   */\n  public async saveGameState(gameData: GameData, isManual: boolean = false, customName?: string): Promise<boolean> {\n    if (!gameData || !gameData.storySummary || gameData.storySummary.length === 0) {\n      console.warn('没有可保存的游戏状态');\n      return false;\n    }\n\n    try {\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        console.log('世界书名称为空，重新初始化');\n        await this.initializeChatLorebook();\n\n        if (!this.worldBookName) {\n          console.error('初始化世界书失败，无法保存游戏状态');\n          this.uiManager.showNotification('无法初始化世界书，保存失败', 'error');\n          return false;\n        }\n      }\n\n      // 检查世界书API是否可用\n      if (typeof window.getLorebookEntries !== 'function') {\n        console.error('世界书API不可用');\n        this.uiManager.showNotification('世界书API不可用，无法保存游戏状态', 'error');\n        return false;\n      }\n\n      // 根据保存类型确定存档ID和键名前缀\n      const saveType = isManual ? this.SAVE_TYPE.MANUAL : this.SAVE_TYPE.AUTO;\n      const nextId = isManual ? ++this.currentMaxSaveId.manual : ++this.currentMaxSaveId.auto;\n      const saveKey = `${saveType}${nextId}`;\n\n      // 创建存档名称\n      let saveName = '';\n      let dialogueCount = gameData.story.dialogue.length;\n      let memoriesCount = gameData.storySummary.length;\n\n      if (isManual && customName) {\n        saveName = `${customName} #${nextId} [对话:${dialogueCount}条|记忆:${memoriesCount}条]`;\n      } else if (isManual) {\n        saveName = `手动存档 #${nextId} [对话:${dialogueCount}条|记忆:${memoriesCount}条]`;\n      } else {\n        // 自动存档名称，格式为\"自动存档#ID-记忆描述\"\n        const latestSummary = gameData.storySummary[gameData.storySummary.length - 1];\n        const shortDescription =\n          latestSummary.content.substring(0, 30) + (latestSummary.content.length > 30 ? '...' : '');\n        saveName = `自动存档 #${nextId}-${shortDescription} [对话:${dialogueCount}条|记忆:${memoriesCount}条]`;\n      }\n\n      // 先保存完整历史记录，确保对话历史和游戏状态同步\n      await this.saveDialogueHistory(gameData);\n\n      // 准备保存数据\n      const saveData = JSON.stringify(gameData);\n\n      // 记录开始保存时间，用于超时判断\n      const startTime = Date.now();\n      const MAX_RETRY = 3;\n      const TIMEOUT_MS = 10000; // 10秒超时\n\n      for (let retry = 0; retry < MAX_RETRY; retry++) {\n        try {\n          // 获取所有条目，检查是否已存在相同key的条目\n          console.log(`获取世界书条目，尝试 ${retry + 1}/${MAX_RETRY}`);\n          const allEntries = await window.getLorebookEntries(this.worldBookName);\n          const saveEntry = this.findEntryByKey(allEntries, saveKey);\n\n          // 设定一个Promise，当超时时拒绝\n          const saveWithTimeout = async <T>(promise: Promise<T>): Promise<T> => {\n            const timeout = new Promise<never>((_, reject) => {\n              setTimeout(() => reject(new Error('操作超时')), TIMEOUT_MS);\n            });\n            return Promise.race([promise, timeout]);\n          };\n\n          // 如果存在相同key的条目，更新而不是创建新条目\n          if (saveEntry) {\n            console.log(`存档 ${saveKey} 已存在，将更新条目 uid=${saveEntry.uid}`);\n\n            if (typeof saveEntry.uid !== 'number' || isNaN(saveEntry.uid)) {\n              throw new Error(`无效的UID: ${saveEntry.uid}`);\n            }\n\n            // 创建需要更新的条目对象\n            const updateEntry = {\n              uid: saveEntry.uid,\n              comment: saveName,\n              content: saveData,\n            };\n\n            try {\n              if (typeof window.setLorebookEntries === 'function') {\n                await saveWithTimeout(window.setLorebookEntries(this.worldBookName, [updateEntry]));\n                console.log(`成功更新条目 UID=${saveEntry.uid}`);\n                // 更新成功，跳出重试循环\n                break;\n              } else if (typeof window.editLorebookEntry === 'function') {\n                await saveWithTimeout(\n                  window.editLorebookEntry(this.worldBookName, saveEntry.uid, {\n                    comment: saveName,\n                    content: saveData,\n                  }),\n                );\n                console.log(`成功更新条目 UID=${saveEntry.uid} (使用editLorebookEntry)`);\n                break;\n              } else {\n                // 如果没有更新API，则删除后重建\n                await saveWithTimeout(window.deleteLorebookEntry(this.worldBookName, saveEntry.uid));\n                const newUid = await saveWithTimeout(\n                  window.createLorebookEntry(this.worldBookName, {\n                    key: [saveKey],\n                    comment: saveName,\n                    content: saveData,\n                  }),\n                );\n\n                if (newUid > 0) {\n                  console.log(`成功删除旧条目并创建新条目 UID=${newUid}`);\n                  break;\n                } else {\n                  throw new Error(`创建新条目失败，返回的UID无效: ${newUid}`);\n                }\n              }\n            } catch (updateError) {\n              console.error(`更新条目尝试 ${retry + 1} 失败:`, updateError);\n\n              // 如果不是最后一次尝试，等待后重试\n              if (retry < MAX_RETRY - 1) {\n                console.log(`等待500ms后重试...`);\n                await new Promise(resolve => setTimeout(resolve, 500));\n              } else {\n                throw updateError; // 最后一次尝试失败，向上抛出错误\n              }\n            }\n          } else {\n            // 创建新条目\n            console.log(`存档 ${saveKey} 不存在，将创建新条目`);\n\n            // 准备创建的条目对象\n            const newEntry = {\n              key: [saveKey],\n              comment: saveName,\n              content: saveData,\n            };\n\n            try {\n              let success = false;\n\n              // 尝试使用新API创建条目\n              if (typeof window.createLorebookEntries === 'function') {\n                const result = await saveWithTimeout(window.createLorebookEntries(this.worldBookName, [newEntry]));\n\n                if (result && result.new_uids && result.new_uids.length > 0) {\n                  console.log(`成功创建新条目，UID=${result.new_uids[0]}`);\n                  success = true;\n                } else {\n                  console.warn('createLorebookEntries返回结果无效，将尝试旧API');\n                }\n              }\n\n              // 如果新API失败或不可用，尝试旧API\n              if (!success && typeof window.createLorebookEntry === 'function') {\n                const uid = await saveWithTimeout(window.createLorebookEntry(this.worldBookName, newEntry));\n\n                if (uid > 0) {\n                  console.log(`成功创建新条目，UID=${uid}`);\n                  success = true;\n                } else {\n                  throw new Error(`创建条目失败，返回的UID无效: ${uid}`);\n                }\n              }\n\n              if (success) {\n                break; // 创建成功，跳出重试循环\n              } else {\n                throw new Error('没有可用的API创建条目');\n              }\n            } catch (createError) {\n              console.error(`创建条目尝试 ${retry + 1} 失败:`, createError);\n\n              // 如果不是最后一次尝试，等待后重试\n              if (retry < MAX_RETRY - 1) {\n                console.log(`等待500ms后重试...`);\n                await new Promise(resolve => setTimeout(resolve, 500));\n              } else {\n                throw createError; // 最后一次尝试失败，向上抛出错误\n              }\n            }\n          }\n        } catch (error) {\n          // 处理最后一次失败的情况\n          if (retry === MAX_RETRY - 1) {\n            throw error;\n          }\n        }\n      }\n\n      // 保存成功，记录当前ID\n      if (isManual) {\n        this.currentMaxSaveId.manual = nextId;\n      } else {\n        this.currentMaxSaveId.auto = nextId;\n      }\n\n      console.log(`已成功保存游戏状态到世界书，包含 ${dialogueCount} 条对话和 ${memoriesCount} 条记忆`);\n      return true;\n    } catch (error) {\n      console.error('保存游戏状态到世界书失败:', error);\n      this.uiManager.showNotification(\n        '保存游戏状态失败: ' + (error instanceof Error ? error.message : '未知错误'),\n        'error',\n      );\n      return false;\n    }\n  }\n\n  /**\n   * 加载完整历史记录\n   */\n  private async loadCompleteHistory(): Promise<CompleteHistoryRecord | null> {\n    try {\n      // 如果已有缓存记录，直接返回\n      if (this.cachedCompleteHistory) {\n        return this.cachedCompleteHistory;\n      }\n\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        await this.initializeChatLorebook();\n      }\n\n      // 检查API是否可用\n      if (typeof window.getLorebookEntries !== 'function') {\n        console.warn('世界书API不可用，无法加载完整历史记录');\n        return null;\n      }\n\n      // 获取所有世界书条目\n      const allEntries = await window.getLorebookEntries(this.worldBookName);\n      if (!allEntries || !Array.isArray(allEntries)) {\n        console.warn('未找到世界书条目');\n        return null;\n      }\n\n      // 查找完整历史记录条目\n      const historyEntry = this.findEntryByKey(allEntries, this.COMPLETE_HISTORY_KEY);\n\n      if (!historyEntry) {\n        console.log('未找到完整历史记录条目，将创建新记录');\n        // 创建新的完整历史记录\n        const newHistory: CompleteHistoryRecord = {\n          id: `history_${Date.now()}`,\n          dialogues: [],\n          memories: [],\n        };\n        this.cachedCompleteHistory = newHistory;\n        return newHistory;\n      }\n\n      // 获取条目内容\n      let historyContent = '';\n\n      // 尝试获取条目内容\n      if (historyEntry.content) {\n        historyContent = historyEntry.content;\n      } else if (typeof window.triggerSlash === 'function') {\n        // 使用triggerSlash获取\n        historyContent = await window.triggerSlash(\n          `/getentryfield file=${this.worldBookName} field=content ${this.COMPLETE_HISTORY_KEY}`,\n        );\n      }\n\n      if (!historyContent) {\n        console.log('完整历史记录内容为空，将创建新记录');\n        // 创建新的完整历史记录\n        const newHistory: CompleteHistoryRecord = {\n          id: `history_${Date.now()}`,\n          dialogues: [],\n          memories: [],\n        };\n        this.cachedCompleteHistory = newHistory;\n        return newHistory;\n      }\n\n      try {\n        // 解析JSON内容\n        const history = JSON.parse(historyContent) as CompleteHistoryRecord;\n        if (!history.id || !Array.isArray(history.dialogues) || !Array.isArray(history.memories)) {\n          throw new Error('历史记录格式不正确');\n        }\n        console.log(\n          `成功加载完整历史记录，包含 ${history.dialogues.length} 条对话和 ${history.memories.length} 条记忆`,\n        );\n        this.cachedCompleteHistory = history;\n        return history;\n      } catch (parseError) {\n        console.error('解析完整历史记录失败:', parseError);\n        // 创建新的完整历史记录\n        const newHistory: CompleteHistoryRecord = {\n          id: `history_${Date.now()}`,\n          dialogues: [],\n          memories: [],\n        };\n        this.cachedCompleteHistory = newHistory;\n        return newHistory;\n      }\n    } catch (error) {\n      console.error('加载完整历史记录失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 保存完整历史记录\n   */\n  private async saveCompleteHistory(history: CompleteHistoryRecord): Promise<boolean> {\n    try {\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        await this.initializeChatLorebook();\n      }\n\n      // 检查API是否可用\n      if (!this.worldBookName || typeof window.getLorebookEntries !== 'function') {\n        console.warn('世界书API不可用，无法保存完整历史记录');\n        return false;\n      }\n\n      // 获取所有世界书条目\n      const allEntries = await window.getLorebookEntries(this.worldBookName);\n\n      // 查找完整历史记录条目\n      const historyEntry = this.findEntryByKey(allEntries, this.COMPLETE_HISTORY_KEY);\n\n      // 历史记录标题\n      const historyTitle = `完整游戏历史记录 - 最后更新: ${new Date().toLocaleString()}`;\n\n      // 转换为JSON字符串\n      const historyContent = JSON.stringify(history);\n\n      if (historyEntry) {\n        // 更新现有条目\n        if (typeof window.editLorebookEntry === 'function') {\n          await window.editLorebookEntry(this.worldBookName, historyEntry.uid, {\n            comment: historyTitle,\n            content: historyContent,\n          });\n        } else {\n          // 回退到旧API：删除并重建\n          await window.deleteLorebookEntry(this.worldBookName, historyEntry.uid);\n          await window.createLorebookEntry(this.worldBookName, {\n            keys: [this.COMPLETE_HISTORY_KEY],\n            comment: historyTitle,\n            content: historyContent,\n          });\n        }\n        console.log('更新了完整历史记录');\n      } else {\n        // 创建新条目\n        await window.createLorebookEntry(this.worldBookName, {\n          keys: [this.COMPLETE_HISTORY_KEY],\n          comment: historyTitle,\n          content: historyContent,\n        });\n        console.log('创建了新的完整历史记录条目');\n      }\n\n      // 更新缓存\n      this.cachedCompleteHistory = history;\n      return true;\n    } catch (error) {\n      console.error('保存完整历史记录失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 保存对话历史到世界书\n   * 使用完整历史记录存储所有对话和记忆\n   */\n  private async saveDialogueHistory(gameData: GameData): Promise<boolean> {\n    if (!gameData.story || !gameData.story.dialogue) {\n      console.warn('没有可保存的对话历史');\n      return false;\n    }\n\n    try {\n      // 加载当前的完整历史记录\n      let completeHistory = await this.loadCompleteHistory();\n\n      if (!completeHistory) {\n        // 创建新的完整历史记录\n        completeHistory = {\n          id: `history_${Date.now()}`,\n          dialogues: [],\n          memories: [],\n        };\n      }\n\n      // 添加所有对话到历史记录（避免重复）\n      const existingDialogueCount = completeHistory.dialogues.length;\n\n      // 转换所有对话为简化格式\n      const allDialogues = gameData.story.dialogue.map(dialogue => ({\n        speaker: dialogue.speaker,\n        content: dialogue.content,\n        style: dialogue.style,\n      }));\n\n      // 避免重复添加对话，只添加新的对话\n      if (existingDialogueCount < allDialogues.length) {\n        completeHistory.dialogues = allDialogues;\n        console.log(`更新对话历史：从 ${existingDialogueCount} 条增加到 ${allDialogues.length} 条`);\n      }\n\n      // 添加所有记忆点到历史记录（避免重复）\n      if (gameData.storySummary && gameData.storySummary.length > 0) {\n        // 映射现有记忆点的ID\n        const existingMemoryIds = new Set(completeHistory.memories.map(m => m.id));\n\n        // 添加不存在的新记忆点\n        for (const memory of gameData.storySummary) {\n          if (!existingMemoryIds.has(memory.id)) {\n            completeHistory.memories.push({\n              id: memory.id,\n              content: memory.content,\n            });\n            existingMemoryIds.add(memory.id);\n          }\n        }\n\n        console.log(`更新记忆历史：当前共有 ${completeHistory.memories.length} 条记忆`);\n      }\n\n      // 保存完整历史记录\n      const saveResult = await this.saveCompleteHistory(completeHistory);\n\n      // 同时更新旧版对话历史记录格式（向后兼容）\n      await this.saveLegacyDialogueHistory(gameData, completeHistory);\n\n      return saveResult;\n    } catch (error) {\n      console.error('保存对话历史到世界书失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 保存旧版格式的对话历史（向后兼容）\n   */\n  private async saveLegacyDialogueHistory(\n    gameData: GameData,\n    completeHistory: CompleteHistoryRecord,\n  ): Promise<boolean> {\n    try {\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        await this.initializeChatLorebook();\n      }\n\n      // 检查API是否可用\n      if (!this.worldBookName || typeof window.getLorebookEntries !== 'function') {\n        console.warn('世界书API不可用，无法保存旧版对话历史');\n        return false;\n      }\n\n      // 获取所有世界书条目\n      const allEntries = await window.getLorebookEntries(this.worldBookName);\n\n      // 查找对话历史条目\n      const dialogueHistoryEntry = this.findEntryByKey(allEntries, this.DIALOGUE_HISTORY_KEY);\n\n      // 构建旧版日志格式\n      let logContent = '';\n      for (const dialogue of completeHistory.dialogues) {\n        if (dialogue.speaker === '玩家') {\n          logContent += `选择:${dialogue.content};`;\n        } else {\n          logContent += `${dialogue.speaker}:${dialogue.content};`;\n        }\n      }\n\n      // 添加记忆穿越点\n      for (const memory of completeHistory.memories) {\n        if (memory.content.includes('穿越') || memory.content.includes('回到')) {\n          logContent += `回到过去:${memory.content};`;\n        }\n      }\n\n      // 对话历史标题\n      const dialogueTitle = `对话历史记录 - ${new Date().toLocaleString()}`;\n\n      // 包装为旧版格式\n      const updatedContent = `<log>${logContent}</log>`;\n\n      // 更新或创建条目\n      try {\n        if (dialogueHistoryEntry) {\n          // 更新现有条目\n          if (typeof window.editLorebookEntry === 'function') {\n            await window.editLorebookEntry(this.worldBookName, dialogueHistoryEntry.uid, {\n              comment: dialogueTitle,\n              content: updatedContent,\n            });\n          } else {\n            // 回退到旧API：删除并重建\n            await window.deleteLorebookEntry(this.worldBookName, dialogueHistoryEntry.uid);\n            await window.createLorebookEntry(this.worldBookName, {\n              keys: [this.DIALOGUE_HISTORY_KEY],\n              comment: dialogueTitle,\n              content: updatedContent,\n            });\n          }\n          console.log('更新了旧版对话历史记录');\n        } else {\n          // 创建新条目\n          await window.createLorebookEntry(this.worldBookName, {\n            keys: [this.DIALOGUE_HISTORY_KEY],\n            comment: dialogueTitle,\n            content: updatedContent,\n          });\n          console.log('创建了新的旧版对话历史记录条目');\n        }\n        return true;\n      } catch (error) {\n        console.error('保存旧版对话历史失败:', error);\n        return false;\n      }\n    } catch (error) {\n      console.error('保存旧版对话历史到世界书失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 从世界书获取对话历史\n   * 优先使用新的完整历史记录格式\n   */\n  public async getDialogueHistory(): Promise<DialogueHistoryItem[] | null> {\n    try {\n      // 先尝试获取完整历史记录\n      const completeHistory = await this.loadCompleteHistory();\n\n      if (completeHistory && completeHistory.dialogues && completeHistory.dialogues.length > 0) {\n        console.log(`从完整历史记录中获取 ${completeHistory.dialogues.length} 条对话历史`);\n\n        // 转换为DialogueHistoryItem格式\n        const dialogueHistoryItems: DialogueHistoryItem[] = completeHistory.dialogues.map(d => ({\n          speaker: d.speaker,\n          content: d.content,\n          style: d.style || 'normal',\n        }));\n\n        return dialogueHistoryItems;\n      }\n\n      // 如果没有完整历史记录，回退到旧版记录格式\n      console.log('未找到完整历史记录，尝试旧版格式');\n\n      // 确保聊天世界书已初始化\n      if (!this.worldBookName) {\n        await this.initializeChatLorebook();\n      }\n\n      // 检查API是否可用\n      if (typeof window.getLorebookEntries !== 'function') {\n        console.warn('世界书API不可用，无法获取对话历史');\n        return null;\n      }\n\n      // 获取所有世界书条目\n      const allEntries = await window.getLorebookEntries(this.worldBookName);\n      if (!allEntries || !Array.isArray(allEntries) || allEntries.length === 0) {\n        console.warn('没有找到世界书条目');\n        return null;\n      }\n\n      // 查找持久化对话历史条目\n      const dialogueEntry = this.findEntryByKey(allEntries, this.DIALOGUE_HISTORY_KEY);\n\n      if (!dialogueEntry) {\n        console.warn('没有找到对话历史条目');\n        return null;\n      }\n\n      // 获取条目内容\n      let dialogueContent = '';\n\n      // 尝试直接从条目获取内容\n      if (dialogueEntry.content) {\n        dialogueContent = dialogueEntry.content;\n      }\n      // 如果没有直接内容，使用triggerSlash获取\n      else if (typeof window.triggerSlash === 'function') {\n        // 获取实际键值（可能是数组中的第一个元素）\n        let actualKey = this.DIALOGUE_HISTORY_KEY;\n        if (Array.isArray(dialogueEntry.key) && dialogueEntry.key.length > 0) {\n          actualKey = dialogueEntry.key[0];\n        } else if (typeof dialogueEntry.key === 'string') {\n          actualKey = dialogueEntry.key;\n        }\n\n        dialogueContent = await window.triggerSlash(\n          `/getentryfield file=${this.worldBookName} field=content ${actualKey}`,\n        );\n      }\n\n      if (!dialogueContent) {\n        console.warn('对话历史内容为空');\n        return null;\n      }\n\n      try {\n        // 尝试解析对话历史内容\n        // 首先检查是否有<log>标签\n        if (dialogueContent.includes('<log>') && dialogueContent.includes('</log>')) {\n          const logMatch = dialogueContent.match(/<log>([\\s\\S]*?)<\\/log>/);\n\n          if (logMatch && logMatch[1]) {\n            // 解析日志内容\n            const logContent = logMatch[1];\n            // 分割成独立的对话条目\n            const dialogueEntries = logContent.split(';').filter(entry => entry.trim().length > 0);\n\n            // 转换为DialogueHistoryItem格式\n            const dialogueHistoryItems: DialogueHistoryItem[] = [];\n\n            for (const entry of dialogueEntries) {\n              if (entry.includes(':')) {\n                const [type, content] = entry.split(':', 2);\n\n                if (type === '选择') {\n                  dialogueHistoryItems.push({\n                    speaker: '玩家',\n                    content: content,\n                    style: 'normal',\n                  });\n                } else if (type === '回到过去') {\n                  dialogueHistoryItems.push({\n                    speaker: '旁白',\n                    content: `【时间穿越：${content}】`,\n                    style: 'special',\n                  });\n                } else {\n                  // 普通对话\n                  dialogueHistoryItems.push({\n                    speaker: type,\n                    content: content,\n                    style: 'normal',\n                  });\n                }\n              }\n            }\n\n            console.log(`从旧版格式读取了 ${dialogueHistoryItems.length} 条对话历史`);\n            return dialogueHistoryItems;\n          }\n        } else {\n          // 尝试作为JSON解析\n          try {\n            const dialogues = JSON.parse(dialogueContent) as DialogueHistoryItem[];\n\n            if (Array.isArray(dialogues)) {\n              console.log(`从JSON格式读取了 ${dialogues.length} 条对话历史`);\n              return dialogues;\n            }\n          } catch (jsonError) {\n            console.warn('无法解析对话历史为JSON格式:', jsonError);\n          }\n        }\n      } catch (parseError) {\n        console.error('解析对话历史内容失败:', parseError);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('获取对话历史失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 从键名加载游戏状态\n   */\n  public async loadGameState(saveKey: string): Promise<GameData | null> {\n    const MAX_RETRY = 3;\n\n    for (let retry = 0; retry < MAX_RETRY; retry++) {\n      try {\n        // 确保聊天世界书已初始化\n        if (!this.worldBookName) {\n          console.log('世界书名称为空，重新初始化');\n          await this.initializeChatLorebook();\n\n          if (!this.worldBookName) {\n            console.error('初始化世界书失败，无法加载游戏状态');\n            this.uiManager.showNotification('无法初始化世界书，加载失败', 'error');\n            return null;\n          }\n        }\n\n        // 检查API函数是否可用\n        if (typeof window.getLorebookEntries !== 'function') {\n          console.error('世界书读取API不可用');\n          this.uiManager.showNotification('世界书API不可用，无法加载存档', 'error');\n          return null;\n        }\n\n        // 获取所有世界书条目\n        console.log(`获取世界书条目，尝试 ${retry + 1}/${MAX_RETRY}`);\n        const allEntries = await window.getLorebookEntries(this.worldBookName);\n\n        // 尝试查找对应的存档条目\n        const saveEntry = this.findEntryByKey(allEntries, saveKey);\n\n        if (!saveEntry) {\n          console.warn(`找不到存档键 ${saveKey}`);\n\n          // 如果不是最后一次尝试，等待后重试\n          if (retry < MAX_RETRY - 1) {\n            console.log(`等待500ms后重试...`);\n            await new Promise(resolve => setTimeout(resolve, 500));\n            continue; // 继续下一次重试\n          } else {\n            this.uiManager.showNotification(`找不到指定存档`, 'warning');\n            return null;\n          }\n        }\n\n        // 获取条目内容\n        let entryContent = '';\n\n        try {\n          // 尝试直接从条目获取内容\n          if (saveEntry.content) {\n            entryContent = saveEntry.content;\n            console.log('直接从条目获取到内容');\n          }\n          // 如果没有直接内容，使用triggerSlash获取\n          else if (typeof window.triggerSlash === 'function') {\n            // 获取实际键值（可能是数组中的第一个元素）\n            let actualKey = saveKey;\n            if (Array.isArray(saveEntry.key) && saveEntry.key.length > 0) {\n              actualKey = saveEntry.key[0];\n            } else if (typeof saveEntry.key === 'string') {\n              actualKey = saveEntry.key;\n            }\n\n            console.log(`通过triggerSlash获取条目内容，key=${actualKey}`);\n            entryContent = await window.triggerSlash(\n              `/getentryfield file=${this.worldBookName} field=content ${actualKey}`,\n            );\n\n            if (entryContent) {\n              console.log('通过triggerSlash成功获取内容');\n            }\n          }\n\n          if (!entryContent) {\n            console.warn(`存档键 ${saveKey} 对应的内容为空`);\n\n            // 如果不是最后一次尝试，等待后重试\n            if (retry < MAX_RETRY - 1) {\n              console.log(`等待500ms后重试...`);\n              await new Promise(resolve => setTimeout(resolve, 500));\n              continue; // 继续下一次重试\n            } else {\n              this.uiManager.showNotification(`存档内容为空`, 'warning');\n              return null;\n            }\n          }\n\n          // 解析保存的状态\n          try {\n            console.log('解析存档内容...');\n            const savedState = JSON.parse(entryContent);\n\n            // 确保对话索引设置为0\n            if (savedState && savedState.story) {\n              savedState.story.currentDialogueIndex = 0;\n              console.log('成功解析存档内容，重置对话索引');\n              return savedState;\n            } else {\n              console.warn('解析的存档缺少必要数据');\n\n              // 如果不是最后一次尝试并且是格式问题，可能是加载不完整，重试\n              if (retry < MAX_RETRY - 1) {\n                console.log(`等待500ms后重试...`);\n                await new Promise(resolve => setTimeout(resolve, 500));\n                continue; // 继续下一次重试\n              } else {\n                this.uiManager.showNotification('存档数据不完整或格式错误', 'error');\n                return null;\n              }\n            }\n          } catch (parseError) {\n            console.error('解析存档内容失败:', parseError);\n\n            // 如果不是最后一次尝试，等待后重试\n            if (retry < MAX_RETRY - 1) {\n              console.log(`等待500ms后重试...`);\n              await new Promise(resolve => setTimeout(resolve, 500));\n              continue; // 继续下一次重试\n            } else {\n              this.uiManager.showNotification('存档内容格式错误', 'error');\n              return null;\n            }\n          }\n        } catch (contentError) {\n          console.error(`获取存档 ${saveKey} 内容失败:`, contentError);\n\n          // 如果不是最后一次尝试，等待后重试\n          if (retry < MAX_RETRY - 1) {\n            console.log(`等待500ms后重试...`);\n            await new Promise(resolve => setTimeout(resolve, 500));\n            continue; // 继续下一次重试\n          } else {\n            this.uiManager.showNotification('获取存档内容失败', 'error');\n            return null;\n          }\n        }\n      } catch (retryError) {\n        console.error(`加载游戏存档尝试 ${retry + 1} 失败:`, retryError);\n\n        // 如果不是最后一次尝试，等待后重试\n        if (retry < MAX_RETRY - 1) {\n          console.log(`等待500ms后重试...`);\n          await new Promise(resolve => setTimeout(resolve, 500));\n        } else {\n          this.uiManager.showNotification(\n            '加载存档失败: ' + (retryError instanceof Error ? retryError.message : '未知错误'),\n            'error',\n          );\n          return null;\n        }\n      }\n    }\n\n    return null; // 如果所有重试都失败，返回null\n  }\n\n  /**\n   * 根据ID加载游戏状态\n   */\n  public async loadGameStateByID(summaryId: number, isManual: boolean = false): Promise<GameData | null> {\n    const saveKey = isManual ? `${this.SAVE_TYPE.MANUAL}${summaryId}` : `${this.SAVE_TYPE.AUTO}${summaryId}`;\n    return this.loadGameState(saveKey);\n  }\n\n  /**\n   * 获取完整历史记录\n   * 包含所有对话和记忆点\n   */\n  public async getCompleteHistory(): Promise<CompleteHistoryRecord | null> {\n    return this.loadCompleteHistory();\n  }\n\n  /**\n   * 加载游戏\n   */\n  public loadGame() {\n    // 显示加载游戏弹窗\n    this.showLoadGameModal();\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = _;","/**\n * 设置管理器组件\n * 负责管理游戏的设置，如字体大小和界面类型\n */\nimport * as _ from 'lodash';\n\nexport type UIMode = 'adaptive' | 'mobile' | 'desktop';\n\nexport interface GameSettings {\n  fontSize: 'small' | 'medium' | 'large'; // 字体大小\n  uiMode: UIMode; // 界面模式：自适应、手机、电脑\n  gameHeight: number | 'auto'; // 游戏界面高度，单位px或auto自动适应\n}\n\nexport class SettingsManager {\n  // 默认设置\n  private defaultSettings: GameSettings = {\n    fontSize: 'medium',\n    uiMode: 'adaptive',\n    gameHeight: 'auto', // 默认为自动高度\n  };\n\n  // 当前设置\n  private currentSettings: GameSettings;\n\n  // 设置变更回调\n  private onSettingsChangedCallback: ((settings: GameSettings) => void) | null = null;\n\n  // 本地存储键\n  private readonly SETTINGS_STORAGE_KEY = 'monastery_game_settings';\n\n  constructor() {\n    // 从本地存储加载设置或使用默认设置\n    this.currentSettings = this.loadSettings();\n\n    // 初始应用设置\n    this.applySettings();\n\n    console.log('设置管理器初始化完成');\n  }\n\n  /**\n   * 从本地存储加载设置\n   */\n  private loadSettings(): GameSettings {\n    try {\n      const savedSettings = localStorage.getItem(this.SETTINGS_STORAGE_KEY);\n      if (savedSettings) {\n        const parsedSettings = JSON.parse(savedSettings);\n\n        // 处理从旧版本升级的情况\n        if (parsedSettings.hasOwnProperty('useMobileUI')) {\n          // 从旧版本迁移\n          parsedSettings.uiMode = parsedSettings.useMobileUI ? 'mobile' : 'desktop';\n          delete parsedSettings.useMobileUI;\n        }\n\n        return {\n          ...this.defaultSettings,\n          ...parsedSettings,\n        };\n      }\n    } catch (error) {\n      console.error('加载设置失败:', error);\n    }\n\n    return { ...this.defaultSettings };\n  }\n\n  /**\n   * 保存设置到本地存储\n   */\n  private saveSettings(): void {\n    try {\n      localStorage.setItem(this.SETTINGS_STORAGE_KEY, JSON.stringify(this.currentSettings));\n    } catch (error) {\n      console.error('保存设置失败:', error);\n    }\n  }\n\n  /**\n   * 应用当前设置到UI\n   */\n  public applySettings(): void {\n    // 应用字体大小\n    document.documentElement.classList.remove('font-small', 'font-medium', 'font-large');\n    document.documentElement.classList.add(`font-${this.currentSettings.fontSize}`);\n\n    // 应用界面类型\n    document.documentElement.classList.remove('mobile-ui', 'desktop-ui');\n\n    // 根据 UI 模式应用相应的类\n    switch (this.currentSettings.uiMode) {\n      case 'mobile':\n        document.documentElement.classList.add('mobile-ui');\n        break;\n      case 'desktop':\n        document.documentElement.classList.add('desktop-ui');\n        break;\n      case 'adaptive':\n      default:\n        // 自适应模式不添加特殊类，依赖于CSS媒体查询\n        break;\n    }\n\n    // 应用游戏高度\n    const gameContainer = document.querySelector('.game-container') as HTMLElement;\n    if (gameContainer) {\n      if (this.currentSettings.gameHeight === 'auto') {\n        // 自动高度模式，移除设置的高度\n        gameContainer.style.height = '';\n      } else {\n        // 固定高度模式\n        gameContainer.style.height = `${this.currentSettings.gameHeight}px`;\n      }\n    }\n\n    console.log('已应用设置:', this.currentSettings);\n  }\n\n  /**\n   * 更新设置\n   */\n  public updateSettings(settings: Partial<GameSettings>): void {\n    // 更新当前设置\n    this.currentSettings = {\n      ...this.currentSettings,\n      ...settings,\n    };\n\n    // 保存设置\n    this.saveSettings();\n\n    // 应用设置\n    this.applySettings();\n\n    // 调用变更回调\n    if (this.onSettingsChangedCallback) {\n      this.onSettingsChangedCallback(this.currentSettings);\n    }\n  }\n\n  /**\n   * 设置字体大小\n   */\n  public setFontSize(fontSize: 'small' | 'medium' | 'large'): void {\n    this.updateSettings({ fontSize });\n  }\n\n  /**\n   * 设置界面模式\n   */\n  public setUIMode(uiMode: UIMode): void {\n    this.updateSettings({ uiMode });\n  }\n\n  /**\n   * 设置游戏高度\n   */\n  public setGameHeight(gameHeight: number | 'auto'): void {\n    this.updateSettings({ gameHeight });\n  }\n\n  /**\n   * 获取当前设置\n   */\n  public getSettings(): GameSettings {\n    return { ...this.currentSettings };\n  }\n\n  /**\n   * 重置为默认设置\n   */\n  public resetSettings(): void {\n    this.currentSettings = { ...this.defaultSettings };\n    this.saveSettings();\n    this.applySettings();\n\n    // 调用变更回调\n    if (this.onSettingsChangedCallback) {\n      this.onSettingsChangedCallback(this.currentSettings);\n    }\n  }\n\n  /**\n   * 设置设置变更回调\n   */\n  public setOnSettingsChanged(callback: (settings: GameSettings) => void): void {\n    this.onSettingsChangedCallback = callback;\n  }\n\n  /**\n   * 显示设置对话框\n   */\n  public showSettingsDialog(): void {\n    // 创建设置对话框HTML\n    const dialogHtml = `\n      <div id=\"settings-dialog\" class=\"modal fade\">\n        <div class=\"modal-dialog modal-dialog-centered monastery-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\"><i class=\"fas fa-cog\"></i> 游戏设置</h5>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n            </div>\n            <div class=\"modal-body\">\n              <div class=\"form-group monastery-form-group\">\n                <label for=\"font-size-select\" class=\"monastery-label\">\n                  <i class=\"fas fa-font\"></i> 字体大小\n                </label>\n                <select id=\"font-size-select\" class=\"form-control monastery-select\">\n                  <option value=\"small\" ${this.currentSettings.fontSize === 'small' ? 'selected' : ''}>小</option>\n                  <option value=\"medium\" ${this.currentSettings.fontSize === 'medium' ? 'selected' : ''}>中</option>\n                  <option value=\"large\" ${this.currentSettings.fontSize === 'large' ? 'selected' : ''}>大</option>\n                </select>\n              </div>\n              <div class=\"form-group monastery-form-group\">\n                <label for=\"ui-mode-select\" class=\"monastery-label\">\n                  <i class=\"fas fa-mobile-alt\"></i> 界面模式\n                </label>\n                <select id=\"ui-mode-select\" class=\"form-control monastery-select\">\n                  <option value=\"adaptive\" ${\n                    this.currentSettings.uiMode === 'adaptive' ? 'selected' : ''\n                  }>自适应</option>\n                  <option value=\"mobile\" ${this.currentSettings.uiMode === 'mobile' ? 'selected' : ''}>手机</option>\n                  <option value=\"desktop\" ${this.currentSettings.uiMode === 'desktop' ? 'selected' : ''}>电脑</option>\n                </select>\n                <small class=\"form-text text-muted monastery-help-text\">自适应: 根据屏幕大小自动调整; 手机/电脑: 强制使用对应界面</small>\n              </div>\n              <div class=\"form-group monastery-form-group\">\n                <label for=\"game-height-mode\" class=\"monastery-label\">\n                  <i class=\"fas fa-arrows-alt-v\"></i> 游戏界面高度\n                </label>\n                <div class=\"custom-control custom-switch mb-2\">\n                  <input type=\"checkbox\" class=\"custom-control-input\" id=\"height-custom-switch\" ${\n                    this.currentSettings.gameHeight !== 'auto' ? 'checked' : ''\n                  }>\n                  <label class=\"custom-control-label\" for=\"height-custom-switch\">自定义高度</label>\n                </div>\n                <div id=\"custom-height-container\" class=\"mt-2 ${\n                  this.currentSettings.gameHeight === 'auto' ? 'd-none' : ''\n                }\">\n                  <div class=\"input-group\">\n                    <input \n                      type=\"number\" \n                      id=\"game-height-input\" \n                      class=\"form-control monastery-input\" \n                      value=\"${this.currentSettings.gameHeight === 'auto' ? 1000 : this.currentSettings.gameHeight}\" \n                      min=\"500\" \n                      max=\"2000\" \n                      step=\"50\" \n                    />\n                    <div class=\"input-group-append\">\n                      <span class=\"input-group-text\">px</span>\n                    </div>\n                  </div>\n                  <small class=\"form-text text-muted monastery-help-text\">推荐值: 1000px（可根据屏幕大小调整）</small>\n                </div>\n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary monastery-btn monastery-btn-secondary\" id=\"reset-settings-btn\">\n                <i class=\"fas fa-undo\"></i> 恢复默认\n              </button>\n              <button type=\"button\" class=\"btn btn-primary monastery-btn monastery-btn-primary\" id=\"save-settings-btn\">\n                <i class=\"fas fa-check\"></i> 保存设置\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary monastery-btn monastery-btn-cancel\" data-dismiss=\"modal\">\n                <i class=\"fas fa-times\"></i> 取消\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // 添加到页面\n    $('body').append(dialogHtml);\n\n    // 绑定高度设置开关事件\n    $('#height-custom-switch').on('change', function () {\n      if ($(this).is(':checked')) {\n        $('#custom-height-container').removeClass('d-none');\n      } else {\n        $('#custom-height-container').addClass('d-none');\n      }\n    });\n\n    // 绑定保存按钮事件\n    $('#save-settings-btn').on('click', () => {\n      const fontSize = $('#font-size-select').val() as 'small' | 'medium' | 'large';\n      const uiMode = $('#ui-mode-select').val() as UIMode;\n      const useCustomHeight = $('#height-custom-switch').is(':checked');\n\n      // 根据是否启用自定义高度决定使用auto还是自定义值\n      let gameHeight: number | 'auto' = 'auto';\n\n      if (useCustomHeight) {\n        const gameHeightInput = $('#game-height-input').val();\n        // 使用lodash验证并转换高度值，确保在有效范围内\n        gameHeight = _.clamp(\n          _.parseInt(gameHeightInput as string) || 1000,\n          500, // 最小值\n          2000, // 最大值\n        );\n      }\n\n      this.updateSettings({\n        fontSize,\n        uiMode,\n        gameHeight,\n      });\n\n      $('#settings-dialog').modal('hide');\n    });\n\n    $('#reset-settings-btn').on('click', () => {\n      if (confirm('确定要恢复默认设置吗？')) {\n        this.resetSettings();\n\n        // 更新对话框中的选项\n        $('#font-size-select').val(this.defaultSettings.fontSize);\n        $('#ui-mode-select').val(this.defaultSettings.uiMode);\n\n        // 更新自定义高度开关\n        $('#height-custom-switch').prop('checked', this.defaultSettings.gameHeight !== 'auto');\n        if (this.defaultSettings.gameHeight === 'auto') {\n          $('#custom-height-container').addClass('d-none');\n        } else {\n          $('#custom-height-container').removeClass('d-none');\n          $('#game-height-input').val(this.defaultSettings.gameHeight);\n        }\n      }\n    });\n\n    // 显示对话框\n    $('#settings-dialog').modal('show').data('backdrop', 'static').data('keyboard', false);\n\n    // 当对话框关闭时移除\n    $('#settings-dialog').on('hidden.bs.modal', function () {\n      $(this).remove();\n    });\n  }\n}\n","/**\n * UI管理器组件\n * 负责管理游戏中的通用UI显示和交互\n */\n\nexport class UIManager {\n  // 当前确认回调\n  private currentConfirmCallback: (() => void) | null = null;\n\n  constructor() {\n    // 初始化Toastr配置\n    toastr.options = {\n      closeButton: true,\n      progressBar: true,\n      positionClass: 'toast-top-right',\n      preventDuplicates: false,\n      timeOut: 3000,\n    };\n\n    // 绑定确认对话框按钮事件 - 这里不需要预绑定，我们会在显示时动态绑定\n    console.log('UI管理器初始化完成');\n  }\n\n  /**\n   * 显示加载提示\n   */\n  public showLoading(message: string = '加载中...') {\n    $('.loading-text').text(message);\n    $('.loading-indicator').removeClass('hidden');\n  }\n\n  /**\n   * 隐藏加载提示\n   */\n  public hideLoading() {\n    $('.loading-indicator').addClass('hidden');\n  }\n\n  /**\n   * 显示确认对话框\n   */\n  public showConfirmDialog(message: string, onConfirm: () => void) {\n    // 保存确认回调\n    this.currentConfirmCallback = onConfirm;\n\n    console.log('显示确认对话框:', message);\n\n    // 设置确认消息\n    $('#confirm-message').text(message);\n\n    // 显示对话框容器\n    $('#confirm-container').removeClass('hidden');\n\n    // 绑定按钮事件\n    $('#confirm-yes')\n      .off('click')\n      .on('click', () => this.handleConfirmYes());\n\n    $('#confirm-no')\n      .off('click')\n      .on('click', () => this.hideConfirmDialog());\n\n    // 点击对话框外部关闭\n    $(document).on('click.confirm-outside', e => {\n      if ($(e.target).closest('.confirm-dialog').length === 0 && !$('#confirm-container').hasClass('hidden')) {\n        this.hideConfirmDialog();\n      }\n    });\n  }\n\n  /**\n   * 隐藏确认对话框\n   */\n  public hideConfirmDialog() {\n    // 隐藏对话框\n    $('#confirm-container').addClass('hidden');\n\n    // 移除外部点击事件处理器\n    $(document).off('click.confirm-outside');\n\n    // 重置回调\n    this.currentConfirmCallback = null;\n  }\n\n  /**\n   * 处理确认按钮点击\n   */\n  private handleConfirmYes() {\n    // 调用确认回调\n    if (this.currentConfirmCallback) {\n      this.currentConfirmCallback();\n    }\n\n    // 隐藏对话框\n    this.hideConfirmDialog();\n  }\n\n  /**\n   * 显示通知\n   */\n  public showNotification(\n    message: string,\n    type: 'info' | 'success' | 'warning' | 'error' = 'info',\n    duration: number = 3000,\n  ) {\n    // 使用toastr库显示通知\n    toastr.options.timeOut = duration;\n\n    switch (type) {\n      case 'success':\n        toastr.success(message);\n        break;\n      case 'warning':\n        toastr.warning(message);\n        break;\n      case 'error':\n        toastr.error(message);\n        break;\n      default:\n        toastr.info(message);\n    }\n  }\n\n  /**\n   * 切换全屏显示\n   */\n  public toggleFullscreen() {\n    if (!document.fullscreenElement) {\n      // 进入全屏\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      }\n    } else {\n      // 退出全屏\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  }\n\n  /**\n   * 显示文本提示\n   */\n  public showTooltip(element: HTMLElement, message: string) {\n    // 使用jQuery UI的tooltip\n    $(element)\n      .attr('title', message)\n      .tooltip({\n        content: message,\n        position: { my: 'center bottom', at: 'center top-5' },\n        show: { effect: 'fadeIn', duration: 200 },\n        hide: { effect: 'fadeOut', duration: 200 },\n      })\n      .tooltip('open');\n\n    // 自动关闭\n    setTimeout(() => {\n      $(element).tooltip('close');\n    }, 2000);\n  }\n\n  /**\n   * 显示输入对话框\n   * @param title 对话框标题\n   * @param defaultValue 默认值\n   * @param callback 输入完成回调函数\n   */\n  public showInputDialog(title: string, defaultValue: string, callback: (value: string) => void): void {\n    // 检查是否已存在对话框\n    if ($('#input-dialog').length > 0) {\n      $('#input-dialog').remove();\n    }\n\n    // 创建对话框\n    const dialogHtml = `\n      <div id=\"input-dialog\" class=\"modal fade\">\n        <div class=\"modal-dialog modal-dialog-centered monastery-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\"><i class=\"fas fa-feather-alt\"></i> ${title}</h5>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n            </div>\n            <div class=\"modal-body\">\n              <div class=\"input-dialog-container\">\n                <label for=\"input-dialog-value\" class=\"monastery-label\">为您的记录命名：</label>\n                <input type=\"text\" id=\"input-dialog-value\" class=\"form-control monastery-input\" value=\"${defaultValue}\">\n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-primary monastery-btn monastery-btn-primary\" id=\"input-dialog-confirm\">\n                <i class=\"fas fa-save\"></i> 确定\n              </button>\n              <button type=\"button\" class=\"btn btn-secondary monastery-btn monastery-btn-secondary\" data-dismiss=\"modal\">\n                <i class=\"fas fa-times\"></i> 取消\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // 添加到页面\n    $('body').append(dialogHtml);\n\n    // 绑定确认按钮事件\n    $('#input-dialog-confirm').on('click', () => {\n      const value = $('#input-dialog-value').val() as string;\n      $('#input-dialog').modal('hide');\n      callback(value);\n    });\n\n    // 绑定回车键事件\n    $('#input-dialog-value').on('keypress', e => {\n      if (e.which === 13) {\n        // Enter键\n        $('#input-dialog-confirm').click();\n      }\n    });\n\n    // 显示对话框\n    $('#input-dialog').modal('show');\n\n    // 自动聚焦输入框\n    $('#input-dialog-value').focus();\n  }\n}\n","/**\n * 角色资源服务\n * 负责管理角色数据和立绘资源\n */\n\n/**\n * 角色表情差分类型\n */\nexport type EmotionType = 'default' | 'smile' | 'sad' | 'angry' | 'shocked' | 'blush' | 'thoughtful';\n\n/**\n * 角色资源数据接口\n */\nexport interface CharacterResource {\n  id: string; // 角色唯一ID\n  name: string; // 角色显示名称\n  fullName: string; // 角色全名\n  position: 'left' | 'right' | 'center'; // 立绘显示位置\n  emotions: {\n    [key in EmotionType]?: string; // 表情差分对应的图片URL\n  };\n  bio?: string; // 角色简介（可选）\n}\n\nexport class CharacterResourceService {\n  // 角色资源映射表\n  private characters: Map<string, CharacterResource> = new Map();\n\n  constructor() {\n    console.log('角色资源服务已初始化');\n    // 初始化角色数据\n    this.initializeCharacters();\n  }\n\n  /**\n   * 初始化角色数据\n   */\n  private initializeCharacters(): void {\n    // 修女Cecilia\n    this.characters.set('cecilia', {\n      id: 'cecilia',\n      name: 'Cecilia修女',\n      fullName: 'Sister Cecilia',\n      position: 'right',\n      emotions: {\n        default:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%BE%AE%E7%AC%91.png?ref_type=heads',\n        smile:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%BE%AE%E7%AC%91.png?ref_type=heads',\n        sad: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%93%AD%E6%B3%A3.png?ref_type=heads',\n        shocked:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E6%83%8A%E8%AE%B6.png?ref_type=heads',\n        blush:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%AE%B3%E7%BE%9E.png?ref_type=heads',\n      },\n      bio: '一位年轻的见习修女，专注于抄写工作，对草药学有浓厚兴趣。',\n    });\n\n    // 玩家角色\n    this.characters.set('player', {\n      id: 'player',\n      name: '{{user}}',\n      fullName: 'The Visitor',\n      position: 'left',\n      emotions: {\n        default:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E9%BB%98%E8%AE%A4.png?ref_type=heads',\n        smile:\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%BE%AE%E7%AC%91.png?ref_type=heads',\n        sad: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%93%AD%E6%B3%A3.png?ref_type=heads',\n      },\n      bio: '一位到访修道院的神秘人物，对修道院的历史和草药学表示了浓厚兴趣。',\n    });\n\n    // 可以根据需要添加更多角色...\n  }\n\n  /**\n   * 获取角色资源\n   * @param characterId 角色ID\n   * @returns 角色资源对象，不存在时返回undefined\n   */\n  public getCharacter(characterId: string): CharacterResource | undefined {\n    return this.characters.get(characterId);\n  }\n\n  /**\n   * 获取所有角色ID列表\n   * @returns 角色ID数组\n   */\n  public getAllCharacterIds(): string[] {\n    return Array.from(this.characters.keys());\n  }\n\n  /**\n   * 获取角色表情图片URL\n   * @param characterId 角色ID\n   * @param emotion 表情类型，默认为'default'\n   * @returns 表情图片URL，角色或表情不存在时返回undefined\n   */\n  public getCharacterEmotionUrl(characterId: string, emotion: EmotionType = 'default'): string | undefined {\n    const character = this.characters.get(characterId);\n    if (!character) return undefined;\n\n    // 如果请求的表情不存在，返回默认表情\n    return character.emotions[emotion] || character.emotions.default;\n  }\n\n  /**\n   * 获取角色名称\n   * @param characterId 角色ID\n   * @returns 角色名称，不存在时返回\"未知角色\"\n   */\n  public getCharacterName(characterId: string): string {\n    const character = this.characters.get(characterId);\n    return character ? character.name : '未知角色';\n  }\n\n  /**\n   * 添加一个新角色\n   * @param character 角色资源对象\n   * @returns 是否添加成功\n   */\n  public addCharacter(character: CharacterResource): boolean {\n    if (this.characters.has(character.id)) {\n      console.warn(`角色ID: ${character.id} 已存在，无法添加`);\n      return false;\n    }\n\n    this.characters.set(character.id, character);\n    return true;\n  }\n\n  /**\n   * 更新角色信息\n   * @param characterId 角色ID\n   * @param updates 更新的字段\n   * @returns 是否更新成功\n   */\n  public updateCharacter(characterId: string, updates: Partial<CharacterResource>): boolean {\n    const character = this.characters.get(characterId);\n    if (!character) {\n      console.warn(`角色ID: ${characterId} 不存在，无法更新`);\n      return false;\n    }\n\n    // 使用lodash合并对象\n    const updatedCharacter = _.merge({}, character, updates);\n    this.characters.set(characterId, updatedCharacter);\n\n    return true;\n  }\n}\n","/**\n * 游戏数据服务\n * 负责加载和管理游戏数据\n */\nimport { DialogueStyle, GameData } from '../scripts/models/gameData';\n\nexport class GameDataService {\n  // 游戏默认数据\n  private defaultGameData: GameData = {\n    story: {\n      date: '1243年 夏',\n      location: '修道院',\n      scene: '图书室',\n      dialogue: [\n        {\n          speaker: 'Cecilia修女',\n          content: '欢迎来到修道院，这里是我们的图书室。',\n          style: 'normal' as DialogueStyle,\n          portrait: {\n            character: 'cecilia',\n            emotion: 'smile',\n          },\n          background: {\n            location: '修道院',\n            scene: '图书室',\n          },\n        },\n        {\n          speaker: '玩家',\n          content: '谢谢你的接待，这里的藏书真是令人惊叹。',\n          style: 'normal' as DialogueStyle,\n          portrait: {\n            character: 'player',\n            emotion: 'default',\n          },\n        },\n        {\n          speaker: '旁白',\n          content: 'Cecilia修女微笑着拿起一本古老的书籍。',\n          style: 'special' as DialogueStyle,\n        },\n        {\n          speaker: 'Cecilia修女',\n          content: '这本是我们修道院最珍贵的草药学手稿，记载了很多珍贵的药方。',\n          style: 'normal' as DialogueStyle,\n          portrait: {\n            character: 'cecilia',\n            emotion: 'thoughtful',\n          },\n        },\n        {\n          speaker: '图书管理员',\n          content: '午餐时间到了，请各位移步餐厅。',\n          style: 'normal' as DialogueStyle,\n          // 这是一个未预定义的角色，只显示名字，不显示立绘\n        },\n        {\n          speaker: 'Cecilia修女',\n          content: '不如我们去花园里继续聊吧？',\n          style: 'normal' as DialogueStyle,\n          portrait: {\n            character: 'cecilia',\n            emotion: 'smile',\n          },\n          background: {\n            location: '修道院',\n            scene: '花园',\n          },\n        },\n      ],\n      options: ['好的，我很乐意。', '我想先了解更多关于那本草药手稿的内容。', '我需要先休息一下，稍后再聊。'],\n      currentDialogueIndex: 0,\n      currentChapter: '第一章：修道院的秘密',\n      currentFunds: 50,\n    },\n    storySummary: [\n      {\n        id: 1,\n        content: '玩家来到修道院，与Cecilia修女在图书室相遇，得知了一本珍贵的草药学手稿。',\n        timestamp: new Date().toISOString(),\n      },\n    ],\n  };\n\n  constructor() {\n    console.log('游戏数据服务已初始化');\n  }\n\n  /**\n   * 加载游戏数据\n   * @returns 游戏数据\n   */\n  public async loadGameData(): Promise<GameData> {\n    // 在实际应用中，这里可能会从文件或API加载数据\n    // 现在我们使用默认数据\n    return this.defaultGameData;\n  }\n\n  /**\n   * 保存游戏数据\n   * @param gameData 游戏数据\n   */\n  public async saveGameData(gameData: GameData): Promise<void> {\n    // 在实际应用中，这里可能会保存数据到文件或API\n    console.log('游戏数据已保存');\n  }\n}\n","/**\n * 游戏状态生成服务\n * 负责根据玩家选择或记忆点生成新的游戏状态\n */\nimport { GameData } from '../scripts/models/gameData';\n\nexport class GameStateGenerationService {\n  // 添加属性保存原始响应\n  private lastRawResponse: string = '';\n\n  constructor() {\n    console.log('游戏状态生成服务已初始化');\n  }\n\n  /**\n   * 获取最后一次LLM生成的原始响应\n   * @returns 最后一次LLM的原始响应\n   */\n  public getLastRawResponse(): string {\n    return this.lastRawResponse;\n  }\n\n  /**\n   * 生成下一个游戏状态\n   * @param choice 玩家选择\n   */\n  public async generateNextGameState(choice: string): Promise<GameData | null> {\n    // 检查API是否可用\n    if (typeof window.generate !== 'function') {\n      console.warn('generate API不可用');\n      return null;\n    }\n\n    try {\n      // 使用简单标签替代复杂提示词\n      const systemPrompt = `<选择>${choice}</选择>`;\n\n      // 使用简单的inject参数指示AI返回游戏状态JSON\n      const generateConfig = {\n        user_input: choice,\n        should_stream: false,\n        injects: [\n          {\n            role: 'system',\n            content: systemPrompt,\n            position: 'before_prompt',\n            depth: 0,\n            should_scan: false,\n          },\n        ],\n      };\n\n      // 调用生成API\n      const result = await window.generate(generateConfig);\n\n      // 保存并打印完整的原始响应\n      this.lastRawResponse = result;\n      console.log('%c[LLM完整响应]', 'color: #ff5722; font-weight: bold;');\n      console.log(result);\n\n      // 解析结果\n      const regex = /<gametext>([\\s\\S]*?)<\\/gametext>/;\n      const match = result.match(regex);\n\n      if (match && match[1]) {\n        try {\n          const jsonData = match[1].trim();\n          console.log('%c[找到游戏状态JSON]', 'color: #4caf50; font-weight: bold;');\n          console.log(jsonData);\n          const gameData = JSON.parse(jsonData);\n          return gameData;\n        } catch (parseError) {\n          console.error('解析游戏数据JSON失败:', parseError);\n          const jsonData = match[1].trim();\n          console.log('%c[解析JSON失败]', 'color: #f44336; font-weight: bold;', jsonData);\n          return null;\n        }\n      } else {\n        console.error('未找到<gametext>标签或内容为空');\n        return null;\n      }\n    } catch (error) {\n      console.error('生成游戏状态失败:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 生成记忆点游戏状态\n   * @param memory 记忆点对象\n   */\n  public async generateMemoryState(memory: { id: number; content: string; image?: string }): Promise<GameData | null> {\n    // 检查API是否可用\n    if (typeof window.generate !== 'function') {\n      console.warn('generate API不可用');\n      return null;\n    }\n\n    try {\n      // 使用简单标签替代复杂提示词\n      const systemPrompt = `<时间跳跃>${memory.content}</时间跳跃>`;\n\n      // 使用简单的inject参数指示AI根据记忆点生成游戏状态\n      const result = await window.generate({\n        user_input: `穿越到记忆点\"${memory.content}\"`,\n        should_stream: false,\n        injects: [\n          {\n            role: 'system',\n            content: systemPrompt,\n            position: 'before_prompt',\n            depth: 0,\n            should_scan: false,\n          },\n        ],\n      });\n\n      // 保存并打印完整的原始响应\n      this.lastRawResponse = result;\n      console.log('%c[LLM记忆点响应]', 'color: #ff9800; font-weight: bold;');\n      console.log(result);\n\n      // 解析结果\n      const regex = /<gametext>([\\s\\S]*?)<\\/gametext>/;\n      const match = result.match(regex);\n\n      if (match && match[1]) {\n        try {\n          const jsonData = match[1].trim();\n          console.log('%c[找到记忆点游戏状态JSON]', 'color: #4caf50; font-weight: bold;');\n          console.log(jsonData);\n          const gameData = JSON.parse(jsonData);\n          return gameData;\n        } catch (parseError) {\n          console.error('解析记忆点游戏数据JSON失败:', parseError);\n          const jsonData = match[1].trim();\n          console.log('%c[解析记忆点JSON失败]', 'color: #f44336; font-weight: bold;', jsonData);\n          return null;\n        }\n      }\n    } catch (error) {\n      console.error('生成记忆点游戏状态失败:', error);\n    }\n\n    return null;\n  }\n\n  /**\n   * 处理自定义行动\n   * @param action 玩家输入的自定义行动\n   */\n  public async handleCustomAction(action: string): Promise<GameData | null> {\n    // 检查API是否可用\n    if (typeof window.generate !== 'function') {\n      console.warn('generate API不可用');\n      return null;\n    }\n\n    try {\n      // 使用简单标签替代复杂提示词\n      const systemPrompt = `<自定义行动>${action}</自定义行动>`;\n\n      // 使用inject参数指示AI处理自定义行动\n      const result = await window.generate({\n        user_input: action,\n        should_stream: false,\n        injects: [\n          {\n            role: 'system',\n            content: systemPrompt,\n            position: 'before_prompt',\n            depth: 0,\n            should_scan: false,\n          },\n        ],\n      });\n\n      // 保存并打印完整的原始响应\n      this.lastRawResponse = result;\n      console.log('%c[LLM自定义行动响应]', 'color: #2196f3; font-weight: bold;');\n      console.log(result);\n\n      // 解析结果\n      const regex = /<gametext>([\\s\\S]*?)<\\/gametext>/;\n      const match = result.match(regex);\n\n      if (match && match[1]) {\n        try {\n          const jsonData = match[1].trim();\n          console.log('%c[找到自定义行动游戏状态JSON]', 'color: #4caf50; font-weight: bold;');\n          console.log(jsonData);\n          const gameData = JSON.parse(jsonData);\n          return gameData;\n        } catch (parseError) {\n          console.error('解析自定义行动游戏数据JSON失败:', parseError);\n          const jsonData = match[1].trim();\n          console.log('%c[解析自定义行动JSON失败]', 'color: #f44336; font-weight: bold;', jsonData);\n          return null;\n        }\n      }\n    } catch (error) {\n      console.error('处理自定义行动失败:', error);\n    }\n\n    return null;\n  }\n\n  /**\n   * 添加一个辅助方法，可以通过控制台调用查看最后一次响应\n   * 用法: window.debugLLMResponse()\n   */\n  public initDebugHelpers(): void {\n    (window as any).debugLLMResponse = () => {\n      console.log('%c[Debug] 最后一次LLM响应', 'background: #222; color: #bada55');\n      console.log(this.lastRawResponse);\n\n      // 尝试提取gametext部分\n      const regex = /<gametext>([\\s\\S]*?)<\\/gametext>/;\n      const match = this.lastRawResponse.match(regex);\n\n      if (match && match[1]) {\n        console.log('%c[Debug] 提取的gametext内容', 'background: #222; color: #ffa500');\n        console.log(match[1]);\n\n        try {\n          const parsed = JSON.parse(match[1]);\n          console.log('%c[Debug] 解析后的JSON对象', 'background: #222; color: #4caf50');\n          console.log(parsed);\n        } catch (e) {\n          console.log('%c[Debug] JSON解析失败', 'background: #222; color: #f44336');\n          console.log(e);\n        }\n      } else {\n        console.log('%c[Debug] 未找到gametext标签', 'background: #222; color: #f44336');\n      }\n\n      return '调试信息已输出到控制台';\n    };\n  }\n}\n","/**\n * 游戏控制器\n * 负责协调各个服务和组件，管理游戏的整体流程\n */\nimport { BackgroundManager } from './scripts/components/backgroundManager';\nimport { CharacterManager } from './scripts/components/characterManager';\nimport { ChoiceManager } from './scripts/components/choiceManager';\nimport { DialogueManager } from './scripts/components/dialogueManager';\nimport { JournalManager } from './scripts/components/journalManager';\nimport { MemoryManager } from './scripts/components/memoryManager';\nimport { MemoryUIManager } from './scripts/components/memoryUIManager';\nimport { SaveManager } from './scripts/components/saveManager';\nimport { SettingsManager } from './scripts/components/settingsManager';\nimport { UIManager } from './scripts/components/uiManager';\nimport { GameData } from './scripts/models/gameData';\nimport { CharacterResourceService } from './services/character-resource.service';\nimport { GameDataService } from './services/game-data.service';\nimport { GameStateGenerationService } from './services/game-state-generation.service';\n\nexport class GameController {\n  // 游戏状态数据\n  private gameData: GameData | null = null;\n\n  // 服务\n  private gameDataService: GameDataService;\n  private gameStateGenerationService: GameStateGenerationService;\n  private characterResourceService: CharacterResourceService;\n\n  // 组件管理器\n  private dialogueManager: DialogueManager;\n  private characterManager: CharacterManager;\n  private backgroundManager: BackgroundManager;\n  private choiceManager: ChoiceManager;\n  private memoryManager: MemoryManager;\n  private memoryUIManager: MemoryUIManager;\n  private uiManager: UIManager;\n  private saveManager: SaveManager;\n  private journalManager: JournalManager;\n  private settingsManager: SettingsManager;\n\n  constructor() {\n    // 初始化服务\n    this.gameDataService = new GameDataService();\n    this.gameStateGenerationService = new GameStateGenerationService();\n    this.characterResourceService = new CharacterResourceService();\n\n    // 初始化各个管理器\n    this.uiManager = new UIManager();\n    this.saveManager = new SaveManager(this.uiManager);\n    this.backgroundManager = new BackgroundManager();\n    this.characterManager = new CharacterManager(this.characterResourceService);\n    this.dialogueManager = new DialogueManager(\n      this.characterResourceService,\n      this.characterManager,\n      this.backgroundManager,\n    );\n    this.choiceManager = new ChoiceManager();\n    this.memoryManager = new MemoryManager();\n\n    // 初始化新分离的管理器\n    this.journalManager = new JournalManager();\n    this.memoryUIManager = new MemoryUIManager(\n      this.memoryManager,\n      this.saveManager,\n      this.uiManager,\n      this.gameStateGenerationService,\n    );\n\n    // 初始化设置管理器\n    this.settingsManager = new SettingsManager();\n\n    // 初始化调试辅助功能\n    this.gameStateGenerationService.initDebugHelpers();\n    console.log('调试辅助功能已初始化，请在控制台使用 window.debugLLMResponse() 查看最近一次LLM响应');\n\n    // 初始化游戏\n    this.init();\n  }\n\n  /**\n   * 初始化游戏\n   */\n  private async init() {\n    console.log('初始化游戏界面...');\n\n    // 注册事件监听器\n    this.registerEventListeners();\n\n    // 尝试获取游戏数据\n    await this.loadGameData();\n\n    // 更新UI\n    this.updateUI();\n\n    // 添加调试功能\n    this.initDebugFunctions();\n\n    console.log('游戏界面初始化完成!');\n  }\n\n  /**\n   * 初始化调试功能\n   */\n  private initDebugFunctions() {\n    // 添加调试确认对话框的全局函数\n    (window as any).testConfirmDialog = () => {\n      console.log('测试确认对话框');\n\n      // 创建一个计数变量\n      if (!(window as any).confirmTestCount) {\n        (window as any).confirmTestCount = 0;\n      }\n\n      // 增加计数\n      (window as any).confirmTestCount++;\n\n      // 显示带计数的确认对话框\n      this.uiManager.showConfirmDialog(\n        `这是一个测试确认对话框 #${\n          (window as any).confirmTestCount\n        }，用于检查位置和点击功能。请点击\"确认\"按钮测试是否可点击。`,\n        () => {\n          console.log('确认对话框被确认');\n          this.uiManager.showNotification(`确认对话框 #${(window as any).confirmTestCount} 测试成功!`, 'success');\n        },\n      );\n    };\n\n    console.log('调试功能已初始化，可在控制台使用 window.testConfirmDialog() 测试确认对话框');\n  }\n\n  /**\n   * 注册事件监听器\n   */\n  private registerEventListeners() {\n    // 标签切换按钮\n    $('.tab-button').on('click', e => {\n      const tabId = $(e.currentTarget).data('tab');\n      if (tabId) {\n        this.switchTab(tabId);\n      }\n    });\n\n    // 日记标签内的导航按钮\n    $('.journal-nav-item').on('click', e => {\n      const sectionId = $(e.currentTarget).data('section');\n      if (sectionId) {\n        this.journalManager.switchJournalSection(sectionId);\n      }\n    });\n\n    // 保存游戏按钮 - 使用右上角的按钮\n    $('#save-game').on('click', () => {\n      this.saveGame();\n    });\n\n    // 加载游戏按钮 - 使用右上角的按钮\n    $('#load-game').on('click', () => {\n      this.loadGame();\n    });\n\n    // 设置按钮\n    $('#settings-button').on('click', () => {\n      this.showSettings();\n    });\n\n    // 保存记忆按钮\n    $('#save-memory').on('click', () => {\n      const newMemory = this.memoryUIManager.saveMemory();\n      if (newMemory && this.gameData) {\n        // 更新游戏数据\n        this.gameData.storySummary.push(newMemory);\n      }\n    });\n\n    // 穿越记忆按钮\n    $('#travel-memory').on('click', () => {\n      this.memoryUIManager.travelToMemory(() => {\n        // 成功穿越后的回调\n        this.gameData = this.memoryUIManager.getGameData();\n        this.updateUI();\n        this.switchTab('story-tab');\n      });\n    });\n\n    // 历史记录按钮\n    $('#dialogue-history').on('click', () => {\n      this.showDialogueHistory();\n    });\n\n    // 选择按钮\n    $(document).on('click', '.choice-button', e => {\n      const choice = $(e.currentTarget).data('choice');\n      this.makeChoice(choice);\n    });\n\n    // 获取游戏数据事件\n    window.addEventListener('request_game_data', event => {\n      if (event.detail && typeof event.detail.callback === 'function') {\n        // 确保返回的游戏数据包含所有必要属性\n        const currentGameData: GameData = {\n          story: this.gameData?.story || {\n            date: '未知日期',\n            location: '未知位置',\n            scene: '未知场景',\n            dialogue: [],\n            options: [],\n            currentDialogueIndex: 0,\n            currentChapter: '第1章',\n            currentFunds: 0,\n          },\n          storySummary: this.gameData?.storySummary || [],\n        };\n\n        // 返回当前游戏数据的副本\n        event.detail.callback(currentGameData);\n      }\n    });\n\n    // 游戏加载完成事件\n    window.addEventListener('gameloaded', event => {\n      if (event.detail && event.detail.gameData) {\n        // 更新游戏数据\n        this.gameData = event.detail.gameData;\n\n        // 重新渲染游戏状态\n        this.updateUI();\n        this.switchTab('story-tab');\n\n        // 显示成功加载的通知\n        this.uiManager.showNotification('游戏已加载', 'success');\n      }\n    });\n\n    // 对话框点击事件 - 点击对话框进入下一步或重新显示选项\n    $('#dialogue-container').on('click', e => {\n      // 防止点击对话控制按钮时触发下一步\n      if (!$(e.target).closest('.dialogue-controls').length) {\n        // 检查是否可以重新显示选项\n        if (this.choiceManager.canReshowChoices()) {\n          this.choiceManager.reshowChoices();\n        } else {\n          this.nextDialogue();\n        }\n      }\n    });\n\n    // 选项选择回调\n    this.choiceManager.setOnChoiceSelected(choice => {\n      this.makeChoice(choice);\n    });\n  }\n\n  /**\n   * 加载游戏数据\n   */\n  private async loadGameData() {\n    try {\n      this.gameData = await this.gameDataService.loadGameData();\n\n      // 更新各管理器的游戏数据\n      this.journalManager.setGameData(this.gameData);\n      this.memoryUIManager.setGameData(this.gameData);\n    } catch (error) {\n      console.error('加载游戏数据失败:', error);\n    }\n  }\n\n  /**\n   * 切换标签页\n   */\n  private switchTab(tabId: string) {\n    // 移除所有标签按钮的激活状态\n    $('.tab-button').removeClass('active');\n\n    // 移除所有标签内容的激活状态\n    $('.tab-pane').removeClass('active');\n\n    // 激活选中的标签按钮和内容\n    $(`[data-tab=\"${tabId}\"]`).addClass('active');\n    $(`#${tabId}`).addClass('active');\n\n    // 如果是记忆标签，刷新记忆时间轴\n    if (tabId === 'memory-tab') {\n      this.memoryUIManager.refreshMemoryTimeline();\n    }\n\n    // 如果是日记标签，刷新角色信息\n    if (tabId === 'journal-tab') {\n      this.journalManager.refreshJournalContent();\n    }\n  }\n\n  /**\n   * 显示对话历史记录\n   */\n  private async showDialogueHistory() {\n    // 尝试从世界书获取对话历史\n    const dialogueHistory = await this.saveManager.getDialogueHistory();\n    if (dialogueHistory) {\n      this.dialogueManager.showDialogueHistory(dialogueHistory);\n    }\n  }\n\n  /**\n   * 显示设置\n   */\n  private showSettings() {\n    console.log('显示设置');\n    this.settingsManager.showSettingsDialog();\n  }\n\n  /**\n   * 保存游戏\n   */\n  private saveGame() {\n    console.log('保存游戏...');\n    // 显示确认对话框\n    this.uiManager.showInputDialog('请输入典籍标题', '当前进度记录', async saveName => {\n      try {\n        this.uiManager.showLoading('正在记录典籍...');\n        // 调用存档管理器保存游戏\n        const success = await this.saveManager.saveGameState(this.gameData!, true, saveName);\n        if (success) {\n          this.uiManager.showNotification('典籍记录成功', 'success');\n        }\n      } catch (error) {\n        console.error('保存游戏失败:', error);\n        this.uiManager.showNotification('典籍记录失败', 'error');\n      } finally {\n        this.uiManager.hideLoading();\n      }\n    });\n  }\n\n  /**\n   * 加载游戏\n   */\n  private loadGame() {\n    console.log('加载游戏...');\n    // 显示存档列表\n    this.saveManager.loadGame();\n  }\n\n  /**\n   * 更新UI\n   */\n  private updateUI() {\n    if (!this.gameData) {\n      console.error('无法更新UI：游戏数据不存在');\n      return;\n    }\n\n    try {\n      // 更新顶部日期\n      $('#game-date').text(this.gameData.story.date);\n\n      // 设置对话\n      this.dialogueManager.setDialogues(this.gameData.story.dialogue);\n      this.dialogueManager.renderDialogue(this.gameData.story.currentDialogueIndex);\n\n      // 设置背景\n      this.backgroundManager.setBackground(this.gameData.story.location, this.gameData.story.scene);\n\n      // 设置选项\n      this.choiceManager.setChoices(this.gameData.story.options);\n\n      // 更新内存UI（如果记忆标签是活跃的）\n      if ($('#memory-tab').hasClass('active')) {\n        this.memoryUIManager.refreshMemoryTimeline();\n      }\n\n      // 更新日记（如果日记标签是活跃的）\n      if ($('#journal-tab').hasClass('active')) {\n        this.journalManager.refreshJournalContent();\n      }\n\n      console.log('UI已更新');\n    } catch (error) {\n      console.error('更新UI时发生错误:', error);\n    }\n  }\n\n  /**\n   * 显示下一条对话\n   */\n  private nextDialogue() {\n    if (!this.gameData) return;\n\n    // 尝试显示下一条对话\n    const hasMoreDialogue = this.dialogueManager.showNextDialogue();\n\n    if (hasMoreDialogue) {\n      // 更新游戏数据中的当前对话索引\n      this.gameData.story.currentDialogueIndex = this.dialogueManager.getCurrentDialogueIndex();\n    } else if (this.gameData.story.options.length > 0) {\n      // 新增：检查是否是最后一条对话，且已经显示了选项\n      const isDialogueFinished = this.dialogueManager.isDialogueFinished();\n      const isChoicesAlreadyShown = this.choiceManager.areChoicesVisible();\n\n      // 只有在对话已结束且选项还没显示的情况下才显示选项\n      if (isDialogueFinished && !isChoicesAlreadyShown) {\n        console.log('对话已结束，显示选项');\n        this.choiceManager.showChoices();\n      } else if (isChoicesAlreadyShown) {\n        console.log('选项已显示，不再重复显示');\n      }\n    } else {\n      // 没有更多对话也没有选项，可以添加额外逻辑\n      console.log('对话结束，且没有可用选项');\n    }\n  }\n\n  /**\n   * 选择选项\n   */\n  private async makeChoice(choice: string) {\n    if (!this.gameData) return;\n\n    console.log(`玩家选择了: ${choice}`);\n\n    // 判断是否为自定义行动（不在预定义选项列表中）\n    const isCustomAction = !this.gameData.story.options.includes(choice);\n\n    // 隐藏选项\n    this.choiceManager.hideChoices();\n\n    // 显示加载提示\n    this.uiManager.showLoading('正在生成回应...');\n\n    // 保存玩家选择前的状态，以便出错时恢复\n    const previousDialogueLength = this.gameData.story.dialogue.length;\n    const previousDialogueIndex = this.gameData.story.currentDialogueIndex;\n\n    // 添加玩家选择到对话\n    const playerChoice = {\n      speaker: '玩家',\n      content: choice,\n      style: 'normal' as const,\n      // 不设置portrait，使用默认规则\n    };\n\n    this.gameData.story.dialogue.push(playerChoice);\n    this.dialogueManager.setDialogues(this.gameData.story.dialogue);\n    this.gameData.story.currentDialogueIndex = this.gameData.story.dialogue.length - 1;\n    this.dialogueManager.showDialogue(this.gameData.story.currentDialogueIndex);\n\n    try {\n      // 根据是否是自定义行动调用不同的处理方法\n      const newGameState = isCustomAction\n        ? await this.gameStateGenerationService.handleCustomAction(choice)\n        : await this.gameStateGenerationService.generateNextGameState(choice);\n\n      if (newGameState) {\n        // 更新游戏状态\n        this.gameData = newGameState;\n\n        // 更新UI\n        this.updateUI();\n\n        // 保存到世界书\n        await this.saveManager.saveGameState(this.gameData);\n      } else {\n        // 生成失败，恢复到玩家选择前的状态\n        if (this.gameData) {\n          // 移除玩家选择\n          this.gameData.story.dialogue = this.gameData.story.dialogue.slice(0, previousDialogueLength);\n          this.gameData.story.currentDialogueIndex = previousDialogueIndex;\n\n          // 更新对话显示\n          this.dialogueManager.setDialogues(this.gameData.story.dialogue);\n          this.dialogueManager.showDialogue(this.gameData.story.currentDialogueIndex);\n\n          // 重新显示选项\n          this.choiceManager.showChoices();\n\n          this.uiManager.showNotification('生成游戏状态失败，请重新选择', 'warning');\n        }\n      }\n    } catch (error) {\n      console.error('处理玩家选择时出错:', error);\n\n      // 出错时恢复到玩家选择前的状态\n      if (this.gameData) {\n        // 移除玩家选择\n        this.gameData.story.dialogue = this.gameData.story.dialogue.slice(0, previousDialogueLength);\n        this.gameData.story.currentDialogueIndex = previousDialogueIndex;\n\n        // 更新对话显示\n        this.dialogueManager.setDialogues(this.gameData.story.dialogue);\n        this.dialogueManager.showDialogue(this.gameData.story.currentDialogueIndex);\n\n        // 重新显示选项\n        this.choiceManager.showChoices();\n\n        this.uiManager.showNotification('生成响应时出错，请重新选择', 'error');\n      }\n    } finally {\n      // 隐藏加载提示\n      this.uiManager.hideLoading();\n    }\n  }\n}\n","/**\n * 修道院箱庭游戏界面 - 主脚本\n */\nimport { GameController } from './game.controller';\nimport { GameData } from './scripts/models/gameData';\nimport './styles/main.scss';\n\n// 声明全局变量\ndeclare global {\n  interface Window {\n    getChatMessages: (messageId: number) => string[];\n    getCurrentMessageId: () => number;\n    generate: (config: any) => Promise<string>;\n    generateRaw: (config: any) => Promise<string>;\n    // 世界书操作API\n    getLorebookEntries: (lorebook: string) => Promise<any[]>;\n    createLorebookEntry: (lorebook: string, fieldValues: any) => Promise<number>;\n    deleteLorebookEntry: (lorebook: string, lorebookUid: number) => Promise<boolean>;\n    editLorebookEntry: (lorebook: string, lorebookUid: number, fieldValues: any) => Promise<boolean>;\n    triggerSlash: (command: string) => Promise<string>;\n    // 聊天世界书API\n    getOrCreateChatLorebook: () => Promise<string>;\n    // 事件系统 - 设为可选属性，避免未定义错误\n    eventOnce?: <T extends string>(event_type: T, listener: (...args: any[]) => any) => void;\n    iframe_events?: {\n      GENERATION_STARTED?: string;\n      GENERATION_ENDED?: string;\n      STREAM_TOKEN_RECEIVED_FULLY?: string;\n      STREAM_TOKEN_RECEIVED_INCREMENTALLY?: string;\n      MESSAGE_IFRAME_RENDER_STARTED?: string;\n      MESSAGE_IFRAME_RENDER_ENDED?: string;\n    };\n  }\n\n  // 自定义事件类型\n  interface WindowEventMap {\n    request_game_data: CustomEvent<{ callback: (gameData: GameData) => void }>;\n    gameloaded: CustomEvent<{ gameData: GameData }>;\n  }\n}\n\n// 等待DOM加载完成后初始化游戏\n$(document).ready(() => {\n  new GameController();\n});\n\n"],"names":["BackgroundManager","backgroundMap","constructor","this","initBackgroundMap","console","log","setBackground","location","scene","backgroundKey","backgroundUrl","_","isEmpty","values","$","css","warn","backgroundImage","backgroundColor","addBackground","key","url","applyBackgroundEffect","effect","removeClass","$bg","addClass","hide","fadeIn","slideDown","show","setTimeout","getAllBackgroundKeys","keys","CharacterManager","characterResourceService","currentCharacters","setCharacter","characterId","emotion","position","$element","length","error","character","getCharacter","hideCharacter","imageUrl","getCharacterEmotionUrl","setCharacterImage","defaultImageUrl","opacity","data","id","characterName","name","updateEmotion","left","right","setCharacterEffect","times","distance","not","animate","fadeOut","swapCharacters","$leftChar","$rightChar","leftChar","rightChar","add","updateCharactersByDialogue","speakerId","ChoiceManager","choices","choicesShown","choicesHidden","onChoiceSelectedCallback","on","customChoice","val","trim","selectChoice","e","document","stopPropagation","hideChoices","setChoices","renderChoices","$presetChoices","empty","forEach","choice","index","class","text","click","appendTo","$choicesContainer","showChoices","focus","self","canReshowChoices","reshowChoices","setOnChoiceSelected","callback","addChoice","includes","push","hasClass","removeChoice","pull","clearChoices","getAllChoices","clone","areChoicesVisible","DialogueManager","dialogues","currentDialogueIndex","characterManager","backgroundManager","isAutoPlaying","autoPlayInterval","autoPlaySpeed","toggleAutoPlay","setDialogues","showDialogue","dialogue","speakerName","speaker","$dialogueText","style","content","append","scrollTop","scrollHeight","updateCharacterDisplay","updateBackground","portrait","characterResource","background","showNextDialogue","showPreviousDialogue","renderDialogue","addDialogue","clearDialogues","$autoPlayButton","window","setInterval","stopAutoPlay","html","clearInterval","setAutoPlaySpeed","speed","getCurrentDialogue","getAllDialogues","cloneDeep","showDialogueHistory","externalDialogues","currentIndex","$dialogueContent","dialoguesToShow","$dialogueItem","$speakerName","$returnButton","getCurrentDialogueIndex","isDialogueFinished","JournalManager","gameData","setGameData","switchJournalSection","sectionId","showPlaceholder","refreshJournalContent","$container","title","padding","textAlign","marginBottom","color","fontStyle","selectCharacter","MemoryManager","memories","selectedMemoryId","hasCreatedMemory","alreadySavedKey","isTabSwitching","onMemorySelectedCallback","onMemorySavedCallback","onMemoryTravelCallback","travelToSelectedMemory","checkIfAlreadySaved","target","attr","renderMemories","sessionStorage","getItem","updateSaveButtonState","prop","setMemories","uniqueMemories","memory","Object","$timeline","sortedMemories","sortBy","formatTimestamp","timestamp","selectMemory","date","Date","isNaN","getTime","getMonth","getDate","getHours","getMinutes","toString","padStart","memoryId","find","$content","image","addMemory","showOneTimeOnlyMessage","memoryIds","map","newId","max","newMemory","toLocaleString","setItem","$notification","remove","deleteMemory","findIndex","splice","setEmptyMemoryContent","getSelectedMemory","getAllMemories","message","setOnMemorySelected","setOnMemorySaved","setOnMemoryTravel","clearMemories","removeItem","initializeDisplay","MemoryUIManager","memoryManager","saveManager","uiManager","gameStateGenerationService","refreshMemoryTimeline","storySummary","saveMemory","story","currentChapter","showNotification","travelToMemory","onSuccess","selectedMemory","showConfirmDialog","async","showLoading","newState","loadedState","loadGameStateByID","generatedState","generateMemoryState","Error","hideLoading","getGameData","SaveManager","worldBookName","modalId","DIALOGUE_HISTORY_KEY","COMPLETE_HISTORY_KEY","SAVE_TYPE","AUTO","MANUAL","currentMaxSaveId","auto","manual","cachedCompleteHistory","initializeLoadGameModal","initializeChatLorebook","ensureBootstrapLoaded","loadCompleteHistory","fn","modal","getElementById","bootstrapCss","createElement","rel","href","head","appendChild","bootstrapJs","src","onload","body","getLorebooks","createLorebook","lorebooks","setChatLorebook","initializeMaxSaveIds","allEntries","getAllWorldBookEntries","autoSaves","filter","entry","checkEntryKeyStartsWith","Math","idMatch","getEntryKey","match","parseInt","manualSaves","Array","isArray","getLorebookEntries","entries","apiError","triggerSlash","entriesJson","JSON","parse","parseError","slashError","invalidEntries","uid","prefix","some","k","startsWith","findEntryByKey","exactKey","foundEntry","modalHtml","modalStyles","off","tabId","currentTarget","createManualSave","closeLoadGameModal","showInputDialog","saveName","getCurrentGameData","saveGameState","refreshSaveList","Promise","resolve","requestEvent","CustomEvent","detail","dispatchEvent","showLoadGameModal","display","modalError","getAllSaves","$autoSaveList","sortedAutoSaves","sort","a","b","saveId","save","appendSaveItem","$manualSaveList","sortedManualSaves","$list","thumbnailUrl","thumbnail","isAuto","$saveItem","$header","$actions","$loadBtn","$deleteBtn","preventDefault","loadGameFromKey","deleteSave","closest","saveKey","saveTitle","saveEntry","deleteLorebookEntry","autoSaveEntries","manualSaveEntries","all","processSaveEntry","entryKey","matchingKey","savePreview","comment","created_at","now","latestSummary","jsonError","loadGameState","loadEvent","isManual","customName","saveType","nextId","dialogueCount","memoriesCount","substring","saveDialogueHistory","saveData","stringify","MAX_RETRY","TIMEOUT_MS","retry","saveWithTimeout","promise","timeout","reject","race","updateEntry","setLorebookEntries","editLorebookEntry","newUid","createLorebookEntry","updateError","newEntry","success","createLorebookEntries","result","new_uids","createError","historyEntry","newHistory","historyContent","history","saveCompleteHistory","historyTitle","completeHistory","existingDialogueCount","allDialogues","existingMemoryIds","Set","m","has","saveResult","saveLegacyDialogueHistory","dialogueHistoryEntry","logContent","dialogueTitle","updatedContent","getDialogueHistory","d","dialogueEntry","dialogueContent","actualKey","logMatch","dialogueEntries","split","dialogueHistoryItems","type","entryContent","savedState","contentError","retryError","summaryId","getCompleteHistory","loadGame","SettingsManager","defaultSettings","fontSize","uiMode","gameHeight","currentSettings","onSettingsChangedCallback","SETTINGS_STORAGE_KEY","loadSettings","applySettings","savedSettings","localStorage","parsedSettings","hasOwnProperty","useMobileUI","saveSettings","documentElement","classList","gameContainer","querySelector","height","updateSettings","settings","setFontSize","setUIMode","setGameHeight","getSettings","resetSettings","setOnSettingsChanged","showSettingsDialog","dialogHtml","is","gameHeightInput","confirm","UIManager","currentConfirmCallback","toastr","options","closeButton","progressBar","positionClass","preventDuplicates","timeOut","onConfirm","handleConfirmYes","hideConfirmDialog","duration","warning","info","toggleFullscreen","fullscreenElement","exitFullscreen","requestFullscreen","showTooltip","element","tooltip","my","at","defaultValue","value","which","CharacterResourceService","characters","Map","initializeCharacters","set","fullName","emotions","default","smile","sad","shocked","blush","bio","get","getAllCharacterIds","from","getCharacterName","addCharacter","updateCharacter","updates","updatedCharacter","merge","GameDataService","defaultGameData","currentFunds","toISOString","loadGameData","saveGameData","GameStateGenerationService","lastRawResponse","getLastRawResponse","generateNextGameState","generate","generateConfig","user_input","should_stream","injects","role","depth","should_scan","regex","jsonData","systemPrompt","handleCustomAction","action","initDebugHelpers","debugLLMResponse","parsed","GameController","gameDataService","dialogueManager","choiceManager","memoryUIManager","journalManager","settingsManager","init","registerEventListeners","updateUI","initDebugFunctions","testConfirmDialog","confirmTestCount","switchTab","saveGame","showSettings","makeChoice","addEventListener","event","currentGameData","nextDialogue","dialogueHistory","isChoicesAlreadyShown","isCustomAction","previousDialogueLength","previousDialogueIndex","playerChoice","newGameState","slice","ready"],"sourceRoot":""}