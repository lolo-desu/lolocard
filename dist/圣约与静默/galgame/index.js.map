{"version":3,"file":"index.js","mappings":"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","sources":["webpack://tavern_helper_template/src/圣约与静默/galgame/index.js?d6b9"],"sourcesContent":["import './index.scss';\n\n/**\n * 对话界面核心功能\n * 提供简单的对话显示和点击/空格下一步功能\n */\n\nclass GalgameEngine {\n  constructor() {\n    this.currentIndex = 0;\n    this.isAnimating = false;\n    this.activeCharacters = {}; // 存储当前活动的角色\n    this.isTransitioning = false; // 防止动画重叠\n    this.currentBgPath = ''; // 当前显示的背景路径\n    this.dialogHistory = []; // 存储对话历史\n\n    // 获取DOM元素\n    this.dialogBox = document.getElementById('dialog-box');\n    this.characterName = document.getElementById('character-name');\n    this.dialogText = document.getElementById('dialog-text');\n    this.currentImage = document.getElementById('background-image-current');\n    this.nextImage = document.getElementById('background-image-next');\n    this.characterContainer = document.getElementById('character-container');\n    this.historyPanel = document.getElementById('history-panel');\n    this.historyContent = document.getElementById('history-content');\n\n    // ===== 第一处可自定义：CG图片链接 =====\n    // 在这里添加您的CG图片URL数组\n    // 可以添加任意数量的图片链接\n    // 注意: URL需要是可以直接访问的图片地址，你可以使用如catbox来进行将图片转为链接。推荐分辨率1920x1080\n    const cgUrls = [\n      // 示例格式：\n      // 'https://example.com/image1.jpg',\n      // 'https://example.com/image2.jpg',\n      // 'https://example.com/image3.jpg',\n      'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%95%86%E5%BA%97%E8%A1%97/%E9%BB%84%E6%98%8F.jpg',\n      'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%95%86%E5%BA%97%E8%A1%97/%E5%A4%9C%E6%99%9A%E5%BC%80%E7%81%AF.jpg',\n    ];\n\n    // ===== 可自定义背景图片基础 URL =====\n    this.imageBaseUrl = 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/背景/';\n\n    // ===== 可自定义角色立绘链接 =====\n    this.characterSpritesBaseUrl = 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/';\n\n    // ===== 新增可自定义：角色立绘链接 =====\n    // 角色立绘图片URL对象\n    // 键名作为角色的标识符，值是包含不同服装的对象，每种服装包含不同表情的立绘URL\n    const characterSprites = {\n      络络: {\n        水手服: {\n          '微笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/微笑.png',\n          '浅笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/浅笑.png',\n          '生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/生气.png',\n          '惊讶.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/惊讶.png',\n          '害羞.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/害羞.png',\n          '稍微脸红.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/稍微脸红.png',\n          '手托下巴思考.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/手托下巴思考.png',\n          '看透一切的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/看透一切的坏笑.png',\n          '邪恶的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/邪恶的坏笑.png',\n          '星星眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/星星眼.png',\n          '晕晕眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/晕晕眼.png',\n          '猫爪生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/猫爪生气.png',\n          '流口水.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/流口水.png',\n          '哭泣.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/哭泣.png',\n          '擦眼泪.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/擦眼泪.png',\n          '等待吻.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/等待吻.png',\n          '性高潮.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/性高潮.png',\n          '眼神空洞的催眠状态.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/眼神空洞的催眠状态.png',\n          '无表情.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/无表情.png',\n          '无人.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/无人.png',\n        },\n        格纹衫: {\n          '微笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/微笑.png',\n          '浅笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/浅笑.png',\n          '生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/生气.png',\n          '惊讶.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/惊讶.png',\n          '害羞.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/害羞.png',\n          '稍微脸红.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/稍微脸红.png',\n          '手托下巴思考.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/手托下巴思考.png',\n          '看透一切的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/看透一切的坏笑.png',\n          '邪恶的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/邪恶的坏笑.png',\n          '星星眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/星星眼.png',\n          '晕晕眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/晕晕眼.png',\n          '猫爪生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/猫爪生气.png',\n          '流口水.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/流口水.png',\n          '哭泣.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/哭泣.png',\n          '擦眼泪.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/擦眼泪.png',\n          '等待吻.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/等待吻.png',\n          '性高潮.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/性高潮.png',\n          '眼神空洞的催眠状态.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/眼神空洞的催眠状态.png',\n          '无人.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/格纹衫/无人.png',\n        },\n        开衫: {\n          '微笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/微笑.png',\n          '浅笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/浅笑.png',\n          '生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/生气.png',\n          '惊讶.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/惊讶.png',\n          '害羞.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/害羞.png',\n          '稍微脸红.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/稍微脸红.png',\n          '手托下巴思考.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/手托下巴思考.png',\n          '看透一切的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/看透一切的坏笑.png',\n          '邪恶的笑容.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/邪恶的笑容.png',\n          '星星眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/星星眼.png',\n          '晕晕眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/晕晕眼.png',\n          '猫爪生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/猫爪生气.png',\n          '流口水.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/流口水.png',\n          '哭泣.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/哭泣.png',\n          '擦眼泪.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/擦眼泪.png',\n          '等待吻.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/等待吻.png',\n          '性高潮.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/性高潮.png',\n          '无表情.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/无表情.png',\n          '无人.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/开衫/无人.png',\n        },\n        睡衣: {\n          '微笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/微笑.png',\n          '浅笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/浅笑.png',\n          '生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/生气.png',\n          '惊讶.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/惊讶.png',\n          '害羞.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/害羞.png',\n          '稍微脸红.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/稍微脸红.png',\n          '看透一切的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/看透一切的坏笑.png',\n          '邪恶的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/邪恶的坏笑.png',\n          '星星眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/星星眼.png',\n          '晕晕眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/晕晕眼.png',\n          '猫爪生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/猫爪生气.png',\n          '流口水.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/流口水.png',\n          '哭泣.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/哭泣.png',\n          '等待吻.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/等待吻.png',\n          '性高潮.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/性高潮.png',\n          '眼神空洞的催眠状态.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/眼神空洞的催眠状态.png',\n          '无人.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/睡衣/无人.png',\n        },\n        全裸: {\n          '浅笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸浅笑.png',\n          '生气.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸生气.png',\n          '惊讶.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸惊讶.png',\n          '害羞.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸害羞.png',\n          '稍微脸红.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸微微害羞.png',\n          '看透一切的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸得意脸smug.png',\n          '邪恶的坏笑.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸邪恶的笑容.png',\n          '坏笑.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸坏笑.png',\n          '星星眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸闪耀眼.png',\n          '晕晕眼.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸晕眼@_@.png',\n          '流口水.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸看到食物馋到流口水.png',\n          '哭泣.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸哭泣.png',\n          '等待吻.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸等待接吻.png',\n          '性高潮.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸色情高潮啊嘿颜.png',\n          '眼神空洞的催眠状态.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/全裸被催眠双眼无神留口水.png',\n          '无人.png': 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/全裸/无人.png',\n        },\n      },\n      你: {\n        默认: {\n          '默认.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E7%AD%89%E5%BE%85%E5%90%BB.png',\n          '惊讶.png':\n            'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%A7%92%E8%89%B2/%E6%B0%B4%E6%89%8B%E6%9C%8D/%E5%93%AD%E6%B3%A3.png',\n        },\n      },\n    };\n\n    try {\n      const message = SillyTavern.chat[getCurrentMessageId()].mes;\n      const gameDataString = message.match(/<Galgame>\\s*```(?:json|yaml)?(.*)```\\s*<\\/Galgame>/s)[1]; // 获取数据并去除首尾空格\n\n      if (!gameDataString) {\n        throw new Error('游戏数据 <Galgame> 为空。');\n      }\n\n      let parsedData = null;\n\n      // 尝试解析为 JSON\n      try {\n        parsedData = JSON.parse(gameDataString);\n        console.log('游戏数据加载成功 (JSON 格式)');\n      } catch (jsonError) {\n        console.warn('JSON 解析失败，尝试解析为 YAML:', jsonError.message);\n        // 如果 JSON 解析失败，尝试解析为 YAML\n        try {\n          parsedData = YAML.parse(gameDataString);\n        } catch (yamlError) {\n          console.error('YAML 解析也失败:', yamlError);\n          // 如果两种解析都失败，抛出合并的错误信息\n          throw new Error(\n            `数据解析失败：既不是有效的 JSON 也不是有效的 YAML。JSON 错误: ${jsonError.message} | YAML 错误: ${yamlError.message}`,\n          );\n        }\n      }\n\n      // 检查解析后的数据是否有效（例如，是否为数组且不为空）\n      if (!Array.isArray(parsedData) || parsedData.length === 0) {\n        console.warn('加载的对话数据为空或格式无效 (预期为非空数组)，将加载默认提示信息。');\n        this.dialogData = [{ name: '系统提示', text: '加载的对话数据为空或格式无效。', characters: 'narrator' }];\n      } else {\n        this.dialogData = parsedData;\n        console.log('最终使用的游戏数据:', this.dialogData);\n      }\n    } catch (error) {\n      // 捕获所有加载/解析过程中的错误\n      console.error('加载或解析游戏数据时出错:', error);\n      this.dialogData = [{ name: '系统提示', text: `加载对话数据失败：${error.message}`, characters: 'narrator' }];\n    }\n    // ===== 数据加载结束 =====\n\n    // 设置角色立绘\n    this.characterSprites = characterSprites;\n\n    // 初始化事件监听\n    this.initEventListeners();\n\n    // 显示第一条对话前，确保背景和界面已正确设置\n    this.initializeBackground();\n\n    // 显示第一条对话\n    this.showDialog(0);\n  }\n\n  // 初始化背景图片\n  initializeBackground() {\n    if (this.dialogData && this.dialogData.length > 0 && this.dialogData[0].background) {\n      // 设置初始背景\n      const initialBgPath = this.dialogData[0].background;\n      const initialBgUrl = this.getFullImageUrl(initialBgPath);\n\n      console.log('初始化背景图片:', initialBgUrl);\n\n      // 先检查元素是否存在\n      if (!this.currentImage) {\n        console.error('背景图片元素不存在!');\n        return;\n      }\n\n      // 记录当前显示的背景，方便后续比较\n      this.currentBgPath = initialBgPath;\n\n      // 直接设置当前背景图片\n      this.currentImage.src = initialBgUrl;\n      this.currentImage.style.opacity = '1';\n\n      this.currentImage.onerror = () => {\n        console.error('背景图片加载失败:', initialBgUrl);\n        // 尝试使用预设的CG URL\n        this.currentImage.src =\n          'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%95%86%E5%BA%97%E8%A1%97/%E9%BB%84%E6%98%8F.jpg';\n      };\n\n      // 检查图片是否已经加载完成\n      if (this.currentImage.complete) {\n        console.log('背景图片已加载完成');\n      } else {\n        this.currentImage.onload = () => {\n          console.log('背景图片加载完成');\n        };\n      }\n    }\n  }\n\n  // 获取完整的图片URL，处理URL编码问题\n  getFullImageUrl(relativePath) {\n    if (!relativePath) return '';\n\n    // 使用预定义的硬编码URL\n    if (relativePath === '商店街/黄昏.jpg') {\n      return 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%95%86%E5%BA%97%E8%A1%97/%E9%BB%84%E6%98%8F.jpg';\n    } else if (relativePath === '商店街/夜晚开灯.jpg') {\n      return 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E8%83%8C%E6%99%AF/%E5%95%86%E5%BA%97%E8%A1%97/%E5%A4%9C%E6%99%9A%E5%BC%80%E7%81%AF.jpg';\n    }\n\n    // 如果不是硬编码的图片，则尝试构建URL\n    // 拆分路径以便正确编码每个部分\n    try {\n      const pathParts = relativePath.split('/');\n      const encodedParts = pathParts.map(part => encodeURIComponent(part));\n      const encodedPath = encodedParts.join('/');\n\n      return this.imageBaseUrl + encodedPath;\n    } catch (error) {\n      console.error('URL编码失败:', error, '原始路径:', relativePath);\n      return '';\n    }\n  }\n\n  initEventListeners() {\n    // 点击屏幕任意位置进入下一步\n    document.addEventListener('click', () => {\n      this.nextDialog();\n    });\n\n    // 按空格键进入下一步\n    document.addEventListener('keydown', event => {\n      if (event.code === 'Space') {\n        event.preventDefault();\n        this.nextDialog();\n      }\n    });\n  }\n\n  showDialog(index) {\n    if (index >= this.dialogData.length) {\n      // 对话结束，可以添加结束画面或循环播放\n      console.log('对话结束，重新开始');\n      this.currentIndex = 0;\n      this.showDialog(0);\n      return;\n    }\n\n    // 更新当前对话索引 - 非常重要\n    this.currentIndex = index;\n\n    const dialog = this.dialogData[index];\n    if (!dialog) {\n      console.error('对话数据不存在:', index);\n      return;\n    }\n\n    // 检查是否需要背景转场 - 比较当前背景与目标背景\n    const newBgPath = dialog.background || '';\n    const needBackgroundTransition = newBgPath && this.currentBgPath !== newBgPath;\n\n    console.log(\n      `显示对话 #${index}`,\n      dialog.name,\n      '当前背景:',\n      this.currentBgPath || '(无)',\n      '新背景:',\n      newBgPath || '(无)',\n      '需要转场:',\n      needBackgroundTransition,\n    );\n\n    // 如果需要背景转场，先执行背景转场\n    if (needBackgroundTransition) {\n      console.log('执行背景转场 - 从', this.currentBgPath || '(无)', '到', newBgPath);\n\n      // 修复：检查是否切换到CG（没有角色的情况），如果是，先隐藏所有当前角色\n      if (dialog.characters === 'narrator' || dialog.characters === 'protagonist' || !dialog.characters) {\n        // 先移除所有当前角色，再进行背景转场\n        for (const characterId in this.activeCharacters) {\n          this.hideCharacter(characterId);\n        }\n        // 清空活动角色记录\n        this.activeCharacters = {};\n      }\n\n      // 更新当前背景记录\n      this.currentBgPath = newBgPath;\n\n      this.fadeOutIn(() => {\n        return newBgPath;\n      }, dialog); // 传递当前对话以便在转场完成后更新\n    } else {\n      // 否则直接更新角色和对话\n      this.updateDialogContent(dialog);\n    }\n  }\n\n  // 更新对话内容\n  updateDialogContent(dialog) {\n    if (!dialog) {\n      console.error('更新对话内容失败: 对话数据为空');\n      return;\n    }\n\n    console.log('更新对话内容:', dialog.name, dialog.text);\n\n    // 更新角色立绘\n    this.updateCharacters(dialog);\n\n    // 应用打字机效果\n    this.characterName.textContent = dialog.name;\n    this.applyTypingEffect(dialog.text);\n\n    // 添加到对话历史\n    this.addToHistory(dialog);\n  }\n\n  applyTypingEffect(text) {\n    this.isAnimating = true;\n    this.dialogText.textContent = '';\n    document.getElementById('next-hint').style.opacity = '0'; // 隐藏提示\n\n    // 计算打字速度 - 根据文本长度动态调整\n    const baseSpeed = 30;\n    const speedModifier = Math.max(0.5, Math.min(1.5, 300 / text.length));\n    const speed = Math.floor(baseSpeed * speedModifier);\n\n    let i = 0;\n    // --- 修改点：移除了 lastPunctuation 变量 ---\n    // let lastPunctuation = 0; // 上一个标点符号的位置\n    // --- 修改结束 ---\n\n    const typeWriter = () => {\n      if (i < text.length && this.isAnimating) {\n        const char = text.charAt(i);\n        this.dialogText.textContent += char;\n        i++;\n\n        // --- 修改点：移除了标点符号的特殊停顿判断 ---\n        // 不再检查是否为标点符号，统一使用计算出的 speed\n        setTimeout(typeWriter, speed);\n        // --- 修改结束 ---\n\n        // --- 移除的代码块 ---\n        // const isPunctuation = /[，。？！、：；]/.test(char);\n        // if (isPunctuation) {\n        //   lastPunctuation = i;\n        //   setTimeout(typeWriter, speed * 5); // 标点符号后停顿更长时间\n        // } else if (i - lastPunctuation <= 2) {\n        //   // 标点符号后的前两个字符也稍微慢一点\n        //   setTimeout(typeWriter, speed * 1.5);\n        // } else {\n        //   setTimeout(typeWriter, speed);\n        // }\n        // --- 移除结束 ---\n      } else {\n        this.isAnimating = false;\n        document.getElementById('next-hint').style.opacity = '1'; // 显示提示\n      }\n    };\n\n    // 开始打字效果\n    typeWriter();\n  }\n\n  // 更新角色立绘显示\n  updateCharacters(dialog) {\n    // 转场中不更新角色显示，避免冲突\n    if (this.isTransitioning) {\n      console.log('正在转场中，延迟更新角色显示');\n      return;\n    }\n\n    // 记录新的角色显示状态\n    const newActiveCharacters = {};\n\n    // 处理特殊视角模式\n    document.body.classList.remove('narrator-mode', 'protagonist-mode');\n\n    // 处理角色立绘配置\n    if (dialog.characters) {\n      // 旁白模式\n      if (dialog.characters === 'narrator') {\n        document.body.classList.add('narrator-mode');\n        // 旁白模式下清空所有角色\n        for (const characterId in this.activeCharacters) {\n          this.hideCharacter(characterId);\n        }\n        this.activeCharacters = {};\n        return;\n      }\n      // 主角视角模式\n      else if (dialog.characters === 'protagonist') {\n        document.body.classList.add('protagonist-mode');\n        // 主角视角下清空所有角色\n        for (const characterId in this.activeCharacters) {\n          this.hideCharacter(characterId);\n        }\n        this.activeCharacters = {};\n        return;\n      }\n      // 单个居中角色（新格式）\n      else if (\n        typeof dialog.characters === 'object' &&\n        dialog.characters.id &&\n        !dialog.characters.left &&\n        !dialog.characters.right\n      ) {\n        const characterId = dialog.characters.id;\n        const expression = dialog.characters.expression || '默认.png';\n        const costume = dialog.characters.costume || '水手服'; // 默认使用水手服\n\n        newActiveCharacters[characterId] = {\n          position: 'center',\n          expression: expression,\n          costume: costume, // 记录服装信息\n        };\n\n        this.showCharacter(characterId, 'center', dialog.name === characterId, expression, costume);\n      }\n      // 左右两个角色（新格式）\n      else if (typeof dialog.characters === 'object') {\n        // 如果只有一个角色，则居中显示\n        const hasLeftChar = !!dialog.characters.left;\n        const hasRightChar = !!dialog.characters.right;\n\n        if (hasLeftChar && !hasRightChar) {\n          // 只有左边角色，居中显示\n          const characterId = dialog.characters.left.id;\n          const expression = dialog.characters.left.expression || '默认.png';\n          const costume = dialog.characters.left.costume || '水手服'; // 默认使用水手服\n\n          newActiveCharacters[characterId] = {\n            position: 'center',\n            expression: expression,\n            costume: costume,\n          };\n\n          this.showCharacter(characterId, 'center', dialog.name === characterId, expression, costume);\n        } else if (!hasLeftChar && hasRightChar) {\n          // 只有右边角色，居中显示\n          const characterId = dialog.characters.right.id;\n          const expression = dialog.characters.right.expression || '默认.png';\n          const costume = dialog.characters.right.costume || '水手服'; // 默认使用水手服\n\n          newActiveCharacters[characterId] = {\n            position: 'center',\n            expression: expression,\n            costume: costume,\n          };\n\n          this.showCharacter(characterId, 'center', dialog.name === characterId, expression, costume);\n        } else {\n          // 两个角色都有，左右显示\n          if (dialog.characters.left && dialog.characters.left.id) {\n            const characterId = dialog.characters.left.id;\n            const expression = dialog.characters.left.expression || '默认.png';\n            const costume = dialog.characters.left.costume || '水手服'; // 默认使用水手服\n\n            newActiveCharacters[characterId] = {\n              position: 'left',\n              expression: expression,\n              costume: costume,\n            };\n\n            this.showCharacter(characterId, 'left', dialog.name === characterId, expression, costume);\n          }\n\n          if (dialog.characters.right && dialog.characters.right.id) {\n            const characterId = dialog.characters.right.id;\n            const expression = dialog.characters.right.expression || '默认.png';\n            const costume = dialog.characters.right.costume || '水手服'; // 默认使用水手服\n\n            newActiveCharacters[characterId] = {\n              position: 'right',\n              expression: expression,\n              costume: costume,\n            };\n\n            this.showCharacter(characterId, 'right', dialog.name === characterId, expression, costume);\n          }\n        }\n      }\n    } else {\n      // 没有角色配置时，隐藏所有角色\n      for (const characterId in this.activeCharacters) {\n        this.hideCharacter(characterId);\n      }\n      this.activeCharacters = {};\n      return;\n    }\n\n    // 移除不在新配置中的角色\n    for (const characterId in this.activeCharacters) {\n      if (!newActiveCharacters[characterId]) {\n        this.hideCharacter(characterId);\n      }\n    }\n\n    // 更新活动角色列表\n    this.activeCharacters = newActiveCharacters;\n  }\n\n  // 显示角色立绘\n  showCharacter(characterId, position, isSpeaking, expression = '默认', costume = '水手服') {\n    // 转场中不更新角色显示，避免冲突\n    if (this.isTransitioning) {\n      console.log('正在转场中，跳过显示角色:', characterId);\n      return;\n    }\n\n    // 获取角色的服装和表情立绘URL\n    if (!this.characterSprites[characterId]) return;\n\n    // 指定角色的服装，如果不存在则使用默认服装\n    const characterCostumes = this.characterSprites[characterId];\n    let costumeToUse = costume;\n\n    // 如果指定的服装不存在，则使用第一个可用的服装\n    if (!characterCostumes[costumeToUse]) {\n      costumeToUse = Object.keys(characterCostumes)[0];\n    }\n\n    // 获取指定服装下的表情\n    const costumeExpressions = characterCostumes[costumeToUse];\n\n    // 如果指定的表情不存在，则使用默认表情\n    let expressionToUse = expression;\n    if (!costumeExpressions[expressionToUse]) {\n      expressionToUse = Object.keys(costumeExpressions)[0] || '默认.png';\n    }\n\n    const spriteUrl = costumeExpressions[expressionToUse];\n\n    // 如果没有找到有效的立绘URL，则退出\n    if (!spriteUrl) return;\n\n    // 获取角色ID和表情的组合ID\n    const characterElementId = `character-${characterId}`;\n    const oldPosition = this.activeCharacters[characterId]?.position;\n\n    // 检查角色立绘是否已存在\n    let characterElement = document.getElementById(characterElementId);\n\n    // 如果不存在则创建新的立绘元素\n    if (!characterElement) {\n      characterElement = document.createElement('img');\n      characterElement.id = characterElementId;\n      characterElement.className = 'character-sprite character-enter';\n      characterElement.src = spriteUrl;\n      characterElement.dataset.expression = expressionToUse;\n      characterElement.dataset.position = position;\n      characterElement.alt = `${characterId}的立绘`;\n\n      // 过渡前准备 - 如果是从一侧切换到另一侧，先使用原来的位置\n      if (oldPosition && oldPosition !== position) {\n        characterElement.classList.add(`character-${oldPosition}`);\n      } else {\n        characterElement.classList.add(`character-${position}`);\n      }\n\n      this.characterContainer.appendChild(characterElement);\n\n      // 图片加载完成后添加激活类\n      setTimeout(() => {\n        // 再次检查是否在转场中，如果是则不显示\n        if (this.isTransitioning) {\n          if (characterElement && characterElement.parentNode) {\n            characterElement.parentNode.removeChild(characterElement);\n          }\n          return;\n        }\n\n        characterElement.classList.remove('character-enter');\n        characterElement.classList.add('character-active');\n\n        // 如果位置改变，延迟后更新位置\n        if (oldPosition && oldPosition !== position) {\n          setTimeout(() => {\n            characterElement.classList.remove(`character-${oldPosition}`);\n            characterElement.classList.add(`character-${position}`);\n            characterElement.dataset.position = position;\n          }, 50);\n        }\n\n        // 单人居中显示时的特殊处理\n        this.applyPositionStyle(characterElement, position);\n      }, 50);\n    }\n    // 如果已存在但表情或位置不同\n    else {\n      // 表情变化\n      if (characterElement.dataset.expression !== expressionToUse) {\n        characterElement.src = spriteUrl;\n        characterElement.dataset.expression = expressionToUse;\n      }\n\n      // 位置变化\n      if (characterElement.dataset.position !== position) {\n        // 使用过渡动画平滑切换位置\n        setTimeout(() => {\n          // 再次检查是否在转场中\n          if (this.isTransitioning) return;\n\n          characterElement.classList.remove(`character-${characterElement.dataset.position}`);\n          characterElement.classList.add(`character-${position}`);\n          characterElement.dataset.position = position;\n\n          // 更新定位样式\n          this.applyPositionStyle(characterElement, position);\n        }, 50);\n      }\n    }\n\n    // 应用说话/不说话状态 - 只用滤镜区分，不用透明度\n    if (isSpeaking) {\n      characterElement.classList.add('character-speaking');\n      characterElement.classList.remove('character-dimmed');\n      characterElement.style.opacity = '1'; // 确保完全不透明\n      characterElement.style.zIndex = '10'; // 确保说话角色在前面\n    } else {\n      characterElement.classList.remove('character-speaking');\n      characterElement.classList.add('character-dimmed');\n      characterElement.style.opacity = '1'; // 确保完全不透明\n      characterElement.style.zIndex = '5'; // 非说话角色在后面\n    }\n  }\n\n  // 应用位置样式的辅助函数\n  applyPositionStyle(element, position) {\n    // 单人居中显示时的特殊处理\n    if (position === 'center') {\n      // 确保完全居中且底部不露出背景\n      element.style.left = '50%';\n      element.style.right = 'auto';\n      element.style.transform = 'translateX(-50%)';\n      element.style.bottom = '0';\n      element.style.height = '98%';\n      element.style.maxHeight = '98%';\n    } else if (position === 'left') {\n      // 左侧定位 - 调整为更靠近中心\n      element.style.left = '30%';\n      element.style.right = 'auto';\n      element.style.transform = 'translateX(-50%)';\n      element.style.bottom = '0';\n      element.style.height = '95%';\n      element.style.maxHeight = '95%';\n    } else if (position === 'right') {\n      // 右侧定位 - 调整为更靠近中心\n      element.style.right = '30%';\n      element.style.left = 'auto';\n      element.style.transform = 'translateX(50%)';\n      element.style.bottom = '0';\n      element.style.height = '95%';\n      element.style.maxHeight = '95%';\n    }\n  }\n\n  // 隐藏角色立绘\n  hideCharacter(characterId) {\n    const characterElement = document.getElementById(`character-${characterId}`);\n    if (characterElement) {\n      // 防止重复触发淡出动画\n      if (characterElement.classList.contains('character-exit')) return;\n\n      characterElement.classList.add('character-exit');\n      characterElement.classList.remove('character-active', 'character-speaking');\n\n      // 动画结束后移除元素\n      setTimeout(() => {\n        if (characterElement && characterElement.parentNode) {\n          characterElement.parentNode.removeChild(characterElement);\n        }\n      }, 800); // 增加延迟以配合CSS过渡时间\n    }\n  }\n\n  nextDialog() {\n    // 如果正在动画中，则跳过打字效果直接显示全部文本\n    if (this.isAnimating) {\n      this.isAnimating = false;\n      const currentDialog = this.dialogData[this.currentIndex];\n      this.dialogText.textContent = currentDialog.text;\n      document.getElementById('next-hint').style.opacity = '1'; // 显示提示\n      return;\n    }\n\n    // 增加对话索引\n    this.currentIndex++;\n\n    // --- 修改点：检查是否超出对话数据范围 ---\n    if (this.currentIndex >= this.dialogData.length) {\n      console.log('对话已全部播放完毕。');\n      // 将索引退回到最后一条，防止后续可能的错误引用\n      this.currentIndex = this.dialogData.length - 1;\n\n      // 可选：隐藏\"下一步\"提示，明确告知用户对话结束\n      const nextHint = document.getElementById('next-hint');\n      if (nextHint) {\n        nextHint.style.display = 'none';\n      }\n\n      // 显示重新播放按钮\n      const restartBtn = document.getElementById('restart-btn');\n      if (restartBtn) {\n        restartBtn.style.display = 'block';\n      }\n\n      // 阻止进一步的操作，不再调用 showDialog\n      return;\n    }\n    // --- 修改结束 ---\n\n    // 如果索引有效，则显示下一条对话\n    this.showDialog(this.currentIndex);\n  }\n\n  // 重新开始对话播放\n  restartDialog() {\n    console.log('重新开始对话播放');\n\n    // 重置索引\n    this.currentIndex = 0;\n\n    // 重置角色立绘\n    for (const characterId in this.activeCharacters) {\n      this.hideCharacter(characterId);\n    }\n    this.activeCharacters = {};\n\n    // 重置背景到初始状态\n    if (this.dialogData && this.dialogData.length > 0 && this.dialogData[0].background) {\n      this.currentBgPath = this.dialogData[0].background;\n      const initialBgUrl = this.getFullImageUrl(this.currentBgPath);\n      this.currentImage.src = initialBgUrl;\n    }\n\n    // 重置对话界面状态\n    const nextHint = document.getElementById('next-hint');\n    if (nextHint) {\n      nextHint.style.display = 'block';\n      nextHint.style.opacity = '1';\n    }\n\n    // 隐藏重新播放按钮\n    const restartBtn = document.getElementById('restart-btn');\n    if (restartBtn) {\n      restartBtn.style.display = 'none';\n    }\n\n    // 显示第一条对话\n    this.showDialog(0);\n  }\n\n  fadeOutIn(callback, dialogToUpdate) {\n    // 如果已经在转场，则忽略\n    if (this.isTransitioning) {\n      console.log('已在转场中，忽略新的转场请求');\n      return;\n    }\n\n    this.isTransitioning = true;\n    console.log('开始背景转场');\n\n    // 获取下一张图片的URL\n    const relativeImagePath = callback(); // 获取 JSON 中定义的相对路径 (例如 \"教室/白天.jpg\")\n    if (!relativeImagePath) {\n      console.log('背景路径为空，跳过转场');\n      this.isTransitioning = false;\n      if (dialogToUpdate) {\n        this.updateDialogContent(dialogToUpdate);\n      }\n      return;\n    }\n\n    let nextImageUrl = this.getFullImageUrl(relativeImagePath);\n    console.log('切换背景图片:', relativeImagePath, '->', nextImageUrl);\n\n    // 如果URL获取失败或与当前图片相同，则不执行转场\n    if (!nextImageUrl || nextImageUrl === this.currentImage.src) {\n      console.log('跳过背景转场: URL为空或相同');\n      this.isTransitioning = false;\n      // 即使没有转场，也要更新对话内容\n      if (dialogToUpdate) {\n        this.updateDialogContent(dialogToUpdate);\n      }\n      return;\n    }\n\n    // 执行转场动画\n    const executeTransition = () => {\n      console.log('执行背景转场动画');\n      // 添加转场动画类\n      document.body.classList.add('transitioning');\n\n      // 淡入下一张图片\n      this.nextImage.style.opacity = '1';\n\n      // 转场完成后的处理\n      setTimeout(() => {\n        // 将下一张图片的URL复制到当前图片\n        this.currentImage.src = this.nextImage.src;\n        console.log('背景转场完成，当前背景:', this.currentImage.src);\n        // 重置下一张图片的不透明度\n        this.nextImage.style.opacity = '0';\n        // 移除转场动画类\n        document.body.classList.remove('transitioning');\n        // 重置转场状态\n        this.isTransitioning = false;\n\n        // 转场完成后更新对话内容\n        if (dialogToUpdate) {\n          console.log('转场完成，更新对话内容:', dialogToUpdate.name);\n          // 修复：确保转场完全结束后再更新对话内容和角色\n          setTimeout(() => {\n            this.updateDialogContent(dialogToUpdate);\n          }, 50);\n        }\n      }, 1200); // 与CSS过渡时间匹配\n    };\n\n    // 设置下一张图片的URL\n    this.nextImage.src = nextImageUrl;\n\n    // 添加错误处理\n    this.nextImage.onerror = () => {\n      console.error('背景图片加载失败:', nextImageUrl);\n      this.isTransitioning = false;\n      // 即使加载失败，也要尝试更新对话内容\n      if (dialogToUpdate) {\n        this.updateDialogContent(dialogToUpdate);\n      }\n    };\n\n    this.nextImage.onload = () => {\n      console.log('背景图片加载完成');\n      executeTransition();\n    };\n  }\n\n  // 添加对话到历史记录\n  addToHistory(dialog) {\n    // 检查是否已经存在相同的对话（避免重复添加）\n    const isDuplicate = this.dialogHistory.some(item => item.name === dialog.name && item.text === dialog.text);\n\n    if (!isDuplicate) {\n      this.dialogHistory.push({\n        name: dialog.name,\n        text: dialog.text,\n        background: dialog.background || '',\n      });\n\n      // 更新历史面板内容\n      this.updateHistoryPanel();\n    }\n  }\n\n  // 更新历史面板内容\n  updateHistoryPanel() {\n    // 清空当前内容\n    this.historyContent.innerHTML = '';\n\n    // 如果没有历史记录，显示提示信息\n    if (this.dialogHistory.length === 0) {\n      const emptyMsg = document.createElement('div');\n      emptyMsg.textContent = '暂无对话历史';\n      emptyMsg.style.textAlign = 'center';\n      emptyMsg.style.color = '#7D5B65';\n      emptyMsg.style.padding = '20px';\n      this.historyContent.appendChild(emptyMsg);\n      return;\n    }\n\n    // 为每条历史记录创建元素\n    this.dialogHistory.forEach((dialog, index) => {\n      const historyItem = document.createElement('div');\n      historyItem.className = 'history-item';\n      historyItem.style.marginBottom = '15px';\n      historyItem.style.padding = '15px';\n      historyItem.style.borderRadius = '12px';\n      historyItem.style.background = 'rgba(255, 255, 255, 0.5)';\n      historyItem.style.boxShadow = '0 2px 8px rgba(0,0,0,0.05), 0 0 0 1px rgba(255,255,255,0.7) inset';\n      historyItem.style.transition = 'transform 0.2s ease, box-shadow 0.2s ease';\n\n      // 鼠标悬停效果\n      historyItem.onmouseover = function () {\n        this.style.transform = 'translateY(-2px)';\n        this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.08), 0 0 0 1px rgba(255,255,255,0.8) inset';\n      };\n\n      historyItem.onmouseout = function () {\n        this.style.transform = 'none';\n        this.style.boxShadow = '0 2px 8px rgba(0,0,0,0.05), 0 0 0 1px rgba(255,255,255,0.7) inset';\n      };\n\n      // 如果有角色名，则显示\n      if (dialog.name && dialog.name !== '旁白') {\n        const nameElem = document.createElement('div');\n        nameElem.className = 'history-name';\n        nameElem.textContent = dialog.name;\n        nameElem.style.fontWeight = 'bold';\n        nameElem.style.color = '#C18E98';\n        nameElem.style.marginBottom = '8px';\n        nameElem.style.position = 'relative';\n        nameElem.style.paddingLeft = '15px';\n\n        // 添加装饰元素\n        const decorElem = document.createElement('span');\n        decorElem.textContent = '❀';\n        decorElem.style.position = 'absolute';\n        decorElem.style.left = '0';\n        decorElem.style.top = '50%';\n        decorElem.style.transform = 'translateY(-50%)';\n        decorElem.style.color = '#FFB0C0';\n        decorElem.style.fontSize = '12px';\n\n        nameElem.appendChild(decorElem);\n        historyItem.appendChild(nameElem);\n      } else if (dialog.name === '旁白') {\n        // 旁白样式特殊处理\n        historyItem.style.fontStyle = 'italic';\n        historyItem.style.background = 'rgba(245, 235, 235, 0.7)';\n        historyItem.style.borderLeft = '3px solid #FFCAD5';\n      }\n\n      // 添加对话文本\n      const textElem = document.createElement('div');\n      textElem.className = 'history-text';\n      textElem.textContent = dialog.text;\n      textElem.style.color = '#4D2B35';\n      textElem.style.lineHeight = '1.5';\n      textElem.style.letterSpacing = '0.3px';\n      historyItem.appendChild(textElem);\n\n      // 添加到历史内容区\n      this.historyContent.appendChild(historyItem);\n    });\n\n    // 滚动到底部\n    setTimeout(() => {\n      this.historyContent.scrollTop = this.historyContent.scrollHeight;\n    }, 100);\n  }\n\n  // 显示/隐藏历史面板\n  toggleHistoryPanel(show) {\n    if (show) {\n      this.updateHistoryPanel();\n      this.historyPanel.style.display = 'block';\n\n      // 添加淡入动画效果\n      this.historyPanel.style.opacity = '0';\n      this.historyPanel.style.transition = 'opacity 0.3s ease';\n      setTimeout(() => {\n        this.historyPanel.style.opacity = '1';\n      }, 10);\n    } else {\n      // 淡出动画效果\n      this.historyPanel.style.opacity = '0';\n      setTimeout(() => {\n        this.historyPanel.style.display = 'none';\n      }, 300);\n    }\n  }\n}\n\n// 当页面加载完成后初始化游戏引擎\n$(() => {\n  const engine = new GalgameEngine();\n\n  // 处理UI显示/隐藏功能\n  function initToggleUIButton() {\n    const toggleBtn = document.getElementById('toggle-ui-btn');\n    if (toggleBtn) {\n      toggleBtn.addEventListener('click', function (e) {\n        e.stopPropagation(); // 防止点击事件触发对话推进\n        document.body.classList.toggle('ui-hidden');\n\n        // 更新按钮文本\n        if (document.body.classList.contains('ui-hidden')) {\n          toggleBtn.textContent = '💬';\n          toggleBtn.title = '显示界面';\n\n          // 在UI隐藏模式下取消角色立绘的高亮/淡化效果\n          const characterElements = document.querySelectorAll('.character-sprite');\n          characterElements.forEach(element => {\n            element.classList.remove('character-speaking', 'character-dimmed');\n          });\n        } else {\n          toggleBtn.textContent = '💭';\n          toggleBtn.title = '隐藏界面';\n\n          // 恢复当前对话的角色状态\n          engine.updateCharacters(engine.dialogData[engine.currentIndex]);\n        }\n      });\n\n      // 设置初始状态\n      toggleBtn.textContent = '💭';\n      toggleBtn.title = '隐藏界面';\n    }\n  }\n\n  // 初始化UI切换按钮\n  initToggleUIButton();\n\n  // 初始化历史对话按钮\n  const historyBtn = document.getElementById('history-btn');\n  const closeHistoryBtn = document.getElementById('close-history');\n\n  if (historyBtn && closeHistoryBtn) {\n    // 打开历史面板\n    historyBtn.addEventListener('click', function (e) {\n      e.stopPropagation(); // 防止点击事件触发对话推进\n      engine.toggleHistoryPanel(true);\n    });\n\n    // 关闭历史面板\n    closeHistoryBtn.addEventListener('click', function (e) {\n      e.stopPropagation(); // 防止点击事件触发对话推进\n      engine.toggleHistoryPanel(false);\n    });\n\n    // 点击历史面板内部不触发对话推进\n    document.getElementById('history-panel').addEventListener('click', function (e) {\n      e.stopPropagation();\n    });\n\n    // ESC键关闭历史面板\n    document.addEventListener('keydown', function (e) {\n      if (e.key === 'Escape' && engine.historyPanel.style.display === 'block') {\n        engine.toggleHistoryPanel(false);\n      }\n    });\n  }\n\n  // 初始化重新播放按钮\n  const restartBtn = document.getElementById('restart-btn');\n  if (restartBtn) {\n    restartBtn.addEventListener('click', function (e) {\n      e.stopPropagation(); // 防止点击事件触发对话推进\n      engine.restartDialog();\n    });\n\n    // 设置按钮标题\n    restartBtn.title = '重新开始';\n  }\n});\n"],"names":["GalgameEngine","constructor","this","currentIndex","isAnimating","activeCharacters","isTransitioning","currentBgPath","dialogHistory","dialogBox","document","getElementById","characterName","dialogText","currentImage","nextImage","characterContainer","historyPanel","historyContent","imageBaseUrl","characterSpritesBaseUrl","gameDataString","SillyTavern","chat","getCurrentMessageId","mes","match","Error","parsedData","JSON","parse","console","log","jsonError","warn","message","YAML","yamlError","error","Array","isArray","length","dialogData","name","text","characters","characterSprites","initEventListeners","initializeBackground","showDialog","background","initialBgPath","initialBgUrl","getFullImageUrl","src","style","opacity","onerror","complete","onload","relativePath","pathParts","split","encodedPath","map","part","encodeURIComponent","join","addEventListener","nextDialog","event","code","preventDefault","index","dialog","newBgPath","needBackgroundTransition","characterId","hideCharacter","fadeOutIn","updateDialogContent","updateCharacters","textContent","applyTypingEffect","addToHistory","speedModifier","Math","max","min","speed","floor","i","typeWriter","char","charAt","setTimeout","newActiveCharacters","body","classList","remove","id","left","right","hasLeftChar","hasRightChar","expression","costume","position","showCharacter","add","isSpeaking","characterCostumes","costumeToUse","Object","keys","costumeExpressions","expressionToUse","spriteUrl","characterElementId","oldPosition","characterElement","dataset","applyPositionStyle","createElement","className","alt","appendChild","parentNode","removeChild","zIndex","element","transform","bottom","height","maxHeight","contains","currentDialog","nextHint","display","restartBtn","restartDialog","callback","dialogToUpdate","relativeImagePath","nextImageUrl","executeTransition","some","item","push","updateHistoryPanel","innerHTML","emptyMsg","textAlign","color","padding","forEach","historyItem","marginBottom","borderRadius","boxShadow","transition","onmouseover","onmouseout","nameElem","fontWeight","paddingLeft","decorElem","top","fontSize","fontStyle","borderLeft","textElem","lineHeight","letterSpacing","scrollTop","scrollHeight","toggleHistoryPanel","show","$","engine","toggleBtn","e","stopPropagation","toggle","title","querySelectorAll","initToggleUIButton","historyBtn","closeHistoryBtn","key"],"sourceRoot":""}