{"version":3,"file":"index.js","mappings":"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","sources":["src://tavern_helper_template/src/回合制战斗系统/ui/battle-interface.ts","src://tavern_helper_template/src/回合制战斗系统/index.ts"],"sourcesContent":["import { BattleLogEntry } from '../models/battle'; // 导入模型\nimport { Character, Status } from '../models/character'; // 导入模型\nimport { Skill } from '../models/skill'; // 导入模型\n\n/**\n * 更新角色信息的显示\n * @param type 'player' 或 'enemy'\n * @param character 角色数据\n */\nfunction updateCharacterInfo(type: 'player' | 'enemy', character: Character): void {\n  const infoDiv = $(`#${type}-info`);\n  if (infoDiv.length === 0) return;\n\n  const attributes = character.attributes;\n  const statusNames = character.status.map(s => s.name).join(', ');\n\n  infoDiv.html(`\n        <h3>${character.name}</h3>\n        <div class=\"status-bar hp\">\n            <div class=\"bar-fill\" style=\"width: ${(attributes.hp / attributes.maxHp) * 100}%;\"></div>\n        </div>\n        <span>HP: ${attributes.hp} / ${attributes.maxHp}</span>\n        <div class=\"status-bar mp\">\n            <div class=\"bar-fill\" style=\"width: ${(attributes.mp / attributes.maxMp) * 100}%;\"></div>\n        </div>\n        <span>MP: ${attributes.mp} / ${attributes.maxMp}</span>\n        <div class=\"status-effects\">\n            状态: ${statusNames || '无'}\n        </div>\n    `);\n}\n\n/**\n * 向战斗日志添加条目\n * @param logEntry 日志条目数据\n */\nfunction addLogEntry(logEntry: BattleLogEntry): void {\n  const battleLog = $('#battle-log');\n  if (battleLog.length === 0) return;\n\n  let entryClass = 'log-entry';\n  if (logEntry.actionType === 'system') {\n    entryClass += ' system-message';\n  } else if (logEntry.actorId === 'player') {\n    // 假设玩家 ID 固定为 'player'\n    entryClass += ' player-action';\n  } else {\n    entryClass += ' enemy-action';\n  }\n\n  // 使用 description 作为基础，可以根据结构化数据进一步丰富显示\n  let messageHtml = `[回合 ${logEntry.turn}] ${logEntry.description}`;\n  // 示例：为伤害、治疗、暴击添加样式\n  if (logEntry.damageDealt) {\n    messageHtml = messageHtml.replace(\n      logEntry.damageDealt.toString(),\n      `<span class=\"damage\">${logEntry.damageDealt}</span>`,\n    );\n  }\n  if (logEntry.healingDone) {\n    messageHtml = messageHtml.replace(\n      logEntry.healingDone.toString(),\n      `<span class=\"heal\">${logEntry.healingDone}</span>`,\n    );\n  }\n  if (logEntry.isCritical) {\n    // 假设描述中包含能标识暴击的词\n    messageHtml = messageHtml.replace('暴击', '<span class=\"critical\">暴击</span>');\n  }\n\n  const entry = $(`<div class=\"${entryClass}\"></div>`).html(messageHtml);\n  battleLog.append(entry);\n  battleLog.scrollTop(battleLog[0].scrollHeight);\n}\n\n/**\n * 更新技能列表\n * @param skills 技能数组\n */\nfunction updateSkillList(skills: Skill[]): void {\n  const skillListDiv = $('#skill-list');\n  if (skillListDiv.length === 0) return;\n\n  skillListDiv.empty();\n  skills.forEach(skill => {\n    const skillButton = $(\n      `<button class=\"skill-button\" data-skill-id=\"${skill.id}\">${skill.name} (MP: ${skill.mpCost})</button>`,\n    );\n    skillListDiv.append(skillButton);\n  });\n}\n\n/**\n * 显示战斗结果\n * @param message 结果消息\n */\nfunction showBattleResult(message: string): void {\n  const battleResultDiv = $('#battle-result');\n  if (battleResultDiv.length === 0) return;\n\n  battleResultDiv.html(`<h2>${message}</h2><button id=\"continue-plot-button\">继续剧情</button>`);\n  battleResultDiv.show();\n  $('.battle-controls').hide();\n}\n\n// --- 示例数据和初始化 --- (后续会由战斗引擎和通信模块驱动)\nconst samplePlayerStatus: Status[] = [{ id: 's001', name: '力量提升', description: '攻击力少量上升', duration: 3 }];\nconst sampleEnemyStatus: Status[] = [{ id: 's002', name: '中毒', description: '每回合损失少量HP', duration: 5 }];\n\nconst samplePlayerSkills: Skill[] = [\n  {\n    id: 'sk001',\n    name: '火焰球',\n    description: '造成少量火属性伤害',\n    mpCost: 10,\n    type: 'attack',\n    targetType: 'single',\n    effects: [{ type: 'damage', value: 15 }],\n  },\n  {\n    id: 'sk002',\n    name: '治疗术',\n    description: '恢复少量HP',\n    mpCost: 15,\n    type: 'heal',\n    targetType: 'single',\n    effects: [{ type: 'heal', value: 20 }],\n  },\n  {\n    id: 'sk003',\n    name: '英勇打击',\n    description: '造成物理伤害',\n    mpCost: 5,\n    type: 'attack',\n    targetType: 'single',\n    effects: [{ type: 'damage', value: 10 }],\n  },\n];\n\nconst samplePlayer: Character = {\n  id: 'player',\n  name: '英雄',\n  type: 'player',\n  attributes: { hp: 85, maxHp: 100, mp: 40, maxMp: 50, strength: 12, defense: 8, speed: 10, intelligence: 9 },\n  skills: samplePlayerSkills,\n  status: samplePlayerStatus,\n};\n\nconst sampleEnemy: Character = {\n  id: 'enemy01',\n  name: '史莱姆王',\n  type: 'enemy',\n  attributes: { hp: 120, maxHp: 120, mp: 20, maxMp: 20, strength: 10, defense: 10, speed: 5, intelligence: 3 },\n  skills: [], // 敌人技能暂不在此示例中处理\n  status: sampleEnemyStatus,\n};\n\nconst sampleLog: BattleLogEntry[] = [\n  { turn: 1, actorId: 'system', actorName: '系统', actionType: 'system', description: '战斗开始！史莱姆王出现了！' },\n  {\n    turn: 1,\n    actorId: 'player',\n    actorName: '英雄',\n    actionType: 'skill',\n    skillName: '火焰球',\n    targetId: 'enemy01',\n    targetName: '史莱姆王',\n    description: '英雄对史莱姆王使用了火焰球，造成 15 点伤害。',\n    damageDealt: 15,\n  },\n  {\n    turn: 1,\n    actorId: 'enemy01',\n    actorName: '史莱姆王',\n    actionType: 'attack',\n    targetId: 'player',\n    targetName: '英雄',\n    description: '史莱姆王撞向英雄，造成 8 点伤害。',\n    damageDealt: 8,\n  },\n  {\n    turn: 2,\n    actorId: 'player',\n    actorName: '英雄',\n    actionType: 'attack',\n    targetId: 'enemy01',\n    targetName: '史莱姆王',\n    description: '英雄发动了攻击，造成 18 点<span class=\"critical\">暴击</span>伤害！',\n    damageDealt: 18,\n    isCritical: true,\n  },\n  {\n    turn: 2,\n    actorId: 'enemy01',\n    actorName: '史莱姆王',\n    actionType: 'system',\n    description: '史莱姆王因为中毒，受到了 5 点伤害。',\n    damageDealt: 5,\n  }, // 状态伤害\n  {\n    turn: 2,\n    actorId: 'player',\n    actorName: '英雄',\n    actionType: 'skill',\n    skillName: '治疗术',\n    targetId: 'player',\n    targetName: '英雄',\n    description: '英雄对自己使用了治疗术，恢复了 20 点HP。',\n    healingDone: 20,\n  },\n];\n\n$(document).ready(() => {\n  updateCharacterInfo('player', samplePlayer);\n  updateCharacterInfo('enemy', sampleEnemy);\n  updateSkillList(samplePlayerSkills);\n\n  // 显示示例日志\n  sampleLog.forEach(log => addLogEntry(log));\n\n  // 绑定事件监听 (这里的逻辑后续会被战斗引擎接管)\n  $('.battle-controls').on('click', '.action-button', function () {\n    const action = $(this).data('action');\n    const log: BattleLogEntry = {\n      turn: 3, // 假设是第3回合\n      actorId: 'player',\n      actorName: '英雄',\n      actionType: action,\n      description: `英雄选择了 ${$(this).text()}`,\n    };\n    addLogEntry(log);\n\n    // 模拟敌人回合和战斗结束\n    setTimeout(() => {\n      const enemyLog: BattleLogEntry = {\n        turn: 3,\n        actorId: 'enemy01',\n        actorName: '史莱姆王',\n        actionType: 'attack',\n        targetId: 'player',\n        targetName: '英雄',\n        description: '史莱姆王发动了最终一击！',\n        damageDealt: 50, // 假设高伤害\n        isCritical: true, // 假设暴击\n      };\n      addLogEntry(enemyLog);\n      if (Math.random() > 0.3) {\n        showBattleResult('胜利！');\n      } else {\n        showBattleResult('失败...');\n      }\n    }, 1000);\n  });\n\n  $('.battle-controls').on('click', '.skill-button', function () {\n    const skillId = $(this).data('skill-id');\n    const skill = samplePlayerSkills.find(s => s.id === skillId);\n    if (!skill) return;\n\n    const log: BattleLogEntry = {\n      turn: 3, // 假设是第3回合\n      actorId: 'player',\n      actorName: '英雄',\n      actionType: 'skill',\n      skillName: skill.name,\n      description: `英雄使用了技能：${skill.name}`,\n    };\n    addLogEntry(log);\n\n    // 模拟敌人回合和战斗结束\n    setTimeout(() => {\n      const enemyLog: BattleLogEntry = {\n        turn: 3,\n        actorId: 'enemy01',\n        actorName: '史莱姆王',\n        actionType: 'attack',\n        targetId: 'player',\n        targetName: '英雄',\n        description: '史莱姆王发动了反击！',\n        damageDealt: 12,\n      };\n      addLogEntry(enemyLog);\n      showBattleResult('战斗结束！');\n    }, 1000);\n  });\n\n  $('#battle-result').on('click', '#continue-plot-button', function () {\n    toastr.info('继续剧情...（此处将与SillyTavern交互）');\n    // TODO: 实现与SillyTavern的交互逻辑\n    $('#battle-container').hide(); // 隐藏战斗界面\n  });\n});\n","// 主入口文件，用于 Webpack 打包\n\n// 导入 UI 模块，确保其代码被包含在打包结果中\nimport './ui/battle-interface';\n\n// 导入样式文件，Webpack 会处理 SCSS 编译和打包\nimport './styles/main.scss';\n\n// 后续可以从这里导出模块的主要功能或类\n// export { BattleManager } from './core/battle-manager';\n\n// 也可以在这里执行一些全局初始化操作（如果需要）\nconsole.log('回合制战斗系统组件已加载');\n\n// TODO:\n// 1. 实现核心战斗逻辑 (core/)\n// 2. 定义数据模型 (models/)\n// 3. 实现与 SillyTavern 的通信 (communication/)\n// 4. 将 battle-interface.ts 中的模拟数据替换为真实数据流\n"],"names":["updateCharacterInfo","type","character","infoDiv","$","length","attributes","statusNames","status","map","s","name","join","html","hp","maxHp","mp","maxMp","addLogEntry","logEntry","battleLog","entryClass","actionType","actorId","messageHtml","turn","description","damageDealt","replace","toString","healingDone","isCritical","entry","append","scrollTop","scrollHeight","showBattleResult","message","battleResultDiv","show","hide","samplePlayerSkills","id","mpCost","targetType","effects","value","samplePlayer","strength","defense","speed","intelligence","skills","duration","sampleEnemy","sampleLog","actorName","skillName","targetId","targetName","document","ready","skillListDiv","empty","forEach","skill","skillButton","updateSkillList","log","on","this","data","text","setTimeout","Math","random","skillId","find","toastr","info","console"],"sourceRoot":""}