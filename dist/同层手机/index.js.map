{"version":3,"file":"index.js","mappings":"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","sources":["src://tavern_helper_template/src/同层手机/debug-logger.ts","src://tavern_helper_template/src/同层手机/dialog-manager.ts","src://tavern_helper_template/webpack/bootstrap","src://tavern_helper_template/webpack/runtime/define property getters","src://tavern_helper_template/webpack/runtime/hasOwnProperty shorthand","src://tavern_helper_template/src/同层手机/event-manager.ts","src://tavern_helper_template/src/同层手机/script.ts","src://tavern_helper_template/src/同层手机/utils.ts","src://tavern_helper_template/src/同层手机/ai-response-manager.ts","src://tavern_helper_template/src/同层手机/config-manager.ts","src://tavern_helper_template/src/同层手机/debug-data.ts","src://tavern_helper_template/src/同层手机/input-handler.ts","src://tavern_helper_template/src/同层手机/moments-manager.ts","src://tavern_helper_template/src/同层手机/theme-editor.ts","src://tavern_helper_template/src/同层手机/theme-manager.ts","src://tavern_helper_template/src/同层手机/ui-manager.ts","src://tavern_helper_template/src/同层手机/ui-renderer.ts","src://tavern_helper_template/src/同层手机/wallpaper-selector.ts","src://tavern_helper_template/src/同层手机/wallpaper-controller.ts","src://tavern_helper_template/src/同层手机/app-controller.ts","src://tavern_helper_template/src/同层手机/style-manager.ts","src://tavern_helper_template/src/同层手机/index.ts","src://tavern_helper_template/src/同层手机/event-handler.ts"],"sourcesContent":["/**\n * 统一的调试日志工具\n * 用于替代散布在各处的 console.log 调试代码\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\nexport class DebugLogger {\n  private static instance: DebugLogger;\n  private isDevelopment: boolean;\n  private logLevel: LogLevel;\n  private logHistory: Array<{ timestamp: Date; level: LogLevel; module: string; message: string; data?: any }> = [];\n  private maxHistorySize: number = 1000;\n\n  private constructor() {\n    // 检查是否为开发模式\n    this.isDevelopment = this.checkDevelopmentMode();\n    this.logLevel = this.isDevelopment ? LogLevel.DEBUG : LogLevel.ERROR;\n  }\n\n  static getInstance(): DebugLogger {\n    if (!DebugLogger.instance) {\n      DebugLogger.instance = new DebugLogger();\n    }\n    return DebugLogger.instance;\n  }\n\n  /**\n   * 检查是否为开发模式\n   */\n  private checkDevelopmentMode(): boolean {\n    // 检查多种开发模式标识\n    return !!(\n      (window as any).BLMX_DEV_MODE ||\n      (window as any).DEBUG ||\n      localStorage.getItem('blmx_debug') === 'true' ||\n      location.hostname === 'localhost' ||\n      location.hostname === '127.0.0.1' ||\n      location.search.includes('debug=true')\n    );\n  }\n\n  /**\n   * 设置日志级别\n   */\n  setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  /**\n   * 启用/禁用开发模式\n   */\n  setDevelopmentMode(enabled: boolean): void {\n    this.isDevelopment = enabled;\n    if (enabled) {\n      localStorage.setItem('blmx_debug', 'true');\n    } else {\n      localStorage.removeItem('blmx_debug');\n    }\n  }\n\n  /**\n   * 记录日志到历史\n   */\n  private addToHistory(level: LogLevel, module: string, message: string, data?: any): void {\n    this.logHistory.push({\n      timestamp: new Date(),\n      level,\n      module,\n      message,\n      data,\n    });\n\n    // 限制历史记录大小\n    if (this.logHistory.length > this.maxHistorySize) {\n      this.logHistory.shift();\n    }\n  }\n\n  /**\n   * 格式化日志消息\n   */\n  private formatMessage(module: string, message: string): string {\n    const timestamp = new Date().toISOString().substr(11, 12);\n    return `[${timestamp}] [BLMX:${module}] ${message}`;\n  }\n\n  /**\n   * 调试日志\n   */\n  debug(module: string, message: string, data?: any): void {\n    if (this.logLevel <= LogLevel.DEBUG && this.isDevelopment) {\n      console.log(this.formatMessage(module, message), data || '');\n      this.addToHistory(LogLevel.DEBUG, module, message, data);\n    }\n  }\n\n  /**\n   * 信息日志\n   */\n  info(module: string, message: string, data?: any): void {\n    if (this.logLevel <= LogLevel.INFO && this.isDevelopment) {\n      console.info(this.formatMessage(module, message), data || '');\n      this.addToHistory(LogLevel.INFO, module, message, data);\n    }\n  }\n\n  /**\n   * 警告日志\n   */\n  warn(module: string, message: string, data?: any): void {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn(this.formatMessage(module, message), data || '');\n      this.addToHistory(LogLevel.WARN, module, message, data);\n    }\n  }\n\n  /**\n   * 错误日志（总是显示）\n   */\n  error(module: string, message: string, data?: any): void {\n    console.error(this.formatMessage(module, message), data || '');\n    this.addToHistory(LogLevel.ERROR, module, message, data);\n  }\n\n  /**\n   * 性能测量开始\n   */\n  timeStart(module: string, label: string): void {\n    if (this.isDevelopment) {\n      console.time(this.formatMessage(module, label));\n    }\n  }\n\n  /**\n   * 性能测量结束\n   */\n  timeEnd(module: string, label: string): void {\n    if (this.isDevelopment) {\n      console.timeEnd(this.formatMessage(module, label));\n    }\n  }\n\n  /**\n   * 分组日志开始\n   */\n  groupStart(module: string, title: string): void {\n    if (this.isDevelopment) {\n      console.group(this.formatMessage(module, title));\n    }\n  }\n\n  /**\n   * 分组日志结束\n   */\n  groupEnd(): void {\n    if (this.isDevelopment) {\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * 获取日志历史\n   */\n  getHistory(filterModule?: string, filterLevel?: LogLevel): typeof this.logHistory {\n    let filtered = this.logHistory;\n\n    if (filterModule) {\n      filtered = filtered.filter(log => log.module === filterModule);\n    }\n\n    if (filterLevel !== undefined) {\n      filtered = filtered.filter(log => log.level >= filterLevel);\n    }\n\n    return filtered;\n  }\n\n  /**\n   * 清空日志历史\n   */\n  clearHistory(): void {\n    this.logHistory = [];\n  }\n\n  /**\n   * 导出日志历史为JSON\n   */\n  exportHistory(): string {\n    return JSON.stringify(this.logHistory, null, 2);\n  }\n\n  /**\n   * 显示调试面板（如果在开发模式）\n   */\n  showDebugPanel(): void {\n    if (!this.isDevelopment) {\n      console.warn('调试面板仅在开发模式下可用');\n      return;\n    }\n\n    console.group('🐛 BLMX 调试信息');\n    console.log('开发模式:', this.isDevelopment);\n    console.log('日志级别:', LogLevel[this.logLevel]);\n    console.log('历史记录数量:', this.logHistory.length);\n    \n    if (this.logHistory.length > 0) {\n      console.log('最近的日志:');\n      this.logHistory.slice(-10).forEach(log => {\n        const levelIcon = ['🔍', 'ℹ️', '⚠️', '❌'][log.level];\n        console.log(`${levelIcon} [${log.module}] ${log.message}`, log.data || '');\n      });\n    }\n    \n    console.groupEnd();\n  }\n\n  /**\n   * 获取当前状态\n   */\n  getStatus(): {\n    isDevelopment: boolean;\n    logLevel: string;\n    historyCount: number;\n  } {\n    return {\n      isDevelopment: this.isDevelopment,\n      logLevel: LogLevel[this.logLevel],\n      historyCount: this.logHistory.length,\n    };\n  }\n}\n\n// 创建全局实例\nexport const logger = DebugLogger.getInstance();\n\n// 在开发模式下暴露到全局作用域，方便调试\nif (typeof window !== 'undefined' && logger.getStatus().isDevelopment) {\n  (window as any).blmxLogger = logger;\n}\n","/**\n * 对话框管理器\n * 提供自定义的alert、confirm、prompt对话框，替代系统默认对话框\n */\n\n// 对话框类型\ntype DialogType = 'alert' | 'confirm' | 'prompt';\n\n// 对话框选项\ninterface DialogOptions {\n  title?: string;\n  message: string;\n  type: DialogType;\n  inputType?: string;\n  inputPlaceholder?: string;\n  inputValue?: string;\n  confirmText?: string;\n  cancelText?: string;\n  className?: string;\n}\n\nexport class DialogManager {\n  private static instance: DialogManager;\n  private activeDialog: HTMLElement | null = null;\n  private activeOverlay: HTMLElement | null = null;\n\n  private constructor() {\n    // 私有构造函数，确保单例模式\n  }\n\n  /**\n   * 获取单例实例\n   */\n  public static getInstance(): DialogManager {\n    if (!DialogManager.instance) {\n      DialogManager.instance = new DialogManager();\n    }\n    return DialogManager.instance;\n  }\n\n  /**\n   * HTML转义辅助方法\n   */\n  private escapeHtml(text: string): string {\n    return $('<div>').text(text).html();\n  }\n\n  /**\n   * 安全显示对话框 - 如果已有对话框则先关闭\n   */\n  private async safeShowDialog<T>(dialogFunction: () => Promise<T>): Promise<T> {\n    // 强制清理所有对话框（无论是否有活跃对话框）\n    this.forceCleanupDialogs();\n\n    return await dialogFunction();\n  }\n\n  /**\n   * 创建基础对话框元素\n   */\n  private createBaseDialogElements(dialogClass: string): void {\n    this.activeOverlay = $('<div>').addClass('dialog-overlay mobile-dialog-overlay')[0] as HTMLElement;\n    this.activeDialog = $('<div>').addClass(`dialog ${dialogClass} mobile-dialog`)[0] as HTMLElement;\n  }\n\n  /**\n   * 将对话框添加到页面中\n   */\n  private appendDialogToPage(): void {\n    if (!this.activeOverlay) return;\n\n    const $phoneScreen = $('.phone-screen');\n    if ($phoneScreen.length) {\n      $phoneScreen.append(this.activeOverlay);\n    } else {\n      // 如果找不到手机屏幕容器，回退到body\n      $('body').append(this.activeOverlay);\n    }\n  }\n\n  /**\n   * 初始化对话框中的checkbox按钮样式\n   */\n  private initializeCheckboxButtons(): void {\n    if (!this.activeDialog) return;\n\n    $(this.activeDialog)\n      .find('.checkbox-button')\n      .each((_, button) => {\n        const $button = $(button);\n        const $checkbox = $button.find('input[type=\"checkbox\"]');\n        if (!$checkbox.length) return;\n\n        const checkbox = $checkbox[0] as HTMLInputElement;\n\n        // 设置初始状态\n        this.updateCheckboxButtonState(button as HTMLElement, checkbox.checked);\n\n        // 添加点击事件\n        $button.on('click', e => {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (checkbox.disabled) return;\n\n          // 切换状态\n          checkbox.checked = !checkbox.checked;\n          this.updateCheckboxButtonState(button as HTMLElement, checkbox.checked);\n\n          // 触发change事件 - 使用原生事件确保兼容性\n          const changeEvent = new Event('change', { bubbles: true });\n          checkbox.dispatchEvent(changeEvent);\n        });\n\n        // 监听外部状态变化\n        $checkbox.on('change', () => {\n          this.updateCheckboxButtonState(button as HTMLElement, checkbox.checked);\n        });\n\n        // 设置可访问性属性\n        $button.attr({\n          role: 'checkbox',\n          tabindex: '0',\n          'aria-checked': checkbox.checked.toString(),\n        });\n      });\n  }\n\n  /**\n   * 更新checkbox按钮状态\n   */\n  private updateCheckboxButtonState(button: HTMLElement, checked: boolean): void {\n    const $button = $(button);\n    $button.toggleClass('checked', checked);\n    $button.attr('aria-checked', checked.toString());\n  }\n\n  /**\n   * 显示提示对话框（替代alert）\n   */\n  public alert(message: string, title = '提示', confirmText = '确定'): Promise<void> {\n    return this.safeShowDialog(() =>\n      this.showDialog({\n        type: 'alert',\n        title,\n        message,\n        confirmText,\n      }),\n    );\n  }\n\n  /**\n   * 显示确认对话框（替代confirm）\n   */\n  public confirm(message: string, title = '确认', confirmText = '确定', cancelText = '取消'): Promise<boolean> {\n    return this.safeShowDialog(\n      () =>\n        this.showDialog({\n          type: 'confirm',\n          title,\n          message,\n          confirmText,\n          cancelText,\n        }) as Promise<boolean>,\n    );\n  }\n\n  /**\n   * 显示输入对话框（替代prompt）\n   */\n  public prompt(\n    message: string,\n    defaultValue = '',\n    title = '请输入',\n    confirmText = '确定',\n    cancelText = '取消',\n    inputType = 'text',\n    placeholder = '',\n  ): Promise<string | null> {\n    return this.safeShowDialog(\n      () =>\n        this.showDialog({\n          type: 'prompt',\n          title,\n          message,\n          confirmText,\n          cancelText,\n          inputType,\n          inputValue: defaultValue,\n          inputPlaceholder: placeholder,\n        }) as Promise<string | null>,\n    );\n  }\n\n  /**\n   * 显示可滚动文本对话框（用于显示长文本内容）\n   */\n  public showScrollableText(content: string, title = '内容', confirmText = '关闭'): Promise<void> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('scrollable-text-dialog');\n\n          // 设置对话框内容\n          this.activeDialog!.innerHTML = `\n          <div class=\"dialog-header\">\n            <h3>${title}</h3>\n          </div>\n          <div class=\"dialog-body scrollable-content\">\n            <pre class=\"scrollable-text\">${this.escapeHtml(content)}</pre>\n          </div>\n          <div class=\"dialog-footer\">\n            <button class=\"dialog-button copy-btn\">复制</button>\n            <button class=\"dialog-button primary-button\">${confirmText}</button>\n          </div>\n        `;\n\n          const $copyBtn = $(this.activeDialog!).find('.copy-btn');\n          const $confirmBtn = $(this.activeDialog!).find('.primary-button');\n\n          const handleCopy = async () => {\n            try {\n              await navigator.clipboard.writeText(content);\n              // 临时改变按钮文字提示复制成功\n              const originalText = $copyBtn.text();\n              $copyBtn.text('已复制');\n              setTimeout(() => {\n                $copyBtn.text(originalText);\n              }, 1000);\n            } catch (error) {\n              console.error('复制失败:', error);\n              // 降级方案：选择文本\n              const $textElement = $(this.activeDialog!).find('.scrollable-text');\n              if ($textElement.length) {\n                const range = document.createRange();\n                range.selectNodeContents($textElement[0]);\n                const selection = window.getSelection();\n                if (selection) {\n                  selection.removeAllRanges();\n                  selection.addRange(range);\n                }\n              }\n            }\n          };\n\n          const handleConfirm = () => {\n            this.closeDialog();\n            resolve();\n          };\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve();\n          };\n\n          $copyBtn.on('click', handleCopy);\n          $confirmBtn.on('click', handleConfirm);\n\n          // ESC键关闭\n          $(document).on('keydown.dialog', (e: any) => {\n            if (e.key === 'Escape') {\n              handleCancel();\n              $(document).off('keydown.dialog');\n            }\n          });\n\n          // 添加到手机屏幕容器内\n          $(this.activeOverlay!).append(this.activeDialog!);\n          this.appendDialogToPage();\n        }),\n    );\n  }\n\n  /**\n   * 显示对话框\n   */\n  private showDialog(options: DialogOptions): Promise<any> {\n    // 创建对话框元素\n    const { overlay, dialog } = this.createDialogElements(options);\n\n    // 保存引用\n    this.activeOverlay = overlay;\n    this.activeDialog = dialog;\n\n    // 添加到页面中\n    this.appendDialogToPage();\n\n    // 处理输入框自动聚焦\n    if (options.type === 'prompt') {\n      const $inputEl = $(dialog).find('input, textarea');\n      if ($inputEl.length) {\n        setTimeout(() => $inputEl.trigger('focus'), 100);\n      }\n    }\n\n    return new Promise(resolve => {\n      // 确认按钮点击处理\n      const confirmButton = dialog.querySelector('.primary-button');\n      if (confirmButton) {\n        confirmButton.addEventListener('click', () => {\n          if (options.type === 'prompt') {\n            const inputEl = dialog.querySelector('input, textarea') as HTMLInputElement;\n            const value = inputEl ? inputEl.value : null;\n            this.closeDialog();\n            resolve(value);\n          } else {\n            this.closeDialog();\n            resolve(options.type === 'confirm' ? true : undefined);\n          }\n        });\n      }\n\n      // 取消按钮点击处理\n      const cancelButton = dialog.querySelector('.cancel-button');\n      if (cancelButton) {\n        cancelButton.addEventListener('click', () => {\n          this.closeDialog();\n          resolve(options.type === 'prompt' ? null : false);\n        });\n      }\n\n      // 点击遮罩层关闭（仅对alert有效）\n      if (options.type === 'alert') {\n        overlay.addEventListener('click', e => {\n          if (e.target === overlay) {\n            this.closeDialog();\n            resolve(undefined);\n          }\n        });\n      }\n\n      // 键盘事件处理\n      const handleKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          if (options.type === 'prompt') {\n            const inputEl = dialog.querySelector('input, textarea') as HTMLInputElement;\n            const value = inputEl ? inputEl.value : null;\n            this.closeDialog();\n            resolve(value);\n          } else if (options.type === 'confirm') {\n            this.closeDialog();\n            resolve(true);\n          } else {\n            // alert\n            this.closeDialog();\n            resolve(undefined);\n          }\n          document.removeEventListener('keydown', handleKeyDown);\n        } else if (e.key === 'Escape') {\n          e.preventDefault();\n          this.closeDialog();\n          resolve(options.type === 'prompt' ? null : false);\n          document.removeEventListener('keydown', handleKeyDown);\n        }\n      };\n      document.addEventListener('keydown', handleKeyDown);\n    });\n  }\n\n  /**\n   * 创建对话框元素\n   */\n  private createDialogElements(options: DialogOptions): { overlay: HTMLElement; dialog: HTMLElement } {\n    // 创建遮罩层\n    const $overlay = $('<div>').addClass('custom-dialog-overlay');\n\n    // 创建对话框\n    const $dialog = $('<div>').addClass(`custom-dialog ${options.className || ''}`);\n\n    // 创建标题\n    const $header = $('<div>').addClass('dialog-header');\n    const $title = $('<h3>')\n      .addClass('dialog-title')\n      .text(options.title || '');\n    $header.append($title);\n    $dialog.append($header);\n\n    // 创建内容\n    const $body = $('<div>').addClass('dialog-body');\n\n    // 添加消息\n    const $message = $('<div>').text(options.message);\n    $body.append($message);\n\n    // 如果是prompt，添加输入框\n    if (options.type === 'prompt') {\n      const $inputContainer = $('<div>').addClass('dialog-input-container');\n      const $input = $(options.inputType === 'textarea' ? '<textarea>' : '<input>');\n\n      if (options.inputType !== 'textarea') {\n        $input.attr('type', options.inputType || 'text');\n      }\n\n      if (options.inputValue) {\n        $input.val(options.inputValue);\n      }\n\n      if (options.inputPlaceholder) {\n        $input.attr('placeholder', options.inputPlaceholder);\n      }\n\n      $inputContainer.append($input);\n      $body.append($inputContainer);\n    }\n\n    $dialog.append($body);\n\n    // 创建按钮区域\n    const $footer = $('<div>').addClass('dialog-footer');\n\n    // 根据类型添加不同的按钮\n    if (options.type === 'confirm' || options.type === 'prompt') {\n      const $cancelButton = $('<button>')\n        .addClass('dialog-button cancel-button')\n        .text(options.cancelText || '取消');\n      $footer.append($cancelButton);\n    }\n\n    const $confirmButton = $('<button>')\n      .addClass('dialog-button primary-button')\n      .text(options.confirmText || '确定');\n    $footer.append($confirmButton);\n\n    $dialog.append($footer);\n    $overlay.append($dialog);\n\n    return { overlay: $overlay[0], dialog: $dialog[0] };\n  }\n\n  /**\n   * 显示朋友圈评论/点赞对话框\n   */\n  public showCommentDialog(): Promise<{ type: 'like' | 'comment'; content?: string } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('comment-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>互动</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"comment-text\">评论内容</label>\n            <textarea id=\"comment-text\" placeholder=\"说点什么...\" rows=\"3\"></textarea>\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button cancel-btn\">取消</button>\n          <button class=\"dialog-button like-btn\">点赞</button>\n          <button class=\"dialog-button confirm-btn\">发送</button>\n        </div>\n      `;\n\n          const $dialog = $(this.activeDialog!);\n          const $cancelBtn = $dialog.find('.cancel-btn');\n          const $likeBtn = $dialog.find('.like-btn');\n          const $confirmBtn = $dialog.find('.confirm-btn');\n          const $commentText = $dialog.find('#comment-text');\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleLike = () => {\n            this.closeDialog();\n            resolve({ type: 'like' });\n          };\n\n          const handleComment = () => {\n            const content = $commentText.val() as string;\n            if (!content) {\n              // 在输入框上显示错误提示，而不是弹出新的alert\n              $commentText.css('borderColor', '#ff4444');\n              $commentText.attr('placeholder', '请输入评论内容');\n              $commentText.trigger('focus');\n              return;\n            }\n            this.closeDialog();\n            resolve({ type: 'comment', content });\n          };\n\n          $cancelBtn.on('click', handleCancel);\n          $likeBtn.on('click', handleLike);\n          $confirmBtn.on('click', handleComment);\n\n          // 键盘事件处理\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && e.ctrlKey) {\n              // Ctrl+Enter 发送评论\n              e.preventDefault();\n              handleComment();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到文本框\n          setTimeout(() => {\n            $commentText.trigger('focus');\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示转账对话框\n   */\n  public showTransferDialog(): Promise<{ amount: string; note: string } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('transfer-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>转账</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"transfer-amount\">转账金额 *</label>\n            <input type=\"number\" id=\"transfer-amount\" placeholder=\"请输入转账金额\" step=\"0.01\" min=\"0.01\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"transfer-note\">转账备注</label>\n            <input type=\"text\" id=\"transfer-note\" placeholder=\"请输入转账备注（可选）\">\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button cancel-btn\">取消</button>\n          <button class=\"dialog-button confirm-btn\">确认转账</button>\n        </div>\n      `;\n\n          const $dialog = $(this.activeDialog!);\n          const $cancelBtn = $dialog.find('.cancel-btn');\n          const $confirmBtn = $dialog.find('.confirm-btn');\n          const $amountInput = $dialog.find('#transfer-amount');\n          const $noteInput = $dialog.find('#transfer-note');\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            const amount = $amountInput.val() as string;\n            const note = $noteInput.val() as string;\n\n            if (!amount || parseFloat(amount) <= 0) {\n              // 在输入框上显示错误提示，而不是弹出新的alert\n              $amountInput.css('borderColor', '#ff4444');\n              $amountInput.attr('placeholder', '请输入有效的转账金额');\n              $amountInput.trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({ amount: parseFloat(amount).toFixed(2), note: note || '' });\n          };\n\n          $cancelBtn.on('click', handleCancel);\n          $confirmBtn.on('click', handleConfirm);\n\n          // 回车键确认\n          $(document).on('keydown.transfer-dialog', (e: any) => {\n            if (e.key === 'Enter') {\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              $(document).off('keydown.transfer-dialog');\n            }\n          });\n\n          // 添加到手机屏幕容器内\n          $(this.activeOverlay!).append(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到金额输入框\n          setTimeout(() => {\n            $amountInput.trigger('focus');\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示红包对话框\n   */\n  public showRedPacketDialog(): Promise<{ amount: string; note: string } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('red-packet-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>🧧 发送红包</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"red-packet-amount\">红包金额 *</label>\n            <input type=\"number\" id=\"red-packet-amount\" placeholder=\"请输入红包金额\" step=\"0.01\" min=\"0.01\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"red-packet-note\">红包祝福语</label>\n            <input type=\"text\" id=\"red-packet-note\" placeholder=\"恭喜发财，大吉大利！\" value=\"恭喜发财，大吉大利！\">\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button cancel-btn\">取消</button>\n          <button class=\"dialog-button confirm-btn\">发送红包</button>\n        </div>\n      `;\n\n          const $dialog = $(this.activeDialog!);\n          const $cancelBtn = $dialog.find('.cancel-btn');\n          const $confirmBtn = $dialog.find('.confirm-btn');\n          const $amountInput = $dialog.find('#red-packet-amount');\n          const $noteInput = $dialog.find('#red-packet-note');\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            const amount = $amountInput.val() as string;\n            const note = $noteInput.val() as string;\n\n            if (!amount || parseFloat(amount) <= 0) {\n              // 在输入框上显示错误提示，而不是弹出新的alert\n              $amountInput.css('borderColor', '#ff4444');\n              $amountInput.attr('placeholder', '请输入有效的红包金额');\n              $amountInput.trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({ amount: parseFloat(amount).toFixed(2), note: note || '恭喜发财，大吉大利！' });\n          };\n\n          $cancelBtn.on('click', handleCancel);\n          $confirmBtn.on('click', handleConfirm);\n\n          // 回车键确认\n          $(document).on('keydown.red-packet-dialog', (e: any) => {\n            if (e.key === 'Enter') {\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              $(document).off('keydown.red-packet-dialog');\n            }\n          });\n\n          // 添加到手机屏幕容器内\n          $(this.activeOverlay!).append(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到金额输入框\n          setTimeout(() => {\n            $amountInput.trigger('focus');\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示礼物对话框\n   */\n  public showGiftDialog(): Promise<{ name: string; price?: string } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('gift-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>🎁 发送礼物</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"gift-name\">礼物名称 *</label>\n            <input type=\"text\" id=\"gift-name\" placeholder=\"请输入礼物名称\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"gift-price\">礼物价格</label>\n            <input type=\"number\" id=\"gift-price\" placeholder=\"请输入价格（可选）\" step=\"0.01\" min=\"0\">\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button cancel-btn\">取消</button>\n          <button class=\"dialog-button confirm-btn\">发送礼物</button>\n        </div>\n      `;\n\n          const cancelBtn = this.activeDialog!.querySelector('.cancel-btn') as HTMLButtonElement;\n          const confirmBtn = this.activeDialog!.querySelector('.confirm-btn') as HTMLButtonElement;\n          const nameInput = this.activeDialog!.querySelector('#gift-name') as HTMLInputElement;\n          const priceInput = this.activeDialog!.querySelector('#gift-price') as HTMLInputElement;\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            const name = nameInput.value.trim();\n            const price = priceInput.value.trim();\n\n            if (!name) {\n              // 在输入框上显示错误提示，而不是弹出新的alert\n              $(nameInput).css('borderColor', '#ff4444');\n              $(nameInput).attr('placeholder', '请输入礼物名称');\n              $(nameInput).trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({\n              name,\n              price: price && parseFloat(price) > 0 ? parseFloat(price).toFixed(2) : undefined,\n            });\n          };\n\n          cancelBtn.addEventListener('click', handleCancel);\n          confirmBtn.addEventListener('click', handleConfirm);\n\n          // 回车键确认\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter') {\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到名称输入框\n          setTimeout(() => {\n            $(nameInput).trigger('focus');\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示自定义输入对话框（替代系统prompt）\n   */\n  public showInputDialog(\n    title: string,\n    label: string,\n    defaultValue: string = '',\n    placeholder: string = '',\n    inputType: 'text' | 'url' | 'email' = 'text',\n  ): Promise<string | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('input-dialog');\n\n          this.activeDialog!.innerHTML = `\n            <div class=\"dialog-header\">\n              <h3>${title}</h3>\n            </div>\n            <div class=\"dialog-body\">\n              <div class=\"form-group\">\n                <label for=\"input-field\">${label}</label>\n                <input type=\"${inputType}\" id=\"input-field\" placeholder=\"${placeholder}\" value=\"${defaultValue}\">\n              </div>\n            </div>\n            <div class=\"dialog-footer\">\n              <button class=\"dialog-button cancel-btn\">取消</button>\n              <button class=\"dialog-button confirm-btn\">确定</button>\n            </div>\n          `;\n\n          const $dialog = $(this.activeDialog!);\n          const $cancelBtn = $dialog.find('.cancel-btn');\n          const $confirmBtn = $dialog.find('.confirm-btn');\n          const $inputField = $dialog.find('#input-field');\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            const value = $inputField.val() as string;\n            this.closeDialog();\n            resolve(value);\n          };\n\n          $cancelBtn.on('click', handleCancel);\n          $confirmBtn.on('click', handleConfirm);\n\n          // 回车键确认\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter') {\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到输入框并选中默认值\n          setTimeout(() => {\n            $inputField.trigger('focus');\n            if (defaultValue) {\n              $inputField.trigger('select');\n            }\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示语音输入对话框\n   */\n  public showVoiceDialog(): Promise<{ text: string; duration: number } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('voice-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>🎤 语音消息</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"voice-text\">语音内容</label>\n            <textarea id=\"voice-text\" placeholder=\"请输入语音内容...\" rows=\"3\"></textarea>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"voice-duration\">语音时长（秒）</label>\n            <input type=\"number\" id=\"voice-duration\" placeholder=\"请输入秒数\" min=\"1\" max=\"60\" value=\"3\">\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button cancel-btn\">取消</button>\n          <button class=\"dialog-button confirm-btn\">发送</button>\n        </div>\n      `;\n\n          const cancelBtn = this.activeDialog!.querySelector('.cancel-btn') as HTMLButtonElement;\n          const confirmBtn = this.activeDialog!.querySelector('.confirm-btn') as HTMLButtonElement;\n          const textArea = this.activeDialog!.querySelector('#voice-text') as HTMLTextAreaElement;\n          const durationInput = this.activeDialog!.querySelector('#voice-duration') as HTMLInputElement;\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            const text = textArea.value.trim();\n            const durationStr = durationInput.value.trim();\n\n            if (!text) {\n              // 在文本框上显示错误提示，而不是弹出新的alert\n              $(textArea).css('borderColor', '#ff4444');\n              $(textArea).attr('placeholder', '请输入语音内容');\n              $(textArea).trigger('focus');\n              return;\n            }\n\n            const duration = parseInt(durationStr, 10);\n            if (!durationStr || isNaN(duration) || duration <= 0 || duration > 60) {\n              // 在输入框上显示错误提示，而不是弹出新的alert\n              $(durationInput).css('borderColor', '#ff4444');\n              $(durationInput).attr('placeholder', '请输入有效的语音时长（1-60秒）');\n              $(durationInput).trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({ text, duration });\n          };\n\n          cancelBtn.addEventListener('click', handleCancel);\n          confirmBtn.addEventListener('click', handleConfirm);\n\n          // 回车键确认（在textarea中使用Ctrl+Enter）\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && e.ctrlKey) {\n              e.preventDefault();\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到文本框\n          setTimeout(() => {\n            $(textArea).trigger('focus');\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示礼物/转账接收对话框\n   */\n  public showReceiveDialog(type: 'gift' | 'transfer', data: any): Promise<'accept' | 'reject' | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          // 创建基础对话框元素\n          this.createBaseDialogElements('receive-dialog');\n\n          const isGift = type === 'gift';\n          const title = isGift ? '收到礼物' : '收到转账';\n          const icon = isGift ? '🎁' : '💰';\n\n          let content = '';\n          if (isGift) {\n            content = `\n          <div class=\"receive-content\">\n            <div class=\"receive-icon\">${icon}</div>\n            <div class=\"receive-info\">\n              <div class=\"receive-title\">${data.name}</div>\n              ${data.price ? `<div class=\"receive-price\">¥${data.price}</div>` : ''}\n              ${data.note ? `<div class=\"receive-note\">${data.note}</div>` : ''}\n            </div>\n          </div>\n        `;\n          } else {\n            content = `\n          <div class=\"receive-content\">\n            <div class=\"receive-icon\">${icon}</div>\n            <div class=\"receive-info\">\n              <div class=\"receive-title\">转账金额</div>\n              <div class=\"receive-price\">¥${data.amount}</div>\n              ${data.note ? `<div class=\"receive-note\">${data.note}</div>` : ''}\n            </div>\n          </div>\n        `;\n          }\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>${title}</h3>\n        </div>\n        <div class=\"dialog-body\">\n          ${content}\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-button reject-btn\">拒绝</button>\n          <button class=\"dialog-button accept-btn\">接收</button>\n        </div>\n      `;\n\n          const rejectBtn = this.activeDialog!.querySelector('.reject-btn') as HTMLButtonElement;\n          const acceptBtn = this.activeDialog!.querySelector('.accept-btn') as HTMLButtonElement;\n\n          const handleReject = () => {\n            this.closeDialog();\n            resolve('reject');\n          };\n\n          const handleAccept = () => {\n            this.closeDialog();\n            resolve('accept');\n          };\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          rejectBtn.addEventListener('click', handleReject);\n          acceptBtn.addEventListener('click', handleAccept);\n\n          // 键盘事件处理\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter') {\n              // Enter键接受转账/礼物\n              e.preventDefault();\n              handleAccept();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n        }),\n    );\n  }\n\n  /**\n   * 显示朋友圈发布对话框\n   */\n  public showMomentDialog(defaultTime?: string): Promise<{\n    text: string;\n    image: string;\n    image_type: 'none' | 'url' | 'desc';\n    image_desc: string;\n    date: string;\n    time: string;\n  } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          const currentDate = window.currentGameDate || new Date();\n          const defaultDateTime =\n            defaultTime ||\n            `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate\n              .getDate()\n              .toString()\n              .padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate\n              .getMinutes()\n              .toString()\n              .padStart(2, '0')}`;\n\n          // 创建基础对话框元素\n          this.createBaseDialogElements('moment-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>发布朋友圈</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"moment-text\">这一刻的想法...</label>\n            <textarea id=\"moment-text\" placeholder=\"分享你的想法...\" rows=\"3\"></textarea>\n          </div>\n\n          <div class=\"form-group\">\n            <label>📷 图片类型</label>\n            <div class=\"radio-group\">\n              <label><input type=\"radio\" name=\"image-type\" value=\"desc\" checked> 图片描述</label>\n              <label><input type=\"radio\" name=\"image-type\" value=\"url\"> 图片链接</label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"image-content\" id=\"image-content-label\">图片描述（可选）</label>\n            <input type=\"text\" id=\"image-content\" placeholder=\"请输入图片描述...（可选）\">\n          </div>\n\n          <div class=\"form-group url-desc-group\" style=\"display: none;\">\n            <label for=\"image-desc\">图片描述（供AI识别，可选）</label>\n            <input type=\"text\" id=\"image-desc\" placeholder=\"描述图片内容，仅供AI识别...（可选）\">\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"moment-datetime\">发布时间</label>\n            <input type=\"text\" id=\"moment-datetime\" value=\"${defaultDateTime}\" placeholder=\"YYYY-MM-DD HH:MM\">\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-btn dialog-btn-cancel\">取消</button>\n          <button class=\"dialog-btn dialog-btn-confirm\">发布</button>\n        </div>\n      `;\n\n          // 添加事件监听器\n          const imageTypeRadios = this.activeDialog!.querySelectorAll(\n            'input[name=\"image-type\"]',\n          ) as NodeListOf<HTMLInputElement>;\n          const imageContentLabel = this.activeDialog!.querySelector('#image-content-label') as HTMLElement;\n          const imageContentInput = this.activeDialog!.querySelector('#image-content') as HTMLInputElement;\n          const urlDescGroup = this.activeDialog!.querySelector('.url-desc-group') as HTMLElement;\n\n          // 初始化checkbox按钮样式（如果有其他checkbox的话）\n          this.initializeCheckboxButtons();\n\n          // 图片类型切换\n          imageTypeRadios.forEach(radio => {\n            radio.addEventListener('change', () => {\n              const isDesc = radio.value === 'desc';\n              imageContentLabel.textContent = isDesc ? '图片描述（可选）' : '图片链接（可选）';\n              imageContentInput.placeholder = isDesc ? '请输入图片描述...（可选）' : '请输入图片链接...（可选）';\n              urlDescGroup.style.display = isDesc ? 'none' : 'block';\n            });\n          });\n\n          // 按钮事件\n          const cancelBtn = this.activeDialog!.querySelector('.dialog-btn-cancel') as HTMLElement;\n          const confirmBtn = this.activeDialog!.querySelector('.dialog-btn-confirm') as HTMLElement;\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            // 检查对话框是否还存在\n            if (!this.activeDialog) {\n              return;\n            }\n\n            const textArea = this.activeDialog!.querySelector('#moment-text') as HTMLTextAreaElement;\n            const imageTypeInput = this.activeDialog!.querySelector(\n              'input[name=\"image-type\"]:checked',\n            ) as HTMLInputElement;\n            const imageContentField = this.activeDialog!.querySelector('#image-content') as HTMLInputElement;\n            const imageDescField = this.activeDialog!.querySelector('#image-desc') as HTMLInputElement;\n            const datetimeInput = this.activeDialog!.querySelector('#moment-datetime') as HTMLInputElement;\n\n            if (!textArea || !datetimeInput) {\n              return;\n            }\n\n            const text = textArea.value;\n            const imageContent = imageContentField ? imageContentField.value.trim() : '';\n            const hasImage = imageContent !== '';\n            const imageType = hasImage && imageTypeInput ? (imageTypeInput.value as 'url' | 'desc') : 'none';\n            const imageDesc = imageType === 'url' && imageDescField ? imageDescField.value.trim() : imageContent;\n            const datetime = datetimeInput.value;\n\n            // 验证输入\n            if ((!text || text.trim() === '') && (!imageContent || imageContent.trim() === '')) {\n              // 在文本框上显示错误提示，而不是弹出新的alert\n              $(textArea).css('borderColor', '#ff4444');\n              $(textArea).attr('placeholder', '请输入朋友圈内容或添加图片');\n              $(textArea).trigger('focus');\n              return;\n            }\n\n            // 解析时间\n            const datetimeMatch = datetime.match(/^(\\d{4}-\\d{2}-\\d{2})\\s+(\\d{2}:\\d{2})$/);\n            if (!datetimeMatch) {\n              // 在时间输入框上显示错误提示，而不是弹出新的alert\n              $(datetimeInput).css('borderColor', '#ff4444');\n              $(datetimeInput).attr('placeholder', '格式：YYYY-MM-DD HH:MM');\n              $(datetimeInput).trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({\n              text: text.trim(),\n              image: imageContent.trim(),\n              image_type: imageType,\n              image_desc: imageDesc.trim(),\n              date: datetimeMatch[1],\n              time: datetimeMatch[2],\n            });\n          };\n\n          cancelBtn.addEventListener('click', handleCancel);\n          confirmBtn.addEventListener('click', handleConfirm);\n\n          // 键盘事件处理\n          const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && e.ctrlKey) {\n              // Ctrl+Enter 发布朋友圈\n              e.preventDefault();\n              handleConfirm();\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到文本框\n          setTimeout(() => {\n            if (this.activeDialog) {\n              const $textArea = $(this.activeDialog).find('#moment-text');\n              if ($textArea.length) {\n                $textArea.trigger('focus');\n              }\n            }\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 显示时间跳跃对话框\n   */\n  public showTimeJumpDialog(defaultTime?: string): Promise<{\n    date: string;\n    time: string;\n    description: string;\n  } | null> {\n    return this.safeShowDialog(\n      () =>\n        new Promise(resolve => {\n          const currentDate = window.currentGameDate || new Date();\n          const defaultDateTime =\n            defaultTime ||\n            `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate\n              .getDate()\n              .toString()\n              .padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate\n              .getMinutes()\n              .toString()\n              .padStart(2, '0')}`;\n\n          // 创建基础对话框元素\n          this.createBaseDialogElements('time-jump-dialog');\n\n          this.activeDialog!.innerHTML = `\n        <div class=\"dialog-header\">\n          <h3>时间跳跃</h3>\n        </div>\n        <div class=\"dialog-body\">\n          <div class=\"form-group\">\n            <label for=\"jump-datetime\">跳跃到时间</label>\n            <input type=\"text\" id=\"jump-datetime\" value=\"${defaultDateTime}\" placeholder=\"YYYY-MM-DD HH:MM\">\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"event-description\">📝 记录这段时间发生了什么</label>\n            <textarea id=\"event-description\" placeholder=\"描述这段时间发生的事情...（可选）\" rows=\"3\"></textarea>\n          </div>\n        </div>\n        <div class=\"dialog-footer\">\n          <button class=\"dialog-btn dialog-btn-cancel\">取消</button>\n          <button class=\"dialog-btn dialog-btn-confirm\">跳跃</button>\n        </div>\n      `;\n\n          // 初始化checkbox按钮样式（如果有其他checkbox的话）\n          this.initializeCheckboxButtons();\n\n          // 按钮事件\n          const cancelBtn = this.activeDialog!.querySelector('.dialog-btn-cancel') as HTMLElement;\n          const confirmBtn = this.activeDialog!.querySelector('.dialog-btn-confirm') as HTMLElement;\n\n          const handleCancel = () => {\n            this.closeDialog();\n            resolve(null);\n          };\n\n          const handleConfirm = () => {\n            // 检查对话框是否还存在\n            if (!this.activeDialog) {\n              return;\n            }\n\n            const datetimeInput = this.activeDialog!.querySelector('#jump-datetime') as HTMLInputElement;\n            const descriptionInput = this.activeDialog!.querySelector('#event-description') as HTMLTextAreaElement;\n\n            if (!datetimeInput) {\n              return;\n            }\n\n            const datetime = datetimeInput.value;\n            const description = descriptionInput ? descriptionInput.value.trim() : '';\n\n            // 解析时间\n            const datetimeMatch = datetime.match(/^(\\d{4}-\\d{2}-\\d{2})\\s+(\\d{2}:\\d{2})$/);\n            if (!datetimeMatch) {\n              // 在时间输入框上显示错误提示，而不是弹出新的alert\n              $(datetimeInput).css('borderColor', '#ff4444');\n              $(datetimeInput).attr('placeholder', '格式：YYYY-MM-DD HH:MM');\n              $(datetimeInput).trigger('focus');\n              return;\n            }\n\n            this.closeDialog();\n            resolve({\n              date: datetimeMatch[1],\n              time: datetimeMatch[2],\n              description: description, // 可以为空字符串\n            });\n          };\n\n          cancelBtn.addEventListener('click', handleCancel);\n          confirmBtn.addEventListener('click', handleConfirm);\n\n          // 键盘事件处理\n          const handleKeyDown = (e: KeyboardEvent) => {\n            // 检查对话框是否还存在\n            if (!this.activeDialog) {\n              document.removeEventListener('keydown', handleKeyDown);\n              return;\n            }\n\n            if (e.key === 'Enter') {\n              // Enter键确认时间跳转\n              e.preventDefault();\n              handleConfirm();\n              document.removeEventListener('keydown', handleKeyDown);\n            } else if (e.key === 'Escape') {\n              handleCancel();\n              document.removeEventListener('keydown', handleKeyDown);\n            }\n          };\n          document.addEventListener('keydown', handleKeyDown);\n\n          // 添加到手机屏幕容器内\n          this.activeOverlay!.appendChild(this.activeDialog!);\n          this.appendDialogToPage();\n\n          // 聚焦到时间输入框\n          setTimeout(() => {\n            if (this.activeDialog) {\n              const $timeInput = $(this.activeDialog).find('#jump-datetime');\n              if ($timeInput.length) {\n                $timeInput.trigger('focus');\n                $timeInput.trigger('select');\n              }\n            }\n          }, 100);\n        }),\n    );\n  }\n\n  /**\n   * 强制清理所有对话框元素\n   */\n  private forceCleanupDialogs(): void {\n    // 清理所有可能残留的对话框元素\n    const $container = $('.phone-screen').length ? $('.phone-screen') : $('body');\n\n    // 使用通用选择器清理所有对话框相关元素\n    const selectors = [\n      '[class*=\"dialog-overlay\"]',\n      '[class*=\"dialog\"]',\n      '.custom-dialog-overlay',\n      '.mobile-dialog-overlay',\n      '.custom-dialog',\n      '.mobile-dialog',\n    ];\n\n    selectors.forEach(selector => {\n      $container.find(selector).each((_, element) => {\n        try {\n          $(element).remove();\n        } catch (error) {\n          console.warn('移除对话框元素时出错:', error);\n        }\n      });\n    });\n\n    // 清理引用\n    this.activeDialog = null;\n    this.activeOverlay = null;\n  }\n\n  /**\n   * 关闭对话框\n   */\n  private closeDialog(): void {\n    this.forceCleanupDialogs();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * 事件管理器\n * 统一管理全局事件监听器和定时器，防止内存泄漏\n */\n\nexport class EventManager {\n  private listeners: Array<() => void> = [];\n  private timers: Set<number> = new Set();\n  private intervals: Set<number> = new Set();\n  private isDestroyed: boolean = false;\n\n  /**\n   * 添加全局事件监听器\n   * @param event 事件名称\n   * @param handler 事件处理函数\n   * @returns 清理函数\n   */\n  addGlobalListener(event: string, handler: Function): () => void {\n    if (this.isDestroyed) {\n      console.warn('[EventManager] 尝试在已销毁的管理器上添加监听器');\n      return () => {};\n    }\n\n    const cleanup = (window as any).eventOn(event, handler);\n    if (cleanup && typeof cleanup === 'function') {\n      this.listeners.push(cleanup);\n      return cleanup;\n    } else {\n      console.warn(`[EventManager] 无法为事件 ${event} 创建清理函数`);\n      return () => {};\n    }\n  }\n\n  /**\n   * 添加DOM事件监听器\n   * @param element DOM元素\n   * @param event 事件类型\n   * @param handler 事件处理函数\n   * @param options 事件选项\n   */\n  addDOMListener(\n    element: Element | Window | Document,\n    event: string,\n    handler: EventListener,\n    options?: boolean | AddEventListenerOptions,\n  ): void {\n    if (this.isDestroyed) {\n      console.warn('[EventManager] 尝试在已销毁的管理器上添加DOM监听器');\n      return;\n    }\n\n    element.addEventListener(event, handler, options);\n\n    // 创建清理函数\n    const cleanup = () => {\n      element.removeEventListener(event, handler, options);\n    };\n\n    this.listeners.push(cleanup);\n  }\n\n  /**\n   * 安全的setTimeout\n   * @param callback 回调函数\n   * @param delay 延迟时间\n   * @returns 定时器ID\n   */\n  setTimeout(callback: Function, delay: number): number {\n    if (this.isDestroyed) {\n      console.warn('[EventManager] 尝试在已销毁的管理器上创建定时器');\n      return -1;\n    }\n\n    const timerId = window.setTimeout(() => {\n      this.timers.delete(timerId);\n      try {\n        callback();\n      } catch (error) {\n        console.error('[EventManager] 定时器回调执行错误:', error);\n      }\n    }, delay);\n\n    this.timers.add(timerId);\n    return timerId;\n  }\n\n  /**\n   * 安全的setInterval\n   * @param callback 回调函数\n   * @param interval 间隔时间\n   * @returns 定时器ID\n   */\n  setInterval(callback: Function, interval: number): number {\n    if (this.isDestroyed) {\n      console.warn('[EventManager] 尝试在已销毁的管理器上创建间隔定时器');\n      return -1;\n    }\n\n    const intervalId = window.setInterval(() => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('[EventManager] 间隔定时器回调执行错误:', error);\n      }\n    }, interval);\n\n    this.intervals.add(intervalId);\n    return intervalId;\n  }\n\n  /**\n   * 清除指定的定时器\n   * @param timerId 定时器ID\n   */\n  clearTimeout(timerId: number): void {\n    if (this.timers.has(timerId)) {\n      window.clearTimeout(timerId);\n      this.timers.delete(timerId);\n    }\n  }\n\n  /**\n   * 清除指定的间隔定时器\n   * @param intervalId 间隔定时器ID\n   */\n  clearInterval(intervalId: number): void {\n    if (this.intervals.has(intervalId)) {\n      window.clearInterval(intervalId);\n      this.intervals.delete(intervalId);\n    }\n  }\n\n  /**\n   * 清理所有监听器和定时器\n   */\n  cleanup(): void {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    // 清理事件监听器\n    this.listeners.forEach(cleanup => {\n      try {\n        cleanup();\n      } catch (error) {\n        console.error('[EventManager] 清理监听器时出错:', error);\n      }\n    });\n    this.listeners = [];\n\n    // 清理定时器\n    this.timers.forEach(timerId => {\n      window.clearTimeout(timerId);\n    });\n    this.timers.clear();\n\n    // 清理间隔定时器\n    this.intervals.forEach(intervalId => {\n      window.clearInterval(intervalId);\n    });\n    this.intervals.clear();\n\n    this.isDestroyed = true;\n    //console.log('[EventManager] 所有资源已清理');\n  }\n\n  /**\n   * 获取当前状态信息\n   */\n  getStatus(): {\n    listenersCount: number;\n    timersCount: number;\n    intervalsCount: number;\n    isDestroyed: boolean;\n  } {\n    return {\n      listenersCount: this.listeners.length,\n      timersCount: this.timers.size,\n      intervalsCount: this.intervals.size,\n      isDestroyed: this.isDestroyed,\n    };\n  }\n\n  /**\n   * 检查是否已销毁\n   */\n  isDestroyed_(): boolean {\n    return this.isDestroyed;\n  }\n}\n\n/**\n * 全局事件管理器实例\n * 用于管理应用级别的事件监听器\n */\nexport const globalEventManager = new EventManager();\n\n/**\n * 在页面卸载时自动清理全局事件管理器\n */\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', () => {\n    globalEventManager.cleanup();\n  });\n}\n","export interface TavernHelperBridge {\n  getCharData(): Promise<{ name: string }>;\n  getCharAvatarPath(): Promise<string>;\n  getLastMessageId(): Promise<number | null>;\n  getChatMessages(id: number): Promise<Array<{ message: string }>>;\n  setChatMessage(content: string, id: number, options: { refresh: 'none' }): Promise<void>;\n  generate(options: { user_input: string; should_stream: boolean }): Promise<AsyncGenerator<string, void, unknown>>;\n}\n\n// 使用类型断言来处理全局对象\ndeclare global {\n  interface Window {\n    currentGameDate: Date;\n  }\n}\n\n// 为TavernHelper创建一个访问器函数\nexport function getTavernHelper(): TavernHelperBridge {\n  return (window.parent as any).TavernHelper;\n}\n\nexport type Sender = 'me' | 'them';\n\nexport interface BaseLogEntry {\n  recalled?: boolean;\n  recalled_content?: any;\n  recalled_timestamp?: string;\n}\n\nexport interface BaseChatMessage extends BaseLogEntry {\n  id: string;\n  sender: Sender;\n}\n\n// 文本消息\nexport interface TextMessage extends BaseChatMessage {\n  type: 'message';\n  content: string;\n  isSystemMessage?: boolean; // 添加系统消息标志\n}\n\nexport interface VoiceMessage extends BaseChatMessage {\n  type: 'voice';\n  content: { text: string; duration: number };\n}\n\nexport interface StickerMessage extends BaseChatMessage {\n  type: 'sticker';\n  content: string; // sticker name/label\n  size?: 'small' | 'medium' | 'large'; // Add size option for stickers\n}\n\nexport interface ImageMessage extends BaseChatMessage {\n  type: 'image';\n  content: { type: 'url' | 'desc'; value: string };\n}\n\nexport interface LocationMessage extends BaseChatMessage {\n  type: 'location';\n  content: string;\n}\n\nexport interface TransferMessage extends BaseChatMessage {\n  type: 'transfer';\n  content: string; // JSON string\n  data: {\n    amount: string;\n    note?: string;\n    status: 'sent' | 'accepted' | 'rejected';\n  };\n}\n\nexport interface FileMessage extends BaseChatMessage {\n  type: 'file';\n  content: string; // filename\n}\n\nexport interface GiftMessage extends BaseChatMessage {\n  type: 'gift';\n  content: string; // JSON string\n  data: {\n    name: string;\n    price?: string;\n    status: 'sent' | 'accepted' | 'rejected';\n  };\n}\n\nexport type ChatEntry =\n  | TextMessage\n  | VoiceMessage\n  | StickerMessage\n  | ImageMessage\n  | LocationMessage\n  | TransferMessage\n  | FileMessage\n  | GiftMessage;\n\nexport interface TimeLogEntry extends BaseLogEntry {\n  type: 'time';\n  content: { date: string; time: string };\n  id?: string; // 添加可选的id字段\n}\n\nexport interface EventLogEntry extends BaseLogEntry {\n  type: 'event';\n  content: { date: string; time: string; description?: string };\n  id?: string; // 添加可选的id字段\n}\n\nexport type SystemEntry = TimeLogEntry | EventLogEntry;\n\nexport interface MomentEntry extends BaseLogEntry {\n  key: 'USER_MOMENT' | 'CHAR_MOMENT';\n  data: {\n    text: string;\n    image: string;\n    image_type: 'url' | 'desc' | 'none';\n    image_desc?: string;\n    date: string;\n    time: string;\n  };\n}\n\nexport interface CommentEntry extends BaseLogEntry {\n  key: 'USER_COMMENT' | 'CHAR_COMMENT';\n  data: {\n    text: string;\n    target_post_id: number;\n  };\n}\n\nexport interface LikeEntry extends BaseLogEntry {\n  key: 'USER_LIKE' | 'CHAR_LIKE';\n  data: {\n    target_post_id: number;\n  };\n}\n\nexport type MomentRelatedEntry = MomentEntry | CommentEntry | LikeEntry;\n\nexport type LogEntry = ChatEntry | SystemEntry | MomentRelatedEntry;\n\nexport class BLMX_Protocol {\n  public logEntries: LogEntry[] = [];\n  private messageId: number | null = null;\n  private readonly charId: string;\n  private readonly LOG_START_TAG = '===BLMX_LOG_BEGIN===';\n  private readonly LOG_END_TAG = '===BLMX_LOG_END===';\n\n  constructor(charId: string) {\n    this.charId = charId;\n  }\n\n  // 获取角色ID\n  getCharId(): string {\n    return this.charId;\n  }\n\n  async initialize(): Promise<boolean> {\n    // console.log('[BLMX] Initializing and scanning for chat history...');\n    const lastMessageId = await getTavernHelper().getLastMessageId();\n\n    if (lastMessageId === null) {\n      // console.warn('[BLMX] No messages found. Starting fresh at message ID 0.');\n      this.messageId = 0;\n      this.logEntries = [];\n      await this.persistLogToStorage();\n      return true;\n    }\n\n    let latestUiMessage: { id: number; content: string } | null = null;\n    const previousUiMessages: { id: number; content: string }[] = [];\n\n    for (let i = lastMessageId; i >= 0; i--) {\n      try {\n        const msg = (await getTavernHelper().getChatMessages(i))[0];\n        if (msg && msg.message && msg.message.includes(this.LOG_START_TAG)) {\n          if (!latestUiMessage) {\n            latestUiMessage = { id: i, content: msg.message };\n          } else {\n            previousUiMessages.push({ id: i, content: msg.message });\n          }\n        }\n      } catch (error) {\n        // Ignore errors, likely message not found\n      }\n    }\n\n    if (!latestUiMessage) {\n      // console.log('[BLMX] No UI log found. Creating a new one in the latest message.');\n      this.messageId = lastMessageId;\n      this.logEntries = [];\n      await this.persistLogToStorage();\n      return true;\n    }\n\n    // console.log(`[BLMX] Found latest UI log in message ${latestUiMessage.id}. Consolidating...`);\n    this.messageId = latestUiMessage.id;\n    const consolidatedLogParts: string[] = [];\n\n    const latestLogStartIndex = latestUiMessage.content.indexOf(this.LOG_START_TAG);\n    const latestLogEndIndex = latestUiMessage.content.indexOf(this.LOG_END_TAG);\n    if (latestLogStartIndex !== -1 && latestLogEndIndex !== -1) {\n      const logPart = latestUiMessage.content\n        .slice(latestLogStartIndex + this.LOG_START_TAG.length, latestLogEndIndex)\n        .trim();\n      if (logPart) consolidatedLogParts.push(logPart);\n    }\n\n    for (const prevMsg of previousUiMessages) {\n      const prevLogStartIndex = prevMsg.content.indexOf(this.LOG_START_TAG);\n      const prevLogEndIndex = prevMsg.content.indexOf(this.LOG_END_TAG);\n      if (prevLogStartIndex !== -1 && prevLogEndIndex !== -1) {\n        const logPart = prevMsg.content.slice(prevLogStartIndex + this.LOG_START_TAG.length, prevLogEndIndex).trim();\n        if (logPart) consolidatedLogParts.unshift(logPart);\n\n        const cleanedContent =\n          prevMsg.content.substring(0, prevLogStartIndex) +\n          prevMsg.content.substring(prevLogEndIndex + this.LOG_END_TAG.length);\n        await getTavernHelper().setChatMessage(cleanedContent.trim(), prevMsg.id, { refresh: 'none' });\n        // console.log(`[BLMX] Cleaned and moved UI log from message ${prevMsg.id}.`);\n      }\n    }\n\n    const finalLogString = consolidatedLogParts.join('\\n');\n    this._parseLogFromString(finalLogString);\n\n    await this.persistLogToStorage();\n    // console.log(`[BLMX] Consolidated log saved to message ${this.messageId}.`);\n\n    return true;\n  }\n\n  async persistLogToStorage(): Promise<void> {\n    if (this.messageId === null) {\n      console.warn('[BLMX] Cannot save log, message_id not initialized.'); // 保留重要警告\n      return;\n    }\n    try {\n      const logString = this._renderLogToString();\n      const existingMessage = (await getTavernHelper().getChatMessages(this.messageId))[0];\n      const existingContent = existingMessage ? existingMessage.message : '';\n\n      const logStartIndex = existingContent.indexOf(this.LOG_START_TAG);\n      const logEndIndex = existingContent.indexOf(this.LOG_END_TAG);\n\n      const newLogBlock = `${this.LOG_START_TAG}\\n${logString}\\n${this.LOG_END_TAG}`;\n      let fullText: string;\n\n      if (logStartIndex !== -1 && logEndIndex !== -1) {\n        fullText =\n          existingContent.substring(0, logStartIndex) +\n          newLogBlock +\n          existingContent.substring(logEndIndex + this.LOG_END_TAG.length);\n      } else {\n        fullText = existingContent + '\\n' + newLogBlock;\n      }\n\n      await getTavernHelper().setChatMessage(fullText.trim(), this.messageId, { refresh: 'none' });\n    } catch (error) {\n      console.error('Failed to save narrative log to text box:', error);\n    }\n  }\n\n  private _parseLogFromString(logString: string): void {\n    this.logEntries = [];\n    const lines = logString.split('\\n').filter(line => line.trim() !== '');\n\n    lines.forEach(line => {\n      const separatorIndex = line.indexOf(':');\n      if (separatorIndex === -1) return;\n\n      const key = line.substring(0, separatorIndex).trim();\n      const value = line.substring(separatorIndex + 1).trim();\n      try {\n        switch (key) {\n          case 'USER_MOMENT':\n          case 'CHAR_MOMENT':\n          case 'USER_COMMENT':\n          case 'CHAR_COMMENT':\n          case 'USER_LIKE':\n          case 'CHAR_LIKE':\n            try {\n              const data = JSON.parse(value);\n              this.logEntries.push({ key, data } as MomentRelatedEntry);\n            } catch (error) {\n              console.warn('[BLMX] 解析朋友圈数据失败:', value, error);\n            }\n            break;\n          case 'TIME':\n          case 'EVENT_LOG':\n            if (value) {\n              try {\n                const data = JSON.parse(value);\n                // console.log(`[BLMX] 解析${key}数据:`, data);\n\n                // 验证必要字段\n                if (!data.date || !data.time) {\n                  console.warn(`[BLMX] ${key}缺少必要字段:`, data);\n                  // 尝试补充缺失字段\n                  if (!data.date || !data.time) {\n                    const now = new Date();\n                    if (!data.date) {\n                      data.date = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(\n                        now.getDate(),\n                      ).padStart(2, '0')}`;\n                      // console.log(`[BLMX] 为${key}补充日期:`, data.date);\n                    }\n                    if (!data.time) {\n                      data.time = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(\n                        2,\n                        '0',\n                      )}`;\n                      // console.log(`[BLMX] 为${key}补充时间:`, data.time);\n                    }\n                  }\n                }\n\n                const entryType = key === 'TIME' ? 'time' : 'event';\n                const newEntry = { type: entryType, content: data } as SystemEntry;\n                this.logEntries.push(newEntry);\n                // console.log(`[BLMX] 添加${key}条目:`, newEntry);\n\n                const timeDate = new Date(`${data.date} ${data.time}`);\n                if (!isNaN(timeDate.getTime())) {\n                  window.currentGameDate = timeDate;\n                  const timeElement = document.getElementById('current-time');\n                  if (timeElement) {\n                    const timeString = `${window.currentGameDate\n                      .getHours()\n                      .toString()\n                      .padStart(2, '0')}:${window.currentGameDate.getMinutes().toString().padStart(2, '0')}`;\n                    timeElement.textContent = timeString;\n                  }\n                }\n              } catch (error) {\n                console.error(`[BLMX] 解析${key}失败:`, value, error);\n              }\n            } else {\n              // console.warn(`[BLMX] ${key}值为空`);\n            }\n            break;\n          case 'RECALL': {\n            // console.log('[BLMX] 从存储中加载RECALL数据:', value);\n            try {\n              const recallData = JSON.parse(value);\n              const senderToFind: Sender = recallData.sender === 'USER' ? 'me' : 'them';\n\n              // 获取target_text，支持多种可能的属性名\n              const targetText = recallData.target_text || recallData['target text'] || recallData.text || '';\n\n              if (!targetText) {\n                console.warn('[BLMX] RECALL数据缺少目标文本:', recallData);\n                break;\n              }\n\n              // 使用更灵活的查找方法\n              const entryToRecall = this.logEntries\n                .slice()\n                .reverse()\n                .find(e => {\n                  // 必须是有sender和content的消息\n                  if (!('sender' in e) || e.sender !== senderToFind || !('content' in e)) {\n                    return false;\n                  }\n\n                  // 精确匹配\n                  if (e.content === targetText) {\n                    return true;\n                  }\n\n                  // 模糊匹配（去除标点符号和空格后比较）\n                  const normalizeText = (text: string) =>\n                    typeof text === 'string' ? text.replace(/[^\\w\\u4e00-\\u9fa5]/g, '').toLowerCase() : '';\n\n                  if (typeof e.content === 'string') {\n                    // 模糊匹配文本\n                    if (normalizeText(e.content) === normalizeText(targetText)) {\n                      return true;\n                    }\n                    // 包含匹配\n                    if (e.content.includes(targetText) || targetText.includes(e.content)) {\n                      return true;\n                    }\n                  }\n\n                  // 对于复杂内容对象的匹配\n                  if (typeof e.content === 'object' && e.content !== null) {\n                    try {\n                      // 比较序列化后的JSON\n                      if (JSON.stringify(e.content) === targetText) {\n                        return true;\n                      }\n\n                      // 如果是语音消息，比较text字段\n                      if ('text' in e.content) {\n                        const voiceText = (e.content as any).text;\n                        if (voiceText === targetText || normalizeText(voiceText) === normalizeText(targetText)) {\n                          return true;\n                        }\n                      }\n                    } catch (err) {\n                      console.warn('[BLMX] 比较复杂内容失败:', err);\n                    }\n                  }\n\n                  return false;\n                }) as ChatEntry;\n\n              if (entryToRecall) {\n                // console.log('[BLMX] 找到并标记要撤回的消息:', entryToRecall);\n                entryToRecall.recalled = true;\n                entryToRecall.recalled_content = entryToRecall.content;\n                entryToRecall.recalled_timestamp = recallData.timestamp || new Date().toISOString();\n              } else {\n                console.warn('[BLMX] 未找到要撤回的消息:', {\n                  sender: senderToFind,\n                  target_text: targetText,\n                  recall_data: recallData,\n                });\n              }\n            } catch (error) {\n              console.error('[BLMX] 处理RECALL数据失败:', error);\n            }\n            break;\n          }\n          case 'USER':\n          case 'CHAR': {\n            const sender: Sender = key === 'USER' ? 'me' : 'them';\n            const id = `msg-${Date.now()}${Math.random()}-${sender}`;\n\n            const voiceMatch = value.match(/^\\[语音:\\s*({.*})\\]/);\n            if (voiceMatch) {\n              try {\n                const voiceData = JSON.parse(voiceMatch[1]);\n                this.logEntries.push({ id, type: 'voice', sender, content: voiceData });\n                return;\n              } catch (e) {\n                console.error('Failed to parse voice data:', voiceMatch[1], e);\n                // 添加默认语音数据\n                this.logEntries.push({ id, type: 'voice', sender, content: { text: '', duration: 0 } });\n                return;\n              }\n            }\n\n            const stickerMatch = value.match(/^\\[表情:\\s*(.*)\\]/);\n            if (stickerMatch) {\n              this.logEntries.push({ id, type: 'sticker', sender, content: stickerMatch[1] });\n              return;\n            }\n\n            const imageMatch = value.match(/^\\[图片:\\s*(.*)\\]/);\n            if (imageMatch) {\n              try {\n                const imgData = JSON.parse(imageMatch[1]);\n                this.logEntries.push({ id, type: 'image', sender, content: imgData });\n              } catch (e) {\n                this.logEntries.push({\n                  id,\n                  type: 'image',\n                  sender,\n                  content: { type: 'desc', value: imageMatch[1] },\n                });\n              }\n              return;\n            }\n\n            const locationMatch = value.match(/^\\[位置:\\s*(.*)\\]/);\n            if (locationMatch) {\n              this.logEntries.push({ id, type: 'location', sender, content: locationMatch[1] });\n              return;\n            }\n\n            const transferMatch = value.match(/^\\[转账:\\s*(.*)\\]/);\n            if (transferMatch) {\n              this.logEntries.push({\n                id,\n                type: 'transfer',\n                sender,\n                content: transferMatch[1],\n                data: (() => {\n                  try {\n                    return JSON.parse(transferMatch[1]);\n                  } catch (e) {\n                    console.error('Failed to parse transfer data:', transferMatch[1], e);\n                    return { amount: 0, message: '' };\n                  }\n                })(),\n              });\n              return;\n            }\n\n            const fileMatch = value.match(/^\\[文件:\\s*(.*)\\]/);\n            if (fileMatch) {\n              this.logEntries.push({ id, type: 'file', sender, content: fileMatch[1] });\n              return;\n            }\n\n            const giftMatch = value.match(/^\\[礼物:\\s*(.*)\\]/);\n            if (giftMatch) {\n              this.logEntries.push({\n                id,\n                type: 'gift',\n                sender,\n                content: giftMatch[1],\n                data: (() => {\n                  try {\n                    return JSON.parse(giftMatch[1]);\n                  } catch (e) {\n                    console.error('Failed to parse gift data:', giftMatch[1], e);\n                    return { name: '', value: 0 };\n                  }\n                })(),\n              });\n              return;\n            }\n\n            this.logEntries.push({ id, type: 'message', sender, content: value });\n            break;\n          }\n        }\n      } catch (e) {\n        console.error('Failed to parse log line:', line, e);\n      }\n    });\n  }\n\n  private _renderLogToString(): string {\n    const recallCommands: string[] = [];\n    const allEntriesString = this.logEntries\n      .map(e => {\n        if (e.recalled) {\n          const recallData = {\n            sender: 'sender' in e && e.sender === 'me' ? 'USER' : 'CHAR',\n            target_text:\n              typeof e.recalled_content === 'object' && e.recalled_content !== null\n                ? e.recalled_content.text\n                : e.recalled_content,\n            timestamp: e.recalled_timestamp,\n          };\n          if (recallData.target_text) {\n            recallCommands.push(`RECALL: ${JSON.stringify(recallData)}`);\n          }\n        }\n\n        if ('key' in e) {\n          return `${e.key}: ${JSON.stringify(e.data)}`;\n        }\n\n        if ('type' in e) {\n          if (e.type === 'time' || e.type === 'event') {\n            const key = e.type === 'time' ? 'TIME' : 'EVENT_LOG';\n            // console.log(`[BLMX] 序列化${key}条目:`, e);\n            return `${key}: ${JSON.stringify(e.content)}`;\n          }\n\n          const prefix = e.sender === 'me' ? 'USER' : 'CHAR';\n          let content: string | object = e.content;\n          switch (e.type) {\n            case 'sticker':\n              content = `[表情: ${e.content}]`;\n              break;\n            case 'voice':\n              content = `[语音: ${JSON.stringify(e.content)}]`;\n              break;\n            case 'image':\n              content = `[图片: ${JSON.stringify(e.content)}]`;\n              break;\n            case 'location':\n              content = `[位置: ${e.content}]`;\n              break;\n            case 'file':\n              content = `[文件: ${e.content}]`;\n              break;\n            case 'gift':\n              content = `[礼物: ${e.content}]`;\n              break;\n            case 'transfer':\n              content = `[转账: ${e.content}]`;\n              break;\n          }\n          return `${prefix}: ${content}`;\n        }\n        return ''; // Should not happen for valid entries\n      })\n      .join('\\n');\n\n    return [allEntriesString, ...recallCommands].filter(Boolean).join('\\n');\n  }\n\n  // 简化的addEntry方法 - 对表情包消息不进行重复检查\n  addEntry(entry: LogEntry | null): void {\n    if (entry) {\n      // 对于表情包消息，直接添加，不进行重复检查\n      if ('type' in entry && entry.type === 'sticker') {\n        this.logEntries.push(entry);\n        return;\n      }\n\n      // 对于其他类型的条目，进行重复检查\n      const isDuplicate = this.logEntries.some(existingEntry => {\n        // 检查朋友圈相关条目\n        if ('key' in entry && 'key' in existingEntry) {\n          if (entry.key === existingEntry.key) {\n            // 对于朋友圈动态，比较文本和时间\n            if (entry.key.includes('_MOMENT')) {\n              const entryData = (entry as MomentEntry).data;\n              const existingData = (existingEntry as MomentEntry).data;\n              return (\n                existingData.text === entryData.text &&\n                existingData.date === entryData.date &&\n                existingData.time === entryData.time\n              );\n            }\n            // 对于评论，比较文本和目标帖子ID\n            else if (entry.key.includes('_COMMENT')) {\n              const entryData = (entry as CommentEntry).data;\n              const existingData = (existingEntry as CommentEntry).data;\n              return existingData.text === entryData.text && existingData.target_post_id === entryData.target_post_id;\n            }\n            // 对于点赞，比较目标帖子ID\n            else if (entry.key.includes('_LIKE')) {\n              const entryData = (entry as LikeEntry).data;\n              const existingData = (existingEntry as LikeEntry).data;\n              return existingData.target_post_id === entryData.target_post_id;\n            }\n          }\n        }\n\n        // 检查消息类型条目\n        if ('type' in entry && 'type' in existingEntry) {\n          // 如果两个条目类型相同\n          if (entry.type === existingEntry.type) {\n            // 对于有ID的条目，比较ID\n            if ('id' in entry && 'id' in existingEntry && entry.id === existingEntry.id) {\n              return true;\n            }\n\n            // 对于消息类型条目，比较发送者和内容\n            if (\n              (entry.type === 'message' || entry.type === 'location' || entry.type === 'file') &&\n              'sender' in entry &&\n              'sender' in existingEntry &&\n              'content' in entry &&\n              'content' in existingEntry\n            ) {\n              return (\n                entry.sender === existingEntry.sender && (window as any)._.isEqual(entry.content, existingEntry.content)\n              );\n            }\n\n            // 对于时间和事件日志，比较内容\n            if ((entry.type === 'time' || entry.type === 'event') && 'content' in entry && 'content' in existingEntry) {\n              return (window as any)._.isEqual(entry.content, existingEntry.content);\n            }\n\n            // 对于其他复杂类型（如image, voice, transfer, gift），比较内容\n            if (\n              'content' in entry &&\n              'content' in existingEntry &&\n              (entry.type === 'image' || entry.type === 'voice' || entry.type === 'transfer' || entry.type === 'gift')\n            ) {\n              return (window as any)._.isEqual(entry.content, existingEntry.content);\n            }\n          }\n        }\n\n        return false;\n      });\n\n      if (isDuplicate) {\n        // console.log(`[BLMX] 跳过添加重复条目:`, entry);\n        return; // 如果是重复条目，直接返回，不添加\n      }\n\n      this.logEntries.push(entry);\n\n      // 添加时间更新逻辑 - 参考原版简化\n      if ('type' in entry && (entry.type === 'time' || entry.type === 'event')) {\n        const data = entry.content;\n        const timeDate = new Date(`${data.date} ${data.time}`);\n        if (!isNaN(timeDate.getTime())) {\n          window.currentGameDate = timeDate;\n          const timeElement = document.getElementById('current-time');\n          if (timeElement) {\n            const timeString = `${window.currentGameDate\n              .getHours()\n              .toString()\n              .padStart(2, '0')}:${window.currentGameDate.getMinutes().toString().padStart(2, '0')}`;\n            timeElement.textContent = timeString;\n          }\n        }\n      }\n    }\n  }\n\n  getContextForAI(): string {\n    return this._renderLogToString();\n  }\n}\n","/**\n * 通用工具函数\n * 用于抽象重复的逻辑和提供共享功能\n */\n\nimport { logger } from './debug-logger';\n\n/**\n * 安全的JSON解析\n * @param jsonString JSON字符串\n * @param defaultValue 解析失败时的默认值\n * @returns 解析结果或默认值\n */\nexport function safeJsonParse<T = any>(jsonString: string, defaultValue: T | null = null): T | null {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    logger.warn('Utils', 'JSON解析失败', { jsonString: jsonString.substring(0, 100), error });\n    return defaultValue;\n  }\n}\n\n/**\n * 安全的JSON字符串化\n * @param obj 要序列化的对象\n * @param defaultValue 序列化失败时的默认值\n * @returns JSON字符串或默认值\n */\nexport function safeJsonStringify(obj: any, defaultValue: string = '{}'): string {\n  try {\n    return JSON.stringify(obj);\n  } catch (error) {\n    logger.warn('Utils', 'JSON序列化失败', { error });\n    return defaultValue;\n  }\n}\n\n/**\n * 防抖函数 - 使用lodash的debounce\n * @param func 要防抖的函数\n * @param wait 等待时间（毫秒）\n * @param options lodash debounce选项\n * @returns 防抖后的函数\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  options?: { leading?: boolean; trailing?: boolean; maxWait?: number },\n): T {\n  return (window as any)._.debounce(func, wait, options);\n}\n\n/**\n * 节流函数 - 使用lodash的throttle\n * @param func 要节流的函数\n * @param wait 等待时间（毫秒）\n * @param options lodash throttle选项\n * @returns 节流后的函数\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  options?: { leading?: boolean; trailing?: boolean },\n): T {\n  return (window as any)._.throttle(func, wait, options);\n}\n\n/**\n * 异步延迟函数\n * @param ms 延迟时间（毫秒）\n * @returns Promise\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * 安全的DOM查询 - 使用jQuery\n * @param selector CSS选择器\n * @param context 查询上下文，默认为document\n * @returns jQuery对象\n */\nexport function $safe(selector: string, context?: Element | Document): JQuery<HTMLElement> {\n  try {\n    return context ? $(selector, context) : $(selector);\n  } catch (error) {\n    logger.warn('Utils', 'jQuery查询失败', { selector, error });\n    return $(); // 返回空的jQuery对象\n  }\n}\n\n/**\n * 安全的DOM查询（原生元素）\n * @param selector CSS选择器\n * @param context 查询上下文，默认为document\n * @returns 元素或null\n */\nexport function safeQuerySelector<T extends Element = Element>(\n  selector: string,\n  context: Document | Element = document,\n): T | null {\n  try {\n    return context.querySelector<T>(selector);\n  } catch (error) {\n    logger.warn('Utils', 'DOM查询失败', { selector, error });\n    return null;\n  }\n}\n\n/**\n * 安全的DOM查询（多个元素）- 使用jQuery更简洁\n * @param selector CSS选择器\n * @param context 查询上下文，默认为document\n * @returns 元素数组\n */\nexport function safeQuerySelectorAll<T extends Element = Element>(\n  selector: string,\n  context: Document | Element = document,\n): T[] {\n  try {\n    const $elements = context ? $(selector, context) : $(selector);\n    return $elements.toArray() as unknown as T[];\n  } catch (error) {\n    logger.warn('Utils', 'DOM查询失败', { selector, error });\n    return [];\n  }\n}\n\n/**\n * 格式化文件大小\n * @param bytes 字节数\n * @returns 格式化的文件大小字符串\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 B';\n\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * 格式化时间戳\n * @param timestamp 时间戳（毫秒）\n * @param format 格式类型\n * @returns 格式化的时间字符串\n */\nexport function formatTimestamp(timestamp: number, format: 'full' | 'time' | 'date' = 'full'): string {\n  const date = new Date(timestamp);\n\n  switch (format) {\n    case 'time':\n      return date.toLocaleTimeString('zh-CN', { hour12: false });\n    case 'date':\n      return date.toLocaleDateString('zh-CN');\n    case 'full':\n    default:\n      return date.toLocaleString('zh-CN', { hour12: false });\n  }\n}\n\n/**\n * 生成唯一ID\n * @param prefix 前缀\n * @returns 唯一ID字符串\n */\nexport function generateId(prefix: string = 'id'): string {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n}\n\n/**\n * 深度克隆对象 - 使用lodash的cloneDeep\n * @param obj 要克隆的对象\n * @returns 克隆后的对象\n */\nexport function deepClone<T>(obj: T): T {\n  return (window as any)._.cloneDeep(obj);\n}\n\n/**\n * 检查是否为移动设备\n * @returns 是否为移动设备\n */\nexport function isMobileDevice(): boolean {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\n/**\n * 检查是否支持触摸\n * @returns 是否支持触摸\n */\nexport function isTouchDevice(): boolean {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n}\n\n/**\n * 安全的本地存储操作\n */\nexport const SafeStorage = {\n  /**\n   * 获取本地存储项\n   * @param key 键名\n   * @param defaultValue 默认值\n   * @returns 存储的值或默认值\n   */\n  getItem<T = string>(key: string, defaultValue: T | null = null): T | null {\n    try {\n      const item = localStorage.getItem(key);\n      if (item === null) return defaultValue;\n\n      // 尝试解析JSON，如果失败则返回原始字符串\n      try {\n        return JSON.parse(item);\n      } catch {\n        return item as unknown as T;\n      }\n    } catch (error) {\n      logger.warn('Utils', '本地存储读取失败', { key, error });\n      return defaultValue;\n    }\n  },\n\n  /**\n   * 设置本地存储项\n   * @param key 键名\n   * @param value 值\n   * @returns 是否成功\n   */\n  setItem(key: string, value: any): boolean {\n    try {\n      const serialized = typeof value === 'string' ? value : JSON.stringify(value);\n      localStorage.setItem(key, serialized);\n      return true;\n    } catch (error) {\n      logger.warn('Utils', '本地存储写入失败', { key, error });\n      return false;\n    }\n  },\n\n  /**\n   * 删除本地存储项\n   * @param key 键名\n   * @returns 是否成功\n   */\n  removeItem(key: string): boolean {\n    try {\n      localStorage.removeItem(key);\n      return true;\n    } catch (error) {\n      logger.warn('Utils', '本地存储删除失败', { key, error });\n      return false;\n    }\n  },\n\n  /**\n   * 清空本地存储\n   * @returns 是否成功\n   */\n  clear(): boolean {\n    try {\n      localStorage.clear();\n      return true;\n    } catch (error) {\n      logger.warn('Utils', '本地存储清空失败', { error });\n      return false;\n    }\n  },\n};\n\n/**\n * 错误处理工具\n */\nexport const ErrorHandler = {\n  /**\n   * 安全执行异步函数\n   * @param fn 异步函数\n   * @param errorMessage 错误消息\n   * @returns 执行结果或null\n   */\n  async safeAsync<T>(fn: () => Promise<T>, errorMessage?: string): Promise<T | null> {\n    try {\n      return await fn();\n    } catch (error) {\n      logger.error('ErrorHandler', errorMessage || '异步操作失败', { error });\n      return null;\n    }\n  },\n\n  /**\n   * 安全执行同步函数\n   * @param fn 同步函数\n   * @param errorMessage 错误消息\n   * @returns 执行结果或null\n   */\n  safeSync<T>(fn: () => T, errorMessage?: string): T | null {\n    try {\n      return fn();\n    } catch (error) {\n      logger.error('ErrorHandler', errorMessage || '同步操作失败', { error });\n      return null;\n    }\n  },\n};\n","// AI响应处理模块\n// 负责AI响应触发、条目处理、动画显示等功能\n\nimport { logger } from './debug-logger';\nimport { EventManager } from './event-manager';\nimport { MomentsManager } from './moments-manager';\nimport { BLMX_Protocol, LogEntry, getTavernHelper } from './script';\nimport { IEventHandler } from './types';\nimport { UIRenderer } from './ui-renderer';\nimport { safeJsonParse, safeJsonStringify } from './utils';\n\nexport class AiResponseManager {\n  private blmxManager: BLMX_Protocol;\n  private uiRenderer: UIRenderer;\n  private eventHandler: IEventHandler;\n  private momentsManager: MomentsManager;\n  private eventManager: EventManager;\n\n  private isGenerating: boolean = false;\n  private latestAiRawResponse: string = '还没有收到AI的回复。';\n  private latestSentPrompt: string = '还没有发送任何内容给AI。';\n\n  // 新增：记录原始响应和完整提示词，与同层手机保持一致\n  private rawAiResponse: string = '';\n  private fullPrompt: string = '';\n\n  constructor(\n    blmxManager: BLMX_Protocol,\n    uiRenderer: UIRenderer,\n    eventHandler: IEventHandler,\n    momentsManager: MomentsManager,\n  ) {\n    this.blmxManager = blmxManager;\n    this.uiRenderer = uiRenderer;\n    this.eventHandler = eventHandler;\n    this.momentsManager = momentsManager;\n    this.eventManager = new EventManager();\n\n    // 使用事件管理器来添加事件监听器，防止内存泄漏\n    this.eventManager.addGlobalListener('js_generation_ended', (text: string) => {\n      this.rawAiResponse = text;\n      logger.debug('AiResponseManager', '原始AI响应已接收', { length: text.length });\n    });\n\n    this.eventManager.addGlobalListener('chat_completion_prompt_ready', (event_data: any) => {\n      this.fullPrompt = safeJsonStringify(event_data.chat);\n      logger.debug('AiResponseManager', '完整提示词已准备', { promptLength: this.fullPrompt.length });\n    });\n  }\n\n  // 获取是否正在生成\n  getIsGenerating(): boolean {\n    return this.isGenerating;\n  }\n\n  // 触发AI响应 - 按照原始同层手机中的实现移植\n  async triggerAiResponse(_immediate: boolean = false): Promise<void> {\n    if (this.isGenerating || !this.blmxManager) return;\n\n    // 检查逻辑已移到AppController中，这里直接处理\n\n    // 检查全局标志，防止重复处理\n    if ((window as any).BLMX_PROCESSING_AI_RESPONSE) {\n      logger.debug('AiResponseManager', '已有AI响应处理进行中，跳过重复处理');\n      return;\n    }\n\n    // 设置全局处理标志\n    (window as any).BLMX_PROCESSING_AI_RESPONSE = true;\n    this.isGenerating = true;\n\n    try {\n      // getContextForAI should now get all necessary context from the main log.\n      let contextForAI = this.blmxManager.getContextForAI();\n\n      contextForAI +=\n        '\\n【BLMX_LOG中的内容为目前过往线上聊天记录，其中也包括最新的USER输入，请你作为CHAR进行回应。】\\n【本次响应必须遵循线上规则】【必须使用特殊约定的格式且保证正确换行】';\n      this.latestSentPrompt = contextForAI;\n\n      // Clean up 'isNewForAI' flags from the main log after generating context.\n      this.blmxManager.logEntries.forEach(entry => {\n        if ('type' in entry && entry.type === 'image' && 'content' in entry && (entry.content as any).isNewForAI) {\n          (entry.content as any).value = `[用户发送的图片]`;\n          delete (entry.content as any).isNewForAI;\n        }\n      });\n\n      // 重置待响应标志\n      this.eventHandler.setHasPendingNotifications(false);\n\n      const MAX_RETRIES = 2;\n      let attempt = 0;\n      let success = false;\n\n      while (attempt <= MAX_RETRIES && !success) {\n        if (attempt > 0) {\n          logger.warn('AiResponseManager', `AI响应为空，重试中`, { attempt: attempt + 1, maxRetries: MAX_RETRIES + 1 });\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        }\n\n        try {\n          // 显示灵动岛生成指示器，而不是打字指示器\n          this.uiRenderer.showGeneratingIndicator();\n\n          const stream = await getTavernHelper().generate({ user_input: contextForAI, should_stream: true });\n          let finalAiResponse = '';\n\n          for await (const chunk of stream) {\n            finalAiResponse += chunk;\n          }\n\n          // 隐藏灵动岛生成指示器\n          this.uiRenderer.hideGeneratingIndicator();\n          this.latestAiRawResponse = finalAiResponse.trim();\n\n          // 记录原始响应以便调试\n          if (!this.rawAiResponse) {\n            this.rawAiResponse = finalAiResponse.trim();\n            logger.debug('AiResponseManager', '直接获取的原始AI响应', { length: this.rawAiResponse.length });\n          }\n\n          // 处理重复响应问题 - 从原始同层手机移植过来\n          let processedResponse = finalAiResponse.trim();\n          const len = processedResponse.length;\n\n          // 检查完全相同的两半\n          if (len > 0 && len % 2 === 0) {\n            const firstHalf = processedResponse.substring(0, len / 2);\n            const secondHalf = processedResponse.substring(len / 2);\n\n            if (firstHalf === secondHalf && firstHalf.trim() !== '') {\n              logger.warn('AiResponseManager', '检测到完全重复的AI响应，自动修剪');\n              processedResponse = firstHalf;\n            }\n          }\n\n          // 增强的重复检测：检查是否有相同的行被重复\n          const lines = processedResponse.split('\\n').filter(line => line.trim() !== '');\n          if (lines.length > 1) {\n            const uniqueLines = (window as any)._.uniq(lines);\n            // 如果去重后的行数明显少于原始行数，可能存在重复\n            if (uniqueLines.length < lines.length * 0.7) {\n              logger.warn('AiResponseManager', '检测到AI响应中的潜在行重复，仅使用唯一行');\n              processedResponse = uniqueLines.join('\\n');\n            }\n          }\n\n          if (processedResponse.trim()) {\n            // 处理AI响应\n            success = await this.processAiResponse(processedResponse.trim());\n          }\n        } catch (error) {\n          logger.error('AiResponseManager', `尝试${attempt}时出错`, { attempt, error });\n          this.uiRenderer.hideGeneratingIndicator();\n\n          if (attempt >= MAX_RETRIES) {\n            this.showErrorMessage('AI代理出错 (详情见F12控制台)');\n          }\n        }\n\n        attempt++;\n      }\n\n      if (!success && attempt > MAX_RETRIES) {\n        console.error(`[BLMX] AI generation failed after ${MAX_RETRIES + 1} attempts (empty response).`);\n        this.showErrorMessage('(AI响应为空，请稍后再试或手动触发)');\n        this.latestAiRawResponse = '[AI响应为空]';\n      }\n\n      await this.blmxManager.persistLogToStorage();\n\n      // 刷新所有时间戳的显示，确保AI回复的时间戳正确展示\n      this.uiRenderer.refreshAllTimestamps();\n    } catch (error) {\n      console.error('[BLMX] Error in triggerAiResponse:', error);\n    } finally {\n      // 无论成功失败，都重置处理标志\n      this.isGenerating = false;\n      (window as any).BLMX_PROCESSING_AI_RESPONSE = false;\n    }\n  }\n\n  // 处理AI响应\n  private async processAiResponse(response: string): Promise<boolean> {\n    const entriesForAnimation: LogEntry[] = [];\n    let hasNewCharMoments = false;\n\n    // 预处理响应文本\n    const processedResponse = response.replace(/^\\s*[[{].*[\\]}]\\s*$/gm, match => {\n      const parsed = safeJsonParse(match.trim());\n      return parsed !== null ? match : '';\n    });\n\n    const responseLines = processedResponse.split('\\n').filter(line => line.trim() !== '');\n    logger.debug('AiResponseManager', '处理AI响应行', { lineCount: responseLines.length });\n\n    responseLines.forEach(line => {\n      const separatorIndex = line.indexOf(':');\n      if (separatorIndex === -1) {\n        logger.debug('AiResponseManager', '跳过没有分隔符的行', { line });\n        return;\n      }\n\n      const key = line.substring(0, separatorIndex).trim();\n      const value = line.substring(separatorIndex + 1).trim();\n      logger.debug('AiResponseManager', '解析响应', {\n        key,\n        valuePreview: value.substring(0, 50) + (value.length > 50 ? '...' : ''),\n        valueLength: value.length,\n      });\n\n      if (!key || !value) return;\n\n      try {\n        let newEntry: LogEntry | null = null;\n        // 声明所有可能在case中使用的变量\n        const id = `ai-${Date.now()}-${Math.random()}`;\n        let voiceMatch: RegExpMatchArray | null = null;\n        let stickerMatch: RegExpMatchArray | null = null;\n        let imageMatch: RegExpMatchArray | null = null;\n        let locationMatch: RegExpMatchArray | null = null;\n        let transferMatch: RegExpMatchArray | null = null;\n        let fileMatch: RegExpMatchArray | null = null;\n        let giftMatch: RegExpMatchArray | null = null;\n\n        switch (key) {\n          case 'CHAR_MOMENT':\n          case 'CHAR_COMMENT':\n          case 'CHAR_LIKE':\n            newEntry = { key, data: safeJsonParse(value) } as any;\n            this.blmxManager.addEntry(newEntry);\n\n            // 将朋友圈相关条目也添加到动画队列中\n            if (newEntry) {\n              entriesForAnimation.push(newEntry);\n              hasNewCharMoments = true;\n            }\n\n            // 立即更新朋友圈界面，不等待动画完成\n            if (this.momentsManager) {\n              this.momentsManager.renderMomentsFeed();\n            }\n            break;\n\n          case 'message': {\n            const parsedMessageContent = safeJsonParse(value);\n            newEntry = {\n              id: `ai-${Date.now()}-${Math.random()}`,\n              type: 'message',\n              sender: 'them',\n              content: parsedMessageContent !== null ? parsedMessageContent : value,\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n          }\n\n          case 'CHAR':\n            // 兼容原始的CHAR格式\n            voiceMatch = value.match(/^\\[语音:\\s*({.*})\\]/);\n            stickerMatch = value.match(/^\\[表情:\\s*(.*)\\]/);\n            imageMatch = value.match(/^\\[图片:\\s*(.*)\\]/);\n            locationMatch = value.match(/^\\[位置:\\s*(.*)\\]/);\n            transferMatch = value.match(/^\\[转账:\\s*(.*)\\]/);\n            fileMatch = value.match(/^\\[文件:\\s*(.*)\\]/);\n            giftMatch = value.match(/^\\[礼物:\\s*(.*)\\]/);\n\n            if (voiceMatch) {\n              const parsedVoiceData = safeJsonParse(voiceMatch[1]);\n              newEntry = {\n                id,\n                type: 'voice',\n                sender: 'them',\n                content: parsedVoiceData || { text: '', duration: 0 },\n              };\n            } else if (stickerMatch) {\n              newEntry = {\n                id,\n                type: 'sticker',\n                sender: 'them',\n                content: stickerMatch[1],\n              };\n            } else if (imageMatch) {\n              const parsedImageData = safeJsonParse(imageMatch[1]);\n              if (parsedImageData !== null) {\n                // 成功解析JSON格式的图片数据\n                newEntry = {\n                  id,\n                  type: 'image',\n                  sender: 'them',\n                  content: parsedImageData,\n                };\n              } else {\n                // 解析失败，说明是纯文本描述\n                newEntry = {\n                  id,\n                  type: 'image',\n                  sender: 'them',\n                  content: { type: 'desc', value: imageMatch[1] },\n                };\n              }\n            } else if (locationMatch) {\n              newEntry = {\n                id,\n                type: 'location',\n                sender: 'them',\n                content: locationMatch[1],\n              };\n            } else if (transferMatch) {\n              try {\n                newEntry = {\n                  id,\n                  type: 'transfer',\n                  sender: 'them',\n                  content: transferMatch[1],\n                  data: safeJsonParse(transferMatch[1]) || { amount: 0, message: '' },\n                } as any;\n              } catch (e) {\n                console.error('Failed to parse transfer data:', transferMatch[1], e);\n              }\n            } else if (fileMatch) {\n              try {\n                newEntry = {\n                  id,\n                  type: 'file',\n                  sender: 'them',\n                  content: fileMatch[1],\n                  data: safeJsonParse(fileMatch[1]) || { name: '', size: 0, url: '' },\n                } as any;\n              } catch (e) {\n                console.error('Failed to parse file data:', fileMatch[1], e);\n              }\n            } else if (giftMatch) {\n              try {\n                newEntry = {\n                  id,\n                  type: 'gift',\n                  sender: 'them',\n                  content: giftMatch[1],\n                  data: safeJsonParse(giftMatch[1]) || { name: '', value: 0 },\n                } as any;\n              } catch (e) {\n                console.error('Failed to parse gift data:', giftMatch[1], e);\n              }\n            } else {\n              // 纯文本消息\n              newEntry = {\n                id,\n                type: 'message',\n                sender: 'them',\n                content: value,\n              };\n            }\n\n            if (newEntry) {\n              this.blmxManager.addEntry(newEntry);\n              entriesForAnimation.push(newEntry);\n            }\n            break;\n\n          case 'sticker': {\n            const parsedStickerContent = safeJsonParse(value);\n            newEntry = {\n              id: `ai-sticker-${Date.now()}-${Math.random()}`,\n              type: 'sticker',\n              sender: 'them',\n              content: parsedStickerContent !== null ? parsedStickerContent : value,\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n          }\n\n          case 'voice':\n            newEntry = {\n              id: `ai-voice-${Date.now()}-${Math.random()}`,\n              type: 'voice',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'image':\n            newEntry = {\n              id: `ai-image-${Date.now()}-${Math.random()}`,\n              type: 'image',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'location':\n            newEntry = {\n              id: `ai-location-${Date.now()}-${Math.random()}`,\n              type: 'location',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'transfer':\n            newEntry = {\n              id: `ai-transfer-${Date.now()}-${Math.random()}`,\n              type: 'transfer',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'file':\n            newEntry = {\n              id: `ai-file-${Date.now()}-${Math.random()}`,\n              type: 'file',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'gift':\n            newEntry = {\n              id: `ai-gift-${Date.now()}-${Math.random()}`,\n              type: 'gift',\n              sender: 'them',\n              content: JSON.parse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          case 'RECALL': {\n            const recallData = safeJsonParse(value);\n            const senderToFind = recallData.sender === 'USER' ? 'me' : 'them';\n            const entryToRecall = this.blmxManager.logEntries\n              .slice()\n              .reverse()\n              .find(\n                e =>\n                  'sender' in e && e.sender === senderToFind && 'content' in e && e.content === recallData.target_text,\n              ) as any;\n\n            if (entryToRecall) {\n              // 创建一个\"指令\"条目给动画函数处理\n              entriesForAnimation.push({\n                type: 'recall_instruction',\n                content: {\n                  originalEntry: entryToRecall,\n                  recallTimestamp: recallData.timestamp,\n                },\n              } as any);\n            }\n            break;\n          }\n\n          case 'EVENT_LOG':\n          case 'TIME':\n            newEntry = {\n              type: key === 'TIME' ? 'time' : 'event',\n              content: safeJsonParse(value),\n            } as any;\n            this.blmxManager.addEntry(newEntry);\n            if (newEntry) entriesForAnimation.push(newEntry);\n            break;\n\n          default:\n            logger.warn('AiResponseManager', '未知的AI响应键', { key });\n        }\n      } catch (error) {\n        console.error(`[BLMX] Error processing AI response line \"${line}\":`, error);\n      }\n    });\n\n    // 如果有新条目要动画显示\n    if (entriesForAnimation.length > 0) {\n      await this.displayAiEntriesSequentially(entriesForAnimation);\n\n      // 如果有朋友圈相关的更新，检查用户是否在朋友圈视图\n      if (hasNewCharMoments && this.momentsManager) {\n        // 只有当用户不在朋友圈视图时才设置通知\n        const userInMomentsView = $('#moments-view').hasClass('active');\n        if (!userInMomentsView) {\n          this.momentsManager.setMomentNotification(true);\n        } else {\n          // 如果用户正在朋友圈视图，更新最后查看时间戳\n          this.momentsManager.setLastMomentViewTimestamp();\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  // 显示错误消息\n  private showErrorMessage(message: string): void {\n    const $errorDiv = $('<div>').addClass('ai-error-message').text(message);\n\n    $('.wechat-body').append($errorDiv);\n\n    setTimeout(() => {\n      $errorDiv.remove();\n    }, 5000);\n  }\n\n  // 按顺序展示AI条目\n  async displayAiEntriesSequentially(entries: LogEntry[]): Promise<void> {\n    // 定义哪些类型是\"消息\"，需要播放输入动画\n    const messageLikeTypes = ['message', 'sticker', 'voice', 'image', 'location', 'transfer', 'file', 'gift'];\n    for (const entry of entries) {\n      // 找到条目在日志中的索引\n      const entryIndex = this.blmxManager.logEntries.findIndex(log => {\n        // 对于有ID的条目，通过ID匹配\n        if ('id' in log && 'id' in entry && log.id === entry.id) {\n          return true;\n        }\n\n        // 对于朋友圈相关条目，通过key和内容匹配\n        if ('key' in log && 'key' in entry && log.key === entry.key) {\n          // 对于朋友圈动态\n          if (entry.key.includes('_MOMENT')) {\n            return (window as any)._.isEqual((log as any).data, (entry as any).data);\n          }\n\n          // 对于点赞和评论\n          if (entry.key.includes('_LIKE') || entry.key.includes('_COMMENT')) {\n            return (window as any)._.isEqual((log as any).data, (entry as any).data);\n          }\n        }\n\n        // 对于没有ID的条目（如TIME、EVENT_LOG），通过内容匹配\n        if (\n          'type' in log &&\n          'type' in entry &&\n          (log.type === 'time' || log.type === 'event') &&\n          log.type === entry.type &&\n          (window as any)._.isEqual(log.content, (entry as any).content)\n        ) {\n          return true;\n        }\n\n        // 对于消息类型条目，通过类型、发送者和内容匹配\n        if (\n          'type' in log &&\n          'type' in entry &&\n          'sender' in log &&\n          'sender' in entry &&\n          'content' in log &&\n          'content' in entry &&\n          log.type === entry.type &&\n          log.sender === entry.sender\n        ) {\n          // 对于简单类型的内容，直接比较\n          if (typeof log.content === 'string' && typeof (entry as any).content === 'string') {\n            return log.content === (entry as any).content;\n          }\n          // 对于复杂类型的内容，使用lodash深度比较\n          return (window as any)._.isEqual(log.content, (entry as any).content);\n        }\n\n        return false;\n      });\n\n      if (entryIndex !== -1) {\n        logger.debug('AiResponseManager', '找到已存在的条目', {\n          entryIndex,\n          entryType: 'type' in entry ? entry.type : 'unknown',\n        });\n      }\n\n      // 判断条目类型是否是需要动画的\"消息\"\n      if ('type' in entry && messageLikeTypes.includes(entry.type)) {\n        // 是消息，执行完整的动画流程\n        this.uiRenderer.showTypingIndicator();\n\n        const messageText =\n          entry.type === 'message' ? entry.content : entry.type === 'voice' ? (entry.content as any).text : '';\n\n        const delay = this.uiRenderer.calculateTypingDelay(messageText);\n        await new Promise(resolve => setTimeout(resolve, delay));\n\n        this.uiRenderer.hideTypingIndicator();\n        this.uiRenderer.renderEntry(entry, entryIndex !== -1 ? entryIndex : undefined, true);\n      } else if ('type' in entry && (entry.type as any) === 'recall_instruction') {\n        // 处理撤回指令，使用类型断言\n        const { originalEntry, recallTimestamp } = (entry as any).content;\n\n        // 在内存中找到这个条目并标记\n        const entryToUpdate = this.blmxManager.logEntries.find(log => 'id' in log && log.id === originalEntry.id);\n        if (entryToUpdate) {\n          (entryToUpdate as any).recalled = true;\n          (entryToUpdate as any).recalled_content = originalEntry.content;\n          (entryToUpdate as any).recalled_timestamp = recallTimestamp;\n\n          // 获取条目在日志中的索引，以便在删除模式下显示删除按钮\n          const recallEntryIndex = this.blmxManager.logEntries.indexOf(entryToUpdate);\n\n          // 在UI上找到对应的DOM元素并替换它\n          const $elementToReplace = $(`[data-message-id=\"${originalEntry.id}\"]`);\n          if ($elementToReplace.length) {\n            // 使用一个小的延迟，让撤回动作看起来更自然\n            await new Promise(resolve => setTimeout(resolve, 500));\n            this.uiRenderer.renderRecallNotice(entryToUpdate, $elementToReplace[0] as HTMLElement, recallEntryIndex);\n          }\n        }\n      } else {\n        // 是系统事件 (如 EVENT_LOG, TIME)，直接显示\n        this.uiRenderer.renderEntry(entry, entryIndex !== -1 ? entryIndex : undefined, true);\n      }\n\n      // 在所有条目之间都增加一个短暂的停顿，让节奏更舒适\n      await new Promise(resolve => setTimeout(resolve, 800));\n    }\n\n    // 显示完所有条目后刷新时间戳，确保日期格式正确\n    this.uiRenderer.refreshAllTimestamps();\n  }\n\n  /**\n   * 清理资源，防止内存泄漏\n   */\n  cleanup(): void {\n    this.eventManager.cleanup();\n  }\n\n  // 获取最新的AI原始响应\n  getLatestAiRawResponse(): string {\n    return this.latestAiRawResponse;\n  }\n\n  // 获取最新发送的提示词\n  getLatestSentPrompt(): string {\n    return this.latestSentPrompt;\n  }\n\n  // 获取原始AI响应\n  getRawAiResponse(): string {\n    return this.rawAiResponse;\n  }\n\n  // 获取完整提示词\n  getFullPrompt(): string {\n    return this.fullPrompt;\n  }\n}\n","// 配置管理模块\n// 负责管理应用配置、常量定义和配置初始化\n\nimport { SafeStorage } from './utils';\n\n// 类型定义\nexport interface AppConfig {\n  avatars: {\n    user: string;\n    char: string;\n  };\n  names: {\n    user: string;\n    char: string;\n  };\n  charRemark: string;\n  currentCharId: string;\n}\n\n// 表情包定义\nexport interface Sticker {\n  label: string;\n  url: string;\n}\n\n// 常量定义\nexport const STORAGE_KEYS = {\n  GLOBAL_STICKER: 'blmx_wechat_stickers_global_blmx', // 修改为与原版一致\n  CHAR_STICKER_PREFIX: 'blmx_char_stickers_blmx_', // 修改为与原版一致\n  PHONE_SIZE: 'blmx_phone_size',\n  FULLSCREEN_SIZE: 'blmx_fullscreen_size',\n  STICKER_SIZE: 'blmx_sticker_size',\n  MOMENT_NOTIFICATION: 'blmx_moment_notification',\n  MOMENT_LAST_VIEW: 'blmx_moment_last_view',\n  USER_NAME_PREFIX: 'blmx_user_name_',\n  USER_AVATAR_PREFIX: 'blmx_user_avatar_',\n  CHAR_AVATAR_PREFIX: 'blmx_char_avatar_',\n  CHAR_REMARK_PREFIX: 'blmx_remark_',\n  COVER_PHOTO_PREFIX: 'blmx_cover_photo_',\n  SIGNATURE_PREFIX: 'blmx_signature_',\n  INPUT_PLACEHOLDER_PREFIX: 'blmx_input_placeholder_',\n  LAST_NOTIFIED_VERSION: 'blmx_last_notified_version',\n} as const;\n\n// 手机尺寸常量\nexport const PHONE_SIZES = {\n  default: '48.75rem', // 默认尺寸: 48.75rem (780px)\n  medium: '42rem', // 中等尺寸: 42rem (672px)\n  small: '36rem', // 小尺寸: 36rem (576px)\n} as const;\n\n// 全屏模式手机大小常量（缩放比例）\nexport const FULLSCREEN_SIZES = {\n  default: 100, // 默认：100%\n  large: 130, // 大：130%\n  xlarge: 160, // 超大：160%\n} as const;\n\n// 配置管理器类\nexport class ConfigManager {\n  private config: AppConfig;\n  private defaultGlobalStickers: Sticker[] = [{ label: '好的', url: 'https://files.catbox.moe/3j0tpc.jpeg' }];\n\n  constructor() {\n    // 初始化默认配置\n    this.config = {\n      avatars: { user: '', char: '' },\n      names: { user: 'User', char: 'Character' },\n      charRemark: '',\n      currentCharId: '',\n    };\n  }\n\n  // 获取配置\n  getConfig(): AppConfig {\n    return this.config;\n  }\n\n  // 设置配置\n  setConfig(config: Partial<AppConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  // 获取显示名称\n  getDisplayName(type: 'user' | 'char'): string {\n    if (type === 'char') {\n      return this.config.charRemark || this.config.names.char;\n    }\n    return this.config.names.user;\n  }\n\n  // 更新头像\n  updateAvatar(avatarType: 'user' | 'char', newUrl: string): void {\n    this.config.avatars[avatarType] = newUrl;\n    const storageKey =\n      avatarType === 'user'\n        ? `${STORAGE_KEYS.USER_AVATAR_PREFIX}${this.config.currentCharId}`\n        : `${STORAGE_KEYS.CHAR_AVATAR_PREFIX}${this.config.currentCharId}`;\n    localStorage.setItem(storageKey, newUrl);\n  }\n\n  // 更新角色备注\n  updateCharRemark(newRemark: string): void {\n    this.config.charRemark = newRemark;\n    localStorage.setItem(`${STORAGE_KEYS.CHAR_REMARK_PREFIX}${this.config.currentCharId}`, newRemark);\n  }\n\n  // 更新用户名\n  updateUserName(newName: string): void {\n    this.config.names.user = newName;\n    localStorage.setItem(`${STORAGE_KEYS.USER_NAME_PREFIX}${this.config.currentCharId}`, newName);\n  }\n\n  // 查找表情包URL - 增加向后兼容性\n  findStickerUrlByName(name: string): string | undefined {\n    // 尝试从新的存储键读取\n    let customGlobalStickers = SafeStorage.getItem<any[]>(STORAGE_KEYS.GLOBAL_STICKER, []) || [];\n    let charStickers =\n      SafeStorage.getItem<any[]>(`${STORAGE_KEYS.CHAR_STICKER_PREFIX}${this.config.currentCharId}`, []) || [];\n\n    // 如果新存储键没有数据，尝试从旧存储键迁移\n    if (customGlobalStickers.length === 0) {\n      const oldGlobalStickers = SafeStorage.getItem<any[]>('blmx_wechat_stickers_global', []) || [];\n      if (oldGlobalStickers.length > 0) {\n        // 迁移数据到新存储键\n        SafeStorage.setItem(STORAGE_KEYS.GLOBAL_STICKER, oldGlobalStickers);\n        customGlobalStickers = oldGlobalStickers;\n        console.log('[BLMX] 已迁移全局表情包数据到新存储键');\n      }\n    }\n\n    if (charStickers.length === 0) {\n      const oldCharStickers = SafeStorage.getItem<any[]>(`blmx_char_stickers_${this.config.currentCharId}`, []) || [];\n      if (oldCharStickers.length > 0) {\n        // 迁移数据到新存储键\n        SafeStorage.setItem(`${STORAGE_KEYS.CHAR_STICKER_PREFIX}${this.config.currentCharId}`, oldCharStickers);\n        charStickers = oldCharStickers;\n        console.log('[BLMX] 已迁移角色表情包数据到新存储键');\n      }\n    }\n\n    const globalStickers = [...this.defaultGlobalStickers, ...customGlobalStickers];\n    return [...globalStickers, ...charStickers].find((s: Sticker) => s.label === name)?.url;\n  }\n\n  // 从localStorage加载配置\n  async loadFromStorage(charData: any): Promise<void> {\n    this.config.currentCharId = charData.name;\n    this.config.names.char = charData.name;\n\n    // 加载保存的配置\n    this.config.charRemark =\n      localStorage.getItem(`${STORAGE_KEYS.CHAR_REMARK_PREFIX}${this.config.currentCharId}`) || '';\n    this.config.names.user =\n      localStorage.getItem(`${STORAGE_KEYS.USER_NAME_PREFIX}${this.config.currentCharId}`) || 'User';\n    this.config.avatars.user =\n      localStorage.getItem(`${STORAGE_KEYS.USER_AVATAR_PREFIX}${this.config.currentCharId}`) || '';\n\n    // 加载角色头像\n    const savedCharAvatar = localStorage.getItem(`${STORAGE_KEYS.CHAR_AVATAR_PREFIX}${this.config.currentCharId}`);\n    if (savedCharAvatar) {\n      this.config.avatars.char = savedCharAvatar;\n    } else {\n      // 这里需要从外部获取角色头像路径\n      // 在实际使用时会通过参数传入\n      this.config.avatars.char = '';\n    }\n  }\n\n  // 获取朋友圈通知状态\n  getMomentNotificationState(): boolean {\n    const notificationState = localStorage.getItem(`${STORAGE_KEYS.MOMENT_NOTIFICATION}_${this.config.currentCharId}`);\n    return notificationState === 'true';\n  }\n\n  // 设置朋友圈通知状态\n  setMomentNotificationState(value: boolean): void {\n    localStorage.setItem(`${STORAGE_KEYS.MOMENT_NOTIFICATION}_${this.config.currentCharId}`, value.toString());\n  }\n\n  // 获取最后查看朋友圈时的时间戳\n  getLastMomentViewTimestamp(): number {\n    const lastView = localStorage.getItem(`${STORAGE_KEYS.MOMENT_LAST_VIEW}_${this.config.currentCharId}`);\n    return lastView ? parseInt(lastView, 10) : 0;\n  }\n\n  // 设置最后查看朋友圈时的时间戳\n  setLastMomentViewTimestamp(timestamp: number): void {\n    localStorage.setItem(`${STORAGE_KEYS.MOMENT_LAST_VIEW}_${this.config.currentCharId}`, timestamp.toString());\n  }\n\n  // 获取保存的封面图片\n  getSavedCoverPhoto(): string | null {\n    return localStorage.getItem(`${STORAGE_KEYS.COVER_PHOTO_PREFIX}${this.config.currentCharId}`);\n  }\n\n  // 设置封面图片\n  setCoverPhoto(url: string): void {\n    localStorage.setItem(`${STORAGE_KEYS.COVER_PHOTO_PREFIX}${this.config.currentCharId}`, url);\n  }\n\n  // 获取保存的个性签名\n  getSavedSignature(): string {\n    return localStorage.getItem(`${STORAGE_KEYS.SIGNATURE_PREFIX}${this.config.currentCharId}`) || '';\n  }\n\n  // 设置个性签名\n  setSignature(signature: string): void {\n    localStorage.setItem(`${STORAGE_KEYS.SIGNATURE_PREFIX}${this.config.currentCharId}`, signature);\n  }\n\n  // 获取保存的输入框占位符\n  getSavedInputPlaceholder(): string | null {\n    return localStorage.getItem(`${STORAGE_KEYS.INPUT_PLACEHOLDER_PREFIX}${this.config.currentCharId}`);\n  }\n\n  // 设置输入框占位符\n  setInputPlaceholder(placeholder: string): void {\n    localStorage.setItem(`${STORAGE_KEYS.INPUT_PLACEHOLDER_PREFIX}${this.config.currentCharId}`, placeholder);\n  }\n\n  // 获取手机尺寸设置\n  getPhoneSize(): 'default' | 'medium' | 'small' {\n    const savedSize = localStorage.getItem(STORAGE_KEYS.PHONE_SIZE) || 'default';\n    return savedSize === 'medium' ? 'medium' : savedSize === 'small' ? 'small' : 'default';\n  }\n\n  // 设置手机尺寸\n  setPhoneSize(size: 'default' | 'medium' | 'small'): void {\n    localStorage.setItem(STORAGE_KEYS.PHONE_SIZE, size);\n  }\n\n  // 获取全屏模式手机大小设置（百分比）\n  getFullscreenSize(): number {\n    const savedSize = localStorage.getItem(STORAGE_KEYS.FULLSCREEN_SIZE) || '100';\n    const size = parseInt(savedSize, 10);\n    // 确保在有效范围内\n    return Math.max(50, Math.min(200, size));\n  }\n\n  // 设置全屏模式手机大小（百分比）\n  setFullscreenSize(size: number): void {\n    // 确保在有效范围内\n    const clampedSize = Math.max(50, Math.min(200, size));\n    localStorage.setItem(STORAGE_KEYS.FULLSCREEN_SIZE, clampedSize.toString());\n  }\n\n  // 获取表情包尺寸设置\n  getStickerSize(): number {\n    const savedSize = localStorage.getItem(STORAGE_KEYS.STICKER_SIZE) || '120';\n    return parseInt(savedSize, 10);\n  }\n\n  // 设置表情包尺寸\n  setStickerSize(size: number): void {\n    localStorage.setItem(STORAGE_KEYS.STICKER_SIZE, size.toString());\n  }\n\n  // 获取版本通知状态\n  getLastNotifiedVersion(): string | null {\n    return localStorage.getItem(STORAGE_KEYS.LAST_NOTIFIED_VERSION);\n  }\n\n  // 设置版本通知状态\n  setLastNotifiedVersion(version: string): void {\n    localStorage.setItem(STORAGE_KEYS.LAST_NOTIFIED_VERSION, version);\n  }\n}\n","// debug-data.ts\n// 此文件包含用于测试和调试的数据\n// 在发布前应删除或注释掉对此文件的引用\n\nimport { LogEntry } from './script';\n\n// 获取当前日期和时间\nconst getCurrentDate = (): string => {\n  const now = new Date();\n  return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`;\n};\n\nconst getCurrentTime = (): string => {\n  const now = new Date();\n  return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n};\n\n// 生成随机ID\nconst generateId = (prefix: string): string => {\n  return `${prefix}_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n};\n\n// 测试数据\nexport const debugData: LogEntry[] = [\n  // 系统时间条目\n  {\n    type: 'time',\n    content: {\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n    },\n  },\n\n  // 系统事件条目\n  {\n    type: 'event',\n    content: {\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n      description: '调试模式已启用',\n    },\n  },\n\n  // 文本消息 - 用户\n  {\n    id: generateId('msg'),\n    type: 'message',\n    sender: 'me',\n    content: '你好，这是一条测试消息',\n  },\n\n  // 文本消息 - AI\n  {\n    id: generateId('msg'),\n    type: 'message',\n    sender: 'them',\n    content: '你好！很高兴见到你，这是一条AI回复的测试消息。',\n  },\n\n  // 表情消息 - 用户\n  {\n    id: generateId('sticker'),\n    type: 'sticker',\n    sender: 'me',\n    content: '好的',\n  },\n\n  // 表情消息 - AI\n  {\n    id: generateId('sticker'),\n    type: 'sticker',\n    sender: 'them',\n    content: '好的',\n  },\n\n  // 图片消息 - 用户\n  {\n    id: generateId('img'),\n    type: 'image',\n    sender: 'me',\n    content: {\n      type: 'url',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_1.jpg',\n    },\n  },\n\n  // 图片消息 - AI\n  {\n    id: generateId('img'),\n    type: 'image',\n    sender: 'them',\n    content: {\n      type: 'url',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色星星_1.jpg',\n    },\n  },\n\n  // 图片消息 - 描述类型\n  {\n    id: generateId('img'),\n    type: 'image',\n    sender: 'them',\n    content: {\n      type: 'desc',\n      value: '这是一张描述类型的图片，实际上不会显示图片内容',\n    },\n  },\n\n  // 语音消息 - 用户\n  {\n    id: generateId('voice'),\n    type: 'voice',\n    sender: 'me',\n    content: {\n      text: '这是一条测试语音消息的文本内容',\n      duration: 5,\n    },\n  },\n\n  // 语音消息 - AI\n  {\n    id: generateId('voice'),\n    type: 'voice',\n    sender: 'them',\n    content: {\n      text: '这是AI回复的语音消息文本内容',\n      duration: 8,\n    },\n  },\n\n  // 位置消息 - 用户\n  {\n    id: generateId('loc'),\n    type: 'location',\n    sender: 'me',\n    content: '北京市朝阳区三里屯',\n  },\n\n  // 位置消息 - AI\n  {\n    id: generateId('loc'),\n    type: 'location',\n    sender: 'them',\n    content: '上海市浦东新区陆家嘴',\n  },\n\n  // 转账消息 - 用户发送\n  {\n    id: generateId('transfer'),\n    type: 'transfer',\n    sender: 'me',\n    content: JSON.stringify({\n      amount: '88.88',\n      note: '测试转账',\n      status: 'sent',\n    }),\n    data: {\n      amount: '88.88',\n      note: '测试转账',\n      status: 'sent',\n    },\n  },\n\n  // 转账消息 - AI接受\n  {\n    id: generateId('transfer'),\n    type: 'transfer',\n    sender: 'them',\n    content: JSON.stringify({\n      amount: '88.88',\n      note: '测试转账',\n      status: 'accepted',\n    }),\n    data: {\n      amount: '88.88',\n      note: '测试转账',\n      status: 'accepted',\n    },\n  },\n\n  // 转账消息 - AI发送\n  {\n    id: generateId('transfer'),\n    type: 'transfer',\n    sender: 'them',\n    content: JSON.stringify({\n      amount: '66.66',\n      note: 'AI测试转账',\n      status: 'sent',\n    }),\n    data: {\n      amount: '66.66',\n      note: 'AI测试转账',\n      status: 'sent',\n    },\n  },\n\n  // 转账消息 - 用户接受\n  {\n    id: generateId('transfer'),\n    type: 'transfer',\n    sender: 'me',\n    content: JSON.stringify({\n      amount: '66.66',\n      note: 'AI测试转账',\n      status: 'accepted',\n    }),\n    data: {\n      amount: '66.66',\n      note: 'AI测试转账',\n      status: 'accepted',\n    },\n  },\n\n  // 礼物消息 - 用户发送\n  {\n    id: generateId('gift'),\n    type: 'gift',\n    sender: 'me',\n    content: JSON.stringify({\n      name: '生日蛋糕',\n      price: '99.99',\n      status: 'sent',\n    }),\n    data: {\n      name: '生日蛋糕',\n      price: '99.99',\n      status: 'sent',\n    },\n  },\n\n  // 礼物消息 - AI接受\n  {\n    id: generateId('gift'),\n    type: 'gift',\n    sender: 'them',\n    content: JSON.stringify({\n      name: '生日蛋糕',\n      status: 'accepted',\n    }),\n    data: {\n      name: '生日蛋糕',\n      status: 'accepted',\n    },\n  },\n\n  // 礼物消息 - AI发送\n  {\n    id: generateId('gift'),\n    type: 'gift',\n    sender: 'them',\n    content: JSON.stringify({\n      name: '巧克力',\n      price: '39.99',\n      status: 'sent',\n    }),\n    data: {\n      name: '巧克力',\n      price: '39.99',\n      status: 'sent',\n    },\n  },\n\n  // 礼物消息 - 用户接受\n  {\n    id: generateId('gift'),\n    type: 'gift',\n    sender: 'me',\n    content: JSON.stringify({\n      name: '巧克力',\n      status: 'accepted',\n    }),\n    data: {\n      name: '巧克力',\n      status: 'accepted',\n    },\n  },\n\n  // 文件消息 - 用户\n  {\n    id: generateId('file'),\n    type: 'file',\n    sender: 'me',\n    content: '测试文档.docx',\n  },\n\n  // 文件消息 - AI\n  {\n    id: generateId('file'),\n    type: 'file',\n    sender: 'them',\n    content: '重要资料.pdf',\n  },\n\n  // 朋友圈 - 用户发布\n  {\n    key: 'USER_MOMENT',\n    data: {\n      text: '这是用户发布的朋友圈测试内容',\n      image: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_2.jpg',\n      image_type: 'url',\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n    },\n  },\n\n  // 朋友圈 - AI发布\n  {\n    key: 'CHAR_MOMENT',\n    data: {\n      text: '这是AI发布的朋友圈测试内容',\n      image: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色小猫_1.jpg',\n      image_type: 'url',\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n    },\n  },\n\n  // 朋友圈 - 纯文本\n  {\n    key: 'CHAR_MOMENT',\n    data: {\n      text: '这是一条没有图片的朋友圈',\n      image: '',\n      image_type: 'none',\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n    },\n  },\n\n  // 朋友圈 - 图片描述\n  {\n    key: 'USER_MOMENT',\n    data: {\n      text: '这是带有图片描述的朋友圈',\n      image: '一张美丽的风景照片',\n      image_type: 'desc',\n      image_desc: '一张美丽的风景照片',\n      date: getCurrentDate(),\n      time: getCurrentTime(),\n    },\n  },\n\n  // 朋友圈评论 - 用户评论\n  {\n    key: 'USER_COMMENT',\n    data: {\n      text: '这是用户的评论',\n      target_post_id: 1,\n    },\n  },\n\n  // 朋友圈评论 - AI评论\n  {\n    key: 'CHAR_COMMENT',\n    data: {\n      text: '这是AI的评论',\n      target_post_id: 0,\n    },\n  },\n\n  // 朋友圈点赞 - 用户点赞\n  {\n    key: 'USER_LIKE',\n    data: {\n      target_post_id: 1,\n    },\n  },\n\n  // 朋友圈点赞 - AI点赞\n  {\n    key: 'CHAR_LIKE',\n    data: {\n      target_post_id: 0,\n    },\n  },\n\n  // 撤回消息示例\n  {\n    id: generateId('msg'),\n    type: 'message',\n    sender: 'them',\n    content: '这条消息将被撤回',\n    recalled: true,\n    recalled_content: '这条消息将被撤回',\n    recalled_timestamp: getCurrentTime(),\n  },\n];\n\n// 加载调试数据的函数 - 优化版本，减少性能消耗\nexport function loadDebugData(blmxManager: any): void {\n  // 检查是否在开发模式\n  const isDevelopment = window.location.hostname === 'localhost' || window.location.search.includes('debug=true');\n\n  if (!isDevelopment) {\n    console.log('[DEBUG] 生产模式，跳过调试数据加载');\n    return;\n  }\n\n  console.log('[DEBUG] 正在加载调试数据...');\n\n  // 批量添加，减少单次操作\n  const batchSize = 10;\n  let index = 0;\n\n  const addBatch = () => {\n    const batch = debugData.slice(index, index + batchSize);\n    batch.forEach(entry => {\n      blmxManager.addEntry(entry);\n    });\n\n    index += batchSize;\n\n    if (index < debugData.length) {\n      // 使用requestAnimationFrame避免阻塞UI\n      requestAnimationFrame(addBatch);\n    } else {\n      console.log('[DEBUG] 调试数据加载完成，共加载', debugData.length, '条数据');\n    }\n  };\n\n  addBatch();\n}\n\n// 清除调试数据的函数\nexport function clearDebugData(blmxManager: any): void {\n  console.log('[DEBUG] 正在清除调试数据...');\n  blmxManager.logEntries = [];\n  console.log('[DEBUG] 调试数据已清除');\n}\n\n// 添加单个测试数据的函数，方便在控制台中使用\nexport function addTestEntry(blmxManager: any, entryType: string): void {\n  let entry: any = null;\n\n  switch (entryType) {\n    case 'text-user':\n      entry = {\n        id: generateId('msg'),\n        type: 'message',\n        sender: 'me',\n        content: '这是一条测试文本消息',\n      };\n      break;\n    case 'text-char':\n      entry = {\n        id: generateId('msg'),\n        type: 'message',\n        sender: 'them',\n        content: '这是一条AI回复的测试消息',\n      };\n      break;\n    case 'sticker-user':\n      entry = {\n        id: generateId('sticker'),\n        type: 'sticker',\n        sender: 'me',\n        content: '好的',\n      };\n      break;\n    case 'sticker-char':\n      entry = {\n        id: generateId('sticker'),\n        type: 'sticker',\n        sender: 'them',\n        content: '好的',\n      };\n      break;\n    case 'image-user':\n      entry = {\n        id: generateId('img'),\n        type: 'image',\n        sender: 'me',\n        content: {\n          type: 'url',\n          value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_1.jpg',\n        },\n      };\n      break;\n    case 'image-char':\n      entry = {\n        id: generateId('img'),\n        type: 'image',\n        sender: 'them',\n        content: {\n          type: 'url',\n          value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色星星_1.jpg',\n        },\n      };\n      break;\n    case 'voice-user':\n      entry = {\n        id: generateId('voice'),\n        type: 'voice',\n        sender: 'me',\n        content: {\n          text: '这是一条测试语音消息',\n          duration: 3,\n        },\n      };\n      break;\n    case 'voice-char':\n      entry = {\n        id: generateId('voice'),\n        type: 'voice',\n        sender: 'them',\n        content: {\n          text: '这是AI的测试语音消息',\n          duration: 4,\n        },\n      };\n      break;\n    case 'transfer-user':\n      entry = {\n        id: generateId('transfer'),\n        type: 'transfer',\n        sender: 'me',\n        content: JSON.stringify({\n          amount: '88.88',\n          note: '测试转账',\n          status: 'sent',\n        }),\n        data: {\n          amount: '88.88',\n          note: '测试转账',\n          status: 'sent',\n        },\n      };\n      break;\n    case 'transfer-char':\n      entry = {\n        id: generateId('transfer'),\n        type: 'transfer',\n        sender: 'them',\n        content: JSON.stringify({\n          amount: '66.66',\n          note: 'AI测试转账',\n          status: 'sent',\n        }),\n        data: {\n          amount: '66.66',\n          note: 'AI测试转账',\n          status: 'sent',\n        },\n      };\n      break;\n    case 'gift-user':\n      entry = {\n        id: generateId('gift'),\n        type: 'gift',\n        sender: 'me',\n        content: JSON.stringify({\n          name: '生日蛋糕',\n          price: '99.99',\n          status: 'sent',\n        }),\n        data: {\n          name: '生日蛋糕',\n          price: '99.99',\n          status: 'sent',\n        },\n      };\n      break;\n    case 'gift-char':\n      entry = {\n        id: generateId('gift'),\n        type: 'gift',\n        sender: 'them',\n        content: JSON.stringify({\n          name: '巧克力',\n          price: '39.99',\n          status: 'sent',\n        }),\n        data: {\n          name: '巧克力',\n          price: '39.99',\n          status: 'sent',\n        },\n      };\n      break;\n    case 'moment-user':\n      entry = {\n        key: 'USER_MOMENT',\n        data: {\n          text: '用户朋友圈测试',\n          image: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_2.jpg',\n          image_type: 'url',\n          date: getCurrentDate(),\n          time: getCurrentTime(),\n        },\n      };\n      break;\n    case 'moment-char':\n      entry = {\n        key: 'CHAR_MOMENT',\n        data: {\n          text: 'AI朋友圈测试',\n          image: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色小猫_1.jpg',\n          image_type: 'url',\n          date: getCurrentDate(),\n          time: getCurrentTime(),\n        },\n      };\n      break;\n    case 'event-short':\n      entry = {\n        type: 'event',\n        content: {\n          date: getCurrentDate(),\n          time: getCurrentTime(),\n          description: '这是一个简短的事件日志测试',\n        },\n      };\n      break;\n    case 'event-long':\n      entry = {\n        type: 'event',\n        content: {\n          date: getCurrentDate(),\n          time: getCurrentTime(),\n          description:\n            '这是一个非常长的事件日志测试，用来验证长文本的显示效果。在物语世界的深处，隐藏着无数的秘密和传说。每当夜幕降临，星光洒向大地，那些古老的故事便会在风中轻声诉说。主角踏上了寻找真相的旅程，穿越了森林、山川和海洋，遇到了各种各样的人物和挑战。这段旅程不仅是对外在世界的探索，更是对内心深处的自我发现。',\n        },\n      };\n      break;\n    case 'time':\n      entry = {\n        type: 'time',\n        content: {\n          date: getCurrentDate(),\n          time: getCurrentTime(),\n        },\n      };\n      break;\n    default:\n      console.error('[DEBUG] 未知的测试数据类型:', entryType);\n      return;\n  }\n\n  if (entry) {\n    blmxManager.addEntry(entry);\n    blmxManager.persistLogToStorage();\n    console.log(`[DEBUG] 已添加测试数据: ${entryType}`, entry);\n  }\n}\n\n// 显示测试条目类型\nexport function showTestEntryTypes(): void {\n  console.log('[BLMX Debug] 可用的测试条目类型:');\n  console.log('- text-user: 用户文本消息');\n  console.log('- text-char: AI文本消息');\n  console.log('- sticker-user: 用户表情消息');\n  console.log('- sticker-char: AI表情消息');\n  console.log('- image-user: 用户图片消息');\n  console.log('- image-char: AI图片消息');\n  console.log('- voice-user: 用户语音消息');\n  console.log('- voice-char: AI语音消息');\n  console.log('- transfer-user: 用户转账消息');\n  console.log('- gift-user: 用户礼物消息');\n  console.log('- moment-user: 用户朋友圈动态');\n  console.log('- moment-char: AI朋友圈动态');\n  console.log('- event-short: 短事件日志');\n  console.log('- event-long: 长事件日志（测试长文本显示）');\n  console.log('- time: 时间戳');\n}\n\n// 显示调试信息\nexport function showDebugInfo(appController: any): void {\n  console.log('[BLMX Debug] 调试信息:');\n\n  try {\n    // 确保能够获取到这些方法\n    const rawAiResponse = appController.getRawAiResponse ? appController.getRawAiResponse() : '无法获取';\n    const fullPrompt = appController.getFullPrompt ? appController.getFullPrompt() : '无法获取';\n    const latestAiRawResponse = appController.getLatestAiRawResponse\n      ? appController.getLatestAiRawResponse()\n      : '无法获取';\n    const latestSentPrompt = appController.getLatestSentPrompt ? appController.getLatestSentPrompt() : '无法获取';\n\n    console.log('- 原始AI响应:', rawAiResponse);\n    console.log('- 完整提示词:', fullPrompt);\n    console.log('- 最新处理后的AI响应:', latestAiRawResponse);\n    console.log('- 最新发送给AI的提示:', latestSentPrompt);\n  } catch (error) {\n    console.error('[BLMX Debug] 获取调试信息时出错:', error);\n  }\n}\n","// 输入处理模块\n// 负责消息发送、文件上传、语音录制、表情包选择等功能\n\nimport { ConfigManager, Sticker } from './config-manager';\nimport { DialogManager } from './dialog-manager';\nimport { LogEntry } from './script';\n\nexport class InputHandler {\n  private configManager: ConfigManager;\n  private onStageAndDisplayEntry: (entry: LogEntry) => void;\n  private onUpdateFooterButtonsState: () => void;\n  private dialogManager: DialogManager;\n\n  constructor(\n    configManager: ConfigManager,\n    onStageAndDisplayEntry: (entry: LogEntry) => void,\n    onUpdateFooterButtonsState: () => void,\n  ) {\n    this.configManager = configManager;\n    this.onStageAndDisplayEntry = onStageAndDisplayEntry;\n    this.onUpdateFooterButtonsState = onUpdateFooterButtonsState;\n    this.dialogManager = DialogManager.getInstance();\n  }\n\n  // 处理转账接受\n  async handleTransferAccept(data: any): Promise<void> {\n    const result = await this.dialogManager.showReceiveDialog('transfer', data);\n    if (result === 'accept') {\n      const acceptData = { ...data, status: 'accepted' };\n      this.onStageAndDisplayEntry({\n        type: 'transfer',\n        sender: 'me',\n        content: JSON.stringify(acceptData),\n        data: acceptData,\n        id: `transfer-${Date.now()}`,\n      } as any);\n    } else if (result === 'reject') {\n      const rejectData = { ...data, status: 'rejected' };\n      this.onStageAndDisplayEntry({\n        type: 'transfer',\n        sender: 'me',\n        content: JSON.stringify(rejectData),\n        data: rejectData,\n        id: `transfer-${Date.now()}`,\n      } as any);\n    }\n  }\n\n  // 处理礼物动作\n  async handleGiftAction(data: any): Promise<void> {\n    const result = await this.dialogManager.showReceiveDialog('gift', data);\n    if (result === 'accept') {\n      const receiptData = { name: data.name, status: 'accepted' };\n      this.onStageAndDisplayEntry({\n        type: 'gift',\n        sender: 'me',\n        content: JSON.stringify(receiptData),\n        data: receiptData,\n        id: `gift-${Date.now()}`,\n      } as any);\n    } else if (result === 'reject') {\n      const receiptData = { name: data.name, status: 'rejected' };\n      this.onStageAndDisplayEntry({\n        type: 'gift',\n        sender: 'me',\n        content: JSON.stringify(receiptData),\n        data: receiptData,\n        id: `gift-${Date.now()}`,\n      } as any);\n    }\n    // 通知有待处理的通知\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送文本消息\n  sendTextMessage(text: string): void {\n    if (!text.trim()) return;\n\n    const messageEntry: LogEntry = {\n      type: 'message',\n      sender: 'me',\n      content: text.trim(),\n      id: `msg-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(messageEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送表情包 - 简化数据结构\n  sendSticker(stickerName: string): void {\n    const stickerUrl = this.configManager.findStickerUrlByName(stickerName);\n    if (!stickerUrl) {\n      console.error(`[BLMX] 未找到表情包: ${stickerName}`);\n      return;\n    }\n\n    // 使用简单的数据结构，与原版保持一致\n    const stickerEntry: LogEntry = {\n      type: 'sticker',\n      sender: 'me',\n      content: stickerName, // 直接存储表情包名称\n      id: `sticker-${Date.now()}-${Math.random()}`, // 恢复原来的ID格式以保持兼容性\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(stickerEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送图片\n  sendImage(imageData: { type: 'url' | 'file'; value: string; name?: string }): void {\n    const imageEntry: LogEntry = {\n      type: 'image',\n      sender: 'me',\n      content: imageData,\n      id: `image-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(imageEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送语音消息\n  sendVoiceMessage(voiceData: { text: string; duration?: number }): void {\n    const voiceEntry: LogEntry = {\n      type: 'voice',\n      sender: 'me',\n      content: voiceData,\n      id: `voice-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(voiceEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送位置信息\n  sendLocation(locationData: { name: string; address: string; latitude?: number; longitude?: number }): void {\n    const locationEntry: LogEntry = {\n      type: 'location',\n      sender: 'me',\n      content: locationData,\n      id: `location-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(locationEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送文件\n  sendFile(fileData: { name: string; size: number; type: string; url?: string }): void {\n    const fileEntry: LogEntry = {\n      type: 'file',\n      sender: 'me',\n      content: fileData,\n      id: `file-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(fileEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送转账\n  sendTransfer(transferData: { amount: number; note?: string }): void {\n    const transferEntry: LogEntry = {\n      type: 'transfer',\n      sender: 'me',\n      content: transferData,\n      id: `transfer-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(transferEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 发送礼物\n  sendGift(giftData: { name: string; image?: string; description?: string }): void {\n    const giftEntry: LogEntry = {\n      type: 'gift',\n      sender: 'me',\n      content: giftData,\n      id: `gift-${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n    } as any;\n\n    this.onStageAndDisplayEntry(giftEntry);\n    this.onUpdateFooterButtonsState();\n  }\n\n  // 处理文件上传\n  async handleFileUpload(file: File): Promise<void> {\n    try {\n      if (file.type.startsWith('image/')) {\n        // 处理图片文件\n        const reader = new FileReader();\n        reader.onload = e => {\n          const result = e.target?.result as string;\n          this.sendImage({\n            type: 'file',\n            value: result,\n            name: file.name,\n          });\n        };\n        reader.readAsDataURL(file);\n      } else {\n        // 处理其他文件类型\n        this.sendFile({\n          name: file.name,\n          size: file.size,\n          type: file.type,\n        });\n      }\n    } catch (error) {\n      console.error('[BLMX] 文件上传失败:', error);\n      const dialogManager = DialogManager.getInstance();\n      await dialogManager.alert('文件上传失败，请重试。', '上传失败');\n    }\n  }\n\n  // 处理图片URL输入\n  async handleImageUrl(url: string): Promise<void> {\n    if (!url.trim()) return;\n\n    // 验证URL格式\n    try {\n      new URL(url);\n      this.sendImage({\n        type: 'url',\n        value: url.trim(),\n      });\n    } catch (error) {\n      const dialogManager = DialogManager.getInstance();\n      await dialogManager.alert('请输入有效的图片URL', 'URL格式错误');\n    }\n  }\n\n  // 处理语音录制\n  async handleVoiceRecording(): Promise<void> {\n    try {\n      const dialogManager = DialogManager.getInstance();\n\n      // 检查浏览器是否支持语音录制\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        await dialogManager.alert('您的浏览器不支持语音录制功能', '不支持语音录制');\n        return;\n      }\n\n      // 请求麦克风权限\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n      // 这里可以集成语音录制库，如 MediaRecorder API\n      // 为了简化，这里只是模拟语音录制\n      const text = await dialogManager.prompt('请输入语音内容（模拟语音转文字）:', '', '语音录制');\n      if (text) {\n        this.sendVoiceMessage({\n          text: text.trim(),\n          duration: Math.floor(Math.random() * 30) + 5, // 模拟5-35秒的语音\n        });\n      }\n\n      // 停止录制\n      stream.getTracks().forEach(track => track.stop());\n    } catch (error) {\n      console.error('[BLMX] 语音录制失败:', error);\n      const dialogManager = DialogManager.getInstance();\n      await dialogManager.alert('语音录制失败，请检查麦克风权限。', '录制失败');\n    }\n  }\n\n  // 处理位置分享\n  handleLocationShare(): void {\n    // 检查浏览器是否支持地理位置\n    if (!navigator.geolocation) {\n      alert('您的浏览器不支持地理位置功能');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        const locationName = prompt('请输入位置名称:') || '我的位置';\n        const address = prompt('请输入详细地址:') || `纬度: ${latitude.toFixed(6)}, 经度: ${longitude.toFixed(6)}`;\n\n        this.sendLocation({\n          name: locationName,\n          address: address,\n          latitude: latitude,\n          longitude: longitude,\n        });\n      },\n      error => {\n        console.error('[BLMX] 获取位置失败:', error);\n        // 允许用户手动输入位置信息\n        const locationName = prompt('无法获取当前位置，请手动输入位置名称:');\n        const address = prompt('请输入详细地址:');\n\n        if (locationName && address) {\n          this.sendLocation({\n            name: locationName,\n            address: address,\n          });\n        }\n      },\n    );\n  }\n\n  // 处理转账发送\n  handleTransferSend(): void {\n    const amountStr = prompt('请输入转账金额:');\n    if (!amountStr) return;\n\n    const amount = parseFloat(amountStr);\n    if (isNaN(amount) || amount <= 0) {\n      alert('请输入有效的金额');\n      return;\n    }\n\n    const note = prompt('请输入转账备注（可选）:') || '';\n\n    this.sendTransfer({\n      amount: amount,\n      note: note,\n    });\n  }\n\n  // 处理礼物发送\n  handleGiftSend(): void {\n    const giftName = prompt('请输入礼物名称:');\n    if (!giftName) return;\n\n    const giftImage = prompt('请输入礼物图片URL（可选）:') || '';\n    const description = prompt('请输入礼物描述（可选）:') || '';\n\n    this.sendGift({\n      name: giftName,\n      image: giftImage,\n      description: description,\n    });\n  }\n\n  // 获取表情包列表 - 增加向后兼容性\n  getStickerList(): Sticker[] {\n    // 尝试从新的存储键读取\n    let globalStickers = JSON.parse(localStorage.getItem('blmx_wechat_stickers_global_blmx') || '[]');\n    let charStickers = JSON.parse(\n      localStorage.getItem(`blmx_char_stickers_blmx_${this.configManager.getConfig().currentCharId}`) || '[]',\n    );\n\n    // 如果新存储键没有数据，尝试从旧存储键读取\n    if (globalStickers.length === 0) {\n      const oldGlobalStickers = JSON.parse(localStorage.getItem('blmx_wechat_stickers_global') || '[]');\n      if (oldGlobalStickers.length > 0) {\n        globalStickers = oldGlobalStickers;\n      }\n    }\n\n    if (charStickers.length === 0) {\n      const oldCharStickers = JSON.parse(\n        localStorage.getItem(`blmx_char_stickers_${this.configManager.getConfig().currentCharId}`) || '[]',\n      );\n      if (oldCharStickers.length > 0) {\n        charStickers = oldCharStickers;\n      }\n    }\n\n    return [...globalStickers, ...charStickers];\n  }\n\n  // 搜索表情包\n  searchStickers(query: string): Sticker[] {\n    const stickers = this.getStickerList();\n    if (!query.trim()) return stickers;\n\n    const searchTerm = query.toLowerCase();\n    return stickers.filter(sticker => sticker.label.toLowerCase().includes(searchTerm));\n  }\n\n  // 清空输入框\n  clearInput(): void {\n    const inputElement = document.getElementById('wechat-input-field') as HTMLInputElement;\n    if (inputElement) {\n      inputElement.value = '';\n      this.onUpdateFooterButtonsState();\n    }\n  }\n\n  // 设置输入框焦点\n  focusInput(): void {\n    const inputElement = document.getElementById('wechat-input-field') as HTMLInputElement;\n    if (inputElement) {\n      inputElement.focus();\n    }\n  }\n\n  // 获取输入框内容\n  getInputText(): string {\n    const inputElement = document.getElementById('wechat-input-field') as HTMLInputElement;\n    return inputElement ? inputElement.value : '';\n  }\n\n  // 设置输入框内容\n  setInputText(text: string): void {\n    const inputElement = document.getElementById('wechat-input-field') as HTMLInputElement;\n    if (inputElement) {\n      inputElement.value = text;\n      this.onUpdateFooterButtonsState();\n    }\n  }\n}\n","// 朋友圈管理模块\n// 负责朋友圈渲染、通知管理、时间格式化等功能\n\nimport { ConfigManager } from './config-manager';\nimport { BLMX_Protocol, LogEntry, MomentEntry } from './script';\nimport { UIRenderer } from './ui-renderer';\n\n// Allow use of lodash as global\n// @ts-ignore\ndeclare const _: any;\n\nexport class MomentsManager {\n  private blmxManager: BLMX_Protocol;\n  private configManager: ConfigManager;\n  private uiRenderer: UIRenderer;\n  private hasMomentNotification: boolean = false;\n\n  constructor(blmxManager: BLMX_Protocol, configManager: ConfigManager, uiRenderer: UIRenderer) {\n    this.blmxManager = blmxManager;\n    this.configManager = configManager;\n    this.uiRenderer = uiRenderer;\n\n    // 初始化通知状态\n    this.hasMomentNotification = this.configManager.getMomentNotificationState();\n  }\n\n  // 渲染朋友圈\n  renderMomentsFeed(): void {\n    if (!this.blmxManager || !this.uiRenderer) return;\n\n    const logEntries = this.blmxManager.logEntries;\n    const avatars = this.configManager.getConfig().avatars;\n\n    // 使用jQuery选择器\n    const $momentsFeedList = $('#moments-feed-list');\n    if (!$momentsFeedList.length) return;\n\n    // 检查用户是否在朋友圈界面，如果是则更新最后查看时间戳\n    const isCurrentlyInMomentsView = this.isInMomentsView();\n    if (isCurrentlyInMomentsView) {\n      this.setLastMomentViewTimestamp();\n      // 清除朋友圈通知，因为用户正在查看朋友圈\n      this.setMomentNotification(false);\n    }\n\n    $momentsFeedList.empty();\n\n    // 使用lodash进行数据处理\n    const posts: Record<number, any> = {};\n    const momentPostLogIndices = _.reduce(\n      logEntries,\n      (result: number[], entry: LogEntry, index: number) => {\n        if ('key' in entry && entry.key.includes('_MOMENT')) {\n          result.push(index);\n        }\n        return result;\n      },\n      [],\n    );\n\n    // 收集所有帖子\n    _.forEach(momentPostLogIndices, (logIndex: number) => {\n      const entry = logEntries[logIndex];\n      posts[logIndex] = { ...entry, likes: [], comments: [], id: logIndex };\n    });\n\n    // 检查是否有CHAR发表的新朋友圈或评论\n    let hasNewCharMoments = false;\n    const lastViewTimestamp = this.getLastMomentViewTimestamp();\n    const userInMomentsView = this.isInMomentsView();\n\n    // 处理点赞和评论\n    _.forEach(logEntries, (entry: LogEntry, index: number) => {\n      if ('key' in entry && (entry.key.includes('_LIKE') || entry.key.includes('_COMMENT'))) {\n        // 修复target_post_id的处理逻辑，使用与原版相同的方式\n        const targetPostAbsoluteIndex = momentPostLogIndices[parseInt((entry as any).data.target_post_id, 10)];\n        const targetPost = posts[targetPostAbsoluteIndex];\n\n        if (targetPost) {\n          if (entry.key.includes('_LIKE')) {\n            const likerName = entry.key.startsWith('USER') ? this.getDisplayName('user') : this.getDisplayName('char');\n            if (!_.some(targetPost.likes, (l: any) => l.name === likerName)) {\n              targetPost.likes.push({ key: entry.key, name: likerName, originalLogIndex: index });\n\n              // 如果是CHAR点赞，且用户不在朋友圈界面，检查是否是新活动\n              if (entry.key.startsWith('CHAR') && !userInMomentsView) {\n                // 使用索引位置来判断是否是新活动：\n                // 如果这个点赞在日志中的索引大于最后查看朋友圈时保存的日志长度，说明这是新活动\n                const isNewActivity = index > lastViewTimestamp;\n                if (isNewActivity) {\n                  hasNewCharMoments = true;\n                }\n              }\n            }\n          } else {\n            targetPost.comments.push({ ...entry, originalLogIndex: index });\n\n            // 如果是CHAR评论，且用户不在朋友圈界面，检查是否是新活动\n            if (entry.key.startsWith('CHAR') && !userInMomentsView) {\n              // 使用索引位置来判断是否是新活动\n              const isNewActivity = index > lastViewTimestamp;\n              if (isNewActivity) {\n                hasNewCharMoments = true;\n              }\n            }\n          }\n        } else {\n          console.warn(\n            `[BLMX] Could not find target post for interaction. target_post_id: ${\n              (entry as any).data.target_post_id\n            }, available posts: ${Object.keys(posts).join(', ')}`,\n            entry,\n          );\n        }\n      }\n\n      // 检查CHAR发表的朋友圈\n      if ('key' in entry && entry.key === 'CHAR_MOMENT') {\n        // 使用索引位置判断是否是新朋友圈\n        const isNewMoment = index > lastViewTimestamp;\n\n        // 只有当是新朋友圈且用户不在朋友圈界面时才显示通知\n        if (isNewMoment && !userInMomentsView) {\n          hasNewCharMoments = true;\n        }\n      }\n    });\n\n    // 更新朋友圈通知状态 - 只有当有新活动且用户不在朋友圈界面时才设置通知\n    if (!userInMomentsView) {\n      this.setMomentNotification(hasNewCharMoments);\n      // console.log('[BLMX] 朋友圈通知状态:', {\n      //   hasNewCharMoments,\n      //   lastViewIndex: this.getLastMomentViewTimestamp(),\n      //   currentLogLength: this.blmxManager.logEntries.length,\n      //   userInMomentsView,\n      // });\n    }\n\n    // 反转帖子顺序并渲染\n    _.chain(posts)\n      .values()\n      .reverse()\n      .forEach((post: any) => {\n        const fromUser = post.key.startsWith('USER');\n        const authorName = fromUser ? this.getDisplayName('user') : this.getDisplayName('char');\n        const authorAvatar = fromUser ? avatars.user : avatars.char;\n\n        const $li = $('<li>').addClass('moment-post').attr('data-post-id', post.id);\n\n        const momentSequenceId = momentPostLogIndices.indexOf(post.id);\n        $li.attr('data-moment-sequence-id', String(momentSequenceId));\n\n        // 设置moment-id属性，使用momentSequenceId作为朋友圈的唯一标识符\n        // 这样可以确保点赞和评论正确关联到对应的朋友圈\n        $li.attr('data-moment-id', String(momentSequenceId));\n\n        // 构建媒体HTML\n        let mediaHtml = '';\n        if (post.data.image_type === 'url' && post.data.image) {\n          mediaHtml = `<img src=\"${post.data.image}\" class=\"post-media-image\" />`;\n        } else if (post.data.image_type === 'desc' && post.data.image) {\n          mediaHtml = `<div class=\"image-desc-content\"><div class=\"text-wrapper\">${post.data.image}</div></div>`;\n        }\n\n        // 构建互动区域HTML\n        let interactionsHtml = '';\n        if (post.likes.length > 0 || post.comments.length > 0) {\n          const likersHtml =\n            post.likes.length > 0\n              ? `<div class=\"likes-section\"><i class=\"fas fa-heart\"></i> ${_.map(\n                  post.likes,\n                  (l: any) => `<span class=\"liker-name\">${l.name}</span>`,\n                ).join(', ')}</div>`\n              : '';\n\n          const commentsHtml =\n            post.comments.length > 0\n              ? `<ul class=\"comments-section\">${_.map(\n                  post.comments,\n                  (c: any) =>\n                    `<li><span class=\"comment-author\">${\n                      c.key.startsWith('USER') ? this.getDisplayName('user') : this.getDisplayName('char')\n                    }</span>: ${c.data.text}</li>`,\n                ).join('')}</ul>`\n              : '';\n\n          interactionsHtml = `<div class=\"post-interactions\">${likersHtml}${commentsHtml}</div>`;\n        }\n\n        // 使用自定义格式化时间函数\n        const displayTime = this.formatMomentTime(post.data.date, post.data.time);\n        const deleteBtnHtml = `<span class=\"delete-moment-btn\" title=\"删除\">删除</span>`;\n\n        $li.html(`<img src=\"${authorAvatar}\" class=\"post-author-avatar\" />\n                 <div class=\"post-details\">\n                     <span class=\"post-author-name\">${authorName}</span>\n                     <p class=\"post-content\">${post.data.text || ''}</p>\n                     <div class=\"post-media\">${mediaHtml}</div>\n                     <div class=\"post-meta\">\n                         <div class=\"post-meta-left\">\n                             <span class=\"timestamp\">${displayTime}</span>\n                             ${deleteBtnHtml}\n                         </div>\n                         <div class=\"post-actions\">\n                             <span class=\"comment-button\" title=\"评论/点赞\"><i class=\"fas fa-comment-dots\"></i></span>\n                         </div>\n                     </div>\n                     ${interactionsHtml}\n                 </div>`);\n\n        $momentsFeedList.append($li);\n      })\n      .value();\n\n    // 确保加载最新的封面图片\n    const savedCoverPhoto = this.configManager.getSavedCoverPhoto();\n    if (savedCoverPhoto) {\n      $('#moments-cover-photo').attr('src', savedCoverPhoto);\n    }\n  }\n\n  // 格式化朋友圈时间显示\n  private formatMomentTime(dateString: string, timeString: string): string {\n    try {\n      // 使用游戏内时间而非现实时间\n      const now = window.currentGameDate ? new Date(window.currentGameDate) : new Date();\n      const date = new Date(`${dateString} ${timeString}`);\n\n      const diffMs = now.getTime() - date.getTime();\n      const diffMins = Math.floor(diffMs / 60000);\n      const diffHours = Math.floor(diffMins / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (diffMins < 1) {\n        return '刚刚';\n      } else if (diffMins < 60) {\n        return `${diffMins}分钟前`;\n      } else if (diffHours < 24) {\n        return `${diffHours}小时前`;\n      } else if (diffDays === 1) {\n        return '昨天';\n      } else if (diffDays === 2) {\n        return '前天';\n      } else if (diffDays < 7) {\n        return `${diffDays}天前`;\n      } else {\n        // 超过一周显示具体日期\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${month}月${day}日`;\n      }\n    } catch (error) {\n      console.error('时间格式化错误:', error);\n      return `${dateString} ${timeString}`;\n    }\n  }\n\n  // 获取显示名称\n  private getDisplayName(type: 'user' | 'char'): string {\n    return this.configManager.getDisplayName(type);\n  }\n\n  // 检查用户是否在朋友圈界面\n  private isInMomentsView(): boolean {\n    return $('#moments-view').hasClass('active');\n  }\n\n  // 获取朋友圈通知状态\n  hasMomentNotifications(): boolean {\n    return this.configManager.getMomentNotificationState();\n  }\n\n  // 设置朋友圈通知状态\n  setMomentNotification(value: boolean): void {\n    this.hasMomentNotification = value;\n    this.configManager.setMomentNotificationState(value);\n    // 更新UI中的通知指示器\n    this.updateMomentNotificationIndicator();\n  }\n\n  // 更新朋友圈通知指示器\n  private updateMomentNotificationIndicator(): void {\n    const $optionsBtn = $('#wechat-options-btn');\n    if (this.hasMomentNotification) {\n      if (!$optionsBtn.find('.notification-dot').length) {\n        $optionsBtn.append('<span class=\"notification-dot\"></span>');\n      }\n    } else {\n      $optionsBtn.find('.notification-dot').remove();\n    }\n  }\n\n  // 获取最后查看朋友圈时的时间戳\n  private getLastMomentViewTimestamp(): number {\n    return this.configManager.getLastMomentViewTimestamp();\n  }\n\n  // 设置最后查看朋友圈时的时间戳\n  setLastMomentViewTimestamp(): void {\n    // 保存当前日志长度作为最后查看时间点\n    const currentLogLength = this.blmxManager.logEntries.length;\n    this.configManager.setLastMomentViewTimestamp(currentLogLength);\n  }\n\n  // 进入朋友圈视图时的处理\n  onEnterMomentsView(): void {\n    // console.log('[BLMX] 进入朋友圈视图，清除通知并更新最后查看时间');\n\n    // 使用jQuery更新封面图片\n    const savedCoverPhoto = this.configManager.getSavedCoverPhoto();\n    if (savedCoverPhoto) {\n      $('#moments-cover-photo').attr('src', savedCoverPhoto);\n    }\n\n    // 使用jQuery更新个性签名\n    const savedSignature = this.configManager.getSavedSignature();\n    $('#user-signature-display').text(savedSignature || '点击头像设置个性签名');\n\n    // 清除朋友圈通知\n    this.setMomentNotification(false);\n\n    // 更新最后查看朋友圈的时间戳\n    this.setLastMomentViewTimestamp();\n\n    // 记录当前日志长度用于调试\n    // console.log('[BLMX] 更新朋友圈最后查看索引为:', this.blmxManager.logEntries.length);\n  }\n\n  // 创建用户朋友圈动态\n  createUserMoment(text: string, image: string = '', imageType: string = 'none'): MomentEntry {\n    // 获取当前日期时间\n    const now = window.currentGameDate || new Date();\n    const dateStr = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(\n      now.getDate(),\n    ).padStart(2, '0')}`;\n    const timeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n\n    return {\n      key: 'USER_MOMENT',\n      data: {\n        text,\n        image,\n        image_type: imageType as 'url' | 'desc' | 'none',\n        date: dateStr,\n        time: timeStr,\n      },\n    };\n  }\n\n  // 发送朋友圈动态通知（用于用户名、签名等变更）\n  notifyMomentChange(type: 'name' | 'signature', _oldValue: string, newValue: string): void {\n    let text = '';\n    switch (type) {\n      case 'name':\n        text = `我改名字啦，新名字是\"${newValue}\"`;\n        break;\n      case 'signature':\n        text = `我的个性签名已更改为：\"${newValue}\"`;\n        break;\n    }\n\n    const momentEntry = this.createUserMoment(text);\n\n    // 添加到聊天记录\n    this.blmxManager.addEntry(momentEntry);\n    this.renderMomentsFeed();\n  }\n\n  // 处理消息撤回的朋友圈通知\n  notifyRecallViaMoments(sender: 'USER' | 'CHAR', targetText: string): any {\n    // 获取当前日期时间\n    const now = window.currentGameDate || new Date();\n    const timeStr = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n\n    // 创建撤回通知条目\n    const recallEntry = {\n      key: 'RECALL',\n      data: {\n        sender: sender,\n        target_text: targetText,\n        timestamp: `${timeStr}`,\n      },\n    };\n\n    // 添加到聊天记录\n    this.blmxManager.addEntry(recallEntry as any);\n\n    return recallEntry;\n  }\n}\n","// 主题编辑器模块 - 重构版本\n// 使用jQuery和lodash确保兼容性和稳定性\nimport { Theme, ThemeManager } from './theme-manager';\n\nexport class ThemeEditor {\n  private themeManager: ThemeManager;\n  private onThemeChanged?: () => void;\n  private $modal: JQuery<HTMLElement>;\n  private checkboxHandlers: Map<string, (e: JQuery.ClickEvent) => void> = new Map();\n\n  constructor(themeManager: ThemeManager, onThemeChanged?: () => void) {\n    this.themeManager = themeManager;\n    this.onThemeChanged = onThemeChanged;\n    this.$modal = $('#theme-editor-modal');\n  }\n\n  // 设置主题选择器 - 使用jQuery重构\n  setupThemeSelector(): void {\n    const $container = $('.theme-options');\n    if (!$container.length) return;\n\n    // 清空现有内容\n    $container.empty();\n\n    // 获取所有默认主题\n    const themes = this.themeManager.getThemes();\n\n    // 使用lodash遍历主题\n    _.forEach(themes, theme => {\n      const $themeButton = $('<div>').addClass('theme-option').css({\n        width: 'calc(50% - 0.5rem)',\n        'aspect-ratio': '1/1',\n        'border-radius': '8px',\n        'background-color': theme.colors.primary,\n        display: 'flex',\n        'flex-direction': 'column',\n        'align-items': 'center',\n        'justify-content': 'center',\n        cursor: 'pointer',\n        position: 'relative',\n        overflow: 'hidden',\n        'box-shadow': '0 2px 8px rgba(0,0,0,0.1)',\n      });\n\n      // 添加主题预览\n      const $previewEl = $('<div>').css({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        background: `linear-gradient(135deg, ${theme.colors.gradientStart}, ${theme.colors.gradientEnd})`,\n      });\n\n      // 添加气泡预览\n      const $bubblePreview = $('<div>').css({\n        position: 'relative',\n        width: '70%',\n        height: '60%',\n        display: 'flex',\n        'flex-direction': 'column',\n        'justify-content': 'space-between',\n        'z-index': 1,\n      });\n\n      const $themBubble = $('<div>').css({\n        'align-self': 'flex-start',\n        width: '60%',\n        height: '40%',\n        'background-color': theme.colors.bubbleThemBg,\n        'border-radius': '8px',\n      });\n\n      const $meBubble = $('<div>').css({\n        'align-self': 'flex-end',\n        width: '60%',\n        height: '40%',\n        'background-color': theme.colors.bubbleMeBg,\n        'border-radius': '8px',\n      });\n\n      $bubblePreview.append($themBubble, $meBubble);\n\n      // 添加主题名称\n      const $nameEl = $('<div>').text(theme.displayName).css({\n        position: 'relative',\n        color: 'white',\n        'font-size': '0.8rem',\n        'font-weight': '500',\n        'margin-top': '5px',\n        'text-shadow': '0 1px 2px rgba(0,0,0,0.3)',\n        'z-index': 1,\n      });\n\n      $themeButton.append($previewEl, $bubblePreview, $nameEl);\n\n      // 添加点击事件\n      $themeButton.on('click', () => {\n        this.themeManager.switchTheme(theme.name);\n        // 通知主题已更改\n        if (this.onThemeChanged) {\n          this.onThemeChanged();\n        }\n      });\n\n      $container.append($themeButton);\n    });\n\n    // 添加自定义主题选择按钮（正方形，用于切换主题）\n    this.addCustomThemeSelector($container);\n  }\n\n  // 添加自定义主题编辑按钮（长方形，用于打开编辑器）\n  addCustomThemeEditButton(): void {\n    // 查找设置面板中的按钮容器\n    const $settingsPanel = $('.settings-panel');\n    if (!$settingsPanel.length) return;\n\n    // 创建长方形的编辑按钮\n    const $editButton = $('<div>').addClass('custom-theme-edit-button').css({\n      width: '100%',\n      padding: '12px 16px',\n      margin: '8px 0',\n      'border-radius': '8px',\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      color: 'white',\n      'font-size': '0.9rem',\n      'font-weight': '500',\n      'text-align': 'center',\n      cursor: 'pointer',\n      'box-shadow': '0 2px 8px rgba(0,0,0,0.1)',\n      transition: 'all 0.2s ease',\n      display: 'flex',\n      'align-items': 'center',\n      'justify-content': 'center',\n      gap: '8px',\n    });\n\n    const $icon = $('<span>').html('🎨');\n    const $text = $('<span>').text('自定义主题设置');\n\n    $editButton.append($icon, $text);\n\n    // 添加悬停效果\n    $editButton\n      .on('mouseenter', function () {\n        $(this).css('transform', 'translateY(-1px)');\n      })\n      .on('mouseleave', function () {\n        $(this).css('transform', 'translateY(0)');\n      });\n\n    // 添加点击事件\n    $editButton.on('click', () => {\n      this.openThemeEditor();\n    });\n\n    // 将按钮添加到设置面板的适当位置\n    // 查找主题选择器容器，在其后添加编辑按钮\n    const $themeOptions = $settingsPanel.find('.theme-options');\n    if ($themeOptions.length) {\n      $themeOptions.after($editButton);\n    } else {\n      $settingsPanel.append($editButton);\n    }\n  }\n\n  // 添加自定义主题选择按钮（正方形，用于切换到自定义主题）\n  private addCustomThemeSelector($container: JQuery<HTMLElement>): void {\n    // 获取自定义主题数据\n    const customThemeData = this.getCustomThemeData();\n\n    const $customButton = $('<div>').addClass('theme-option custom-theme-option').css({\n      width: 'calc(50% - 0.5rem)',\n      'aspect-ratio': '1/1',\n      'border-radius': '8px',\n      background: customThemeData.background,\n      display: 'flex',\n      'flex-direction': 'column',\n      'align-items': 'center',\n      'justify-content': 'center',\n      cursor: 'pointer',\n      position: 'relative',\n      overflow: 'hidden',\n      'box-shadow': '0 2px 8px rgba(0,0,0,0.1)',\n    });\n\n    // 添加渐变背景预览（类似其他主题按钮）\n    const $previewEl = $('<div>').css({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      background: customThemeData.gradient,\n    });\n\n    const $iconEl = $('<div>').html('✨').css({\n      'font-size': '2rem',\n      'margin-bottom': '5px',\n      position: 'relative',\n      'z-index': 1,\n    });\n\n    const $nameEl = $('<div>').text(customThemeData.displayName).css({\n      color: 'white',\n      'font-size': '0.8rem',\n      'font-weight': '500',\n      'text-shadow': '0 1px 2px rgba(0,0,0,0.3)',\n      position: 'relative',\n      'z-index': 1,\n    });\n\n    $customButton.append($previewEl, $iconEl, $nameEl);\n\n    $customButton.on('click', () => {\n      // 切换到自定义主题\n      this.themeManager.switchTheme('custom');\n      // 通知主题已更改\n      if (this.onThemeChanged) {\n        this.onThemeChanged();\n      }\n    });\n\n    $container.append($customButton);\n  }\n\n  // 获取自定义主题数据（名称和颜色）\n  private getCustomThemeData(): { displayName: string; background: string; gradient: string } {\n    try {\n      const customThemeJson = localStorage.getItem('blmx_custom_theme');\n      if (customThemeJson) {\n        const customTheme = JSON.parse(customThemeJson);\n        const primaryColor = customTheme.colors?.primary || '#667eea';\n        const gradientStart = customTheme.colors?.gradientStart || primaryColor;\n        const gradientEnd = customTheme.colors?.gradientEnd || primaryColor;\n\n        return {\n          displayName: customTheme.displayName || '自定义主题',\n          background: primaryColor,\n          gradient: `linear-gradient(135deg, ${gradientStart}, ${gradientEnd})`,\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to load custom theme data:', error);\n    }\n\n    // 默认值\n    return {\n      displayName: '自定义主题',\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n    };\n  }\n\n  // 更新自定义主题按钮的显示（公共方法）\n  updateCustomThemeButton(): void {\n    const $customButton = $('.custom-theme-option');\n    if (!$customButton.length) return;\n\n    const customThemeData = this.getCustomThemeData();\n\n    // 更新背景渐变预览层\n    const $previewEl = $customButton.children().eq(0); // 第一个子元素是预览层\n    if ($previewEl.length) {\n      $previewEl.css('background', customThemeData.gradient);\n    }\n\n    // 更新主题名称（最后一个子元素）\n    const $nameEl = $customButton.children().last();\n    if ($nameEl.length && $nameEl.text() !== customThemeData.displayName) {\n      $nameEl.text(customThemeData.displayName);\n    }\n\n    // 更新按钮整体背景色\n    $customButton.css('background', customThemeData.background);\n  }\n\n  // 打开主题编辑器 - 使用jQuery重构\n  openThemeEditor(): void {\n    if (!this.$modal.length) return;\n\n    // 获取当前主题的实际应用数据（包括动态计算的值）\n    const currentTheme = this.themeManager.getCurrentThemeWithAppliedValues();\n    this.fillThemeEditor(currentTheme);\n\n    // 设置checkbox事件监听器\n    this.setupCheckboxes();\n\n    // 显示模态框\n    this.$modal.show();\n  }\n\n  // 关闭主题编辑器 - 使用jQuery重构\n  closeThemeEditor(): void {\n    this.$modal.hide();\n    // 清理checkbox事件监听器\n    this.cleanupCheckboxes();\n  }\n\n  // 填充主题编辑器 - 使用jQuery重构\n  private fillThemeEditor(theme: Theme): void {\n    // 使用jQuery选择器，更简洁\n    const $nameInput = $('#theme-name-input');\n    const $darkModeToggle = $('#dark-mode-toggle');\n    const $singleColorIconsToggle = $('#single-color-icons-toggle');\n\n    // 填充主题名称 - 修复：保持用户自定义的名称\n    let themeName: string;\n    if (theme.name === 'custom') {\n      // 如果是自定义主题，使用用户保存的displayName\n      themeName = theme.displayName || '我的自定义主题';\n    } else {\n      // 如果是基于其他主题的自定义，使用\"自定义 + 原主题名\"格式\n      themeName = `自定义 ${theme.displayName}`;\n    }\n    $nameInput.val(themeName);\n\n    // 定义颜色字段映射 - 使用lodash简化数据处理\n    const colorMappings = {\n      '#phone-frame-color': theme.colors.phoneFrame,\n      '#primary-color': theme.colors.primary,\n      '#light-color': theme.colors.light,\n      '#ultra-light-color': theme.colors.ultraLight,\n      '#deep-color': theme.colors.deep,\n      '#text-primary-color': theme.colors.textPrimary,\n      '#text-secondary-color': theme.colors.textSecondary,\n      '#bubble-me-color': theme.colors.bubbleMeBg,\n      '#bubble-me-text-color': theme.colors.bubbleMeText,\n      '#bubble-them-color': theme.colors.bubbleThemBg,\n      '#bubble-them-text-color': theme.colors.bubbleThemText,\n      '#status-bar-color': theme.colors.statusBarColor,\n      '#dynamic-island-color': theme.colors.dynamicIslandColor,\n      '#border-color': theme.colors.borderColor,\n      '#shadow-color': theme.colors.shadowColor,\n    };\n\n    // 使用lodash的forEach批量设置颜色值\n    _.forEach(colorMappings, (colorValue, selector) => {\n      $(selector).val(this.convertToHex(colorValue));\n    });\n\n    // 设置checkbox状态\n    $darkModeToggle.prop('checked', theme.colors.isDarkMode);\n    $singleColorIconsToggle.prop('checked', theme.colors.useSingleColorIcons || false);\n\n    // 注意：checkbox的事件监听器和初始状态在openThemeEditor()中的setupCheckboxes()里设置\n  }\n\n  // 设置checkbox事件监听器 - 使用jQuery重构\n  private setupCheckboxes(): void {\n    // 清理之前的事件监听器\n    this.cleanupCheckboxes();\n\n    // 设置夜间模式checkbox\n    this.setupSingleCheckboxWithJQuery('dark-mode-toggle', 'dark-mode-checkbox-button');\n\n    // 设置单一颜色图标checkbox\n    this.setupSingleCheckboxWithJQuery('single-color-icons-toggle', 'single-color-icons-checkbox-button');\n  }\n\n  // 清理checkbox事件监听器\n  private cleanupCheckboxes(): void {\n    // 移除所有存储的事件处理器\n    this.checkboxHandlers.forEach((handler, id) => {\n      $(`#${id}`).off('click', handler);\n    });\n    this.checkboxHandlers.clear();\n  }\n\n  // 使用jQuery设置单个checkbox\n  private setupSingleCheckboxWithJQuery(checkboxId: string, buttonId: string): void {\n    const $checkbox = $(`#${checkboxId}`);\n    const $button = $(`#${buttonId}`);\n\n    if (!$checkbox.length || !$button.length) return;\n\n    // 更新checkbox按钮状态的函数\n    const updateCheckboxState = (checked: boolean) => {\n      $button.toggleClass('checked', checked);\n    };\n\n    // 点击事件处理函数\n    const handleClick = (e: JQuery.ClickEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const checkbox = $checkbox[0] as HTMLInputElement;\n      checkbox.checked = !checkbox.checked;\n      updateCheckboxState(checkbox.checked);\n    };\n\n    // 存储事件处理器以便后续清理\n    this.checkboxHandlers.set(buttonId, handleClick);\n\n    // 添加点击事件监听器\n    $button.on('click', handleClick);\n\n    // 设置初始状态\n    const checkbox = $checkbox[0] as HTMLInputElement;\n    updateCheckboxState(checkbox.checked);\n  }\n\n  // 重置主题编辑器\n  resetThemeEditor(): void {\n    // 使用蓝色主题重置编辑器\n    const blueTheme = this.themeManager.getThemes().blue;\n    this.fillThemeEditor(blueTheme);\n\n    // 重新设置事件监听器，确保按钮能正常工作\n    this.setupCheckboxes();\n  }\n\n  // 导出主题为JSON - 修复：包含实际壁纸设置和正确文件名\n  exportThemeAsJSON(): void {\n    try {\n      const currentTheme = this.getCurrentThemeFromEditor();\n      const wallpaperManager = this.themeManager.getWallpaperManager();\n\n      // 获取当前实际使用的壁纸设置\n      const currentWallpapers = {\n        chat: wallpaperManager.getCurrentWallpaper('chat'),\n        home: wallpaperManager.getCurrentWallpaper('home'),\n        settings: wallpaperManager.getCurrentWallpaper('settings'),\n      };\n\n      // 构建导出数据，包含壁纸信息\n      const themeData = {\n        name: currentTheme.name,\n        displayName: currentTheme.displayName,\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        colors: currentTheme.colors,\n        wallpapers: currentWallpapers, // 包含实际使用的壁纸\n      };\n\n      const jsonString = JSON.stringify(themeData, null, 2);\n      const blob = new Blob([jsonString], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n\n      // 生成文件名：custom-主题名字.json\n      const themeName = currentTheme.displayName || '自定义主题';\n      const safeThemeName = themeName.replace(/[<>:\"/\\\\|?*]/g, '_'); // 替换文件名中的非法字符\n      const fileName = `custom-${safeThemeName}.json`;\n\n      // 使用jQuery创建下载链接\n      const $a = $('<a>', {\n        href: url,\n        download: fileName,\n        css: { display: 'none' },\n      });\n      $('body').append($a);\n      $a[0].click();\n      $a.remove();\n      URL.revokeObjectURL(url);\n\n      console.log(`[ThemeEditor] 主题已导出为JSON: ${fileName}`);\n    } catch (error) {\n      console.error('[ThemeEditor] 导出JSON失败:', error);\n      alert('导出失败，请重试');\n    }\n  }\n\n  // 导入主题文件\n  importTheme(): void {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.json';\n    input.style.display = 'none';\n\n    input.addEventListener('change', event => {\n      const file = (event.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const content = e.target?.result as string;\n          let themeData;\n\n          if (file.name.endsWith('.json')) {\n            themeData = JSON.parse(content);\n          } else {\n            throw new Error('只支持JSON格式的主题文件');\n          }\n\n          // 验证主题数据\n          if (!this.validateThemeData(themeData)) {\n            throw new Error('主题文件格式不正确');\n          }\n\n          // 应用导入的主题\n          this.applyImportedTheme(themeData);\n          console.log('[ThemeEditor] 主题导入成功');\n          alert('主题导入成功！');\n        } catch (error) {\n          console.error('[ThemeEditor] 导入失败:', error);\n          alert(`导入失败: ${error instanceof Error ? error.message : '未知错误'}`);\n        }\n      };\n\n      reader.readAsText(file);\n    });\n\n    // 使用jQuery操作DOM\n    $('body').append(input);\n    input.click();\n    $(input).remove();\n  }\n\n  // 从编辑器获取当前主题 - 使用jQuery重构\n  private getCurrentThemeFromEditor(): Theme {\n    // 使用jQuery获取值，更简洁\n    const getValue = (selector: string, defaultValue: string = '') => ($(selector).val() as string) || defaultValue;\n    const getChecked = (selector: string) => $(selector).prop('checked') as boolean;\n\n    return this.createCustomTheme({\n      name: getValue('#theme-name-input', '自定义主题'),\n      phoneFrame: getValue('#phone-frame-color', '#b4d0fa'),\n      primary: getValue('#primary-color', '#72adf3'),\n      light: getValue('#light-color', '#a8cbeb'),\n      ultraLight: getValue('#ultra-light-color', '#e8f4fd'),\n      deep: getValue('#deep-color', '#2c5282'),\n      textPrimary: getValue('#text-primary-color', 'rgb(139, 162, 186)'),\n      textSecondary: getValue('#text-secondary-color', '#64748b'),\n      bubbleMeBg: getValue('#bubble-me-color', '#a8cbeb'),\n      bubbleMeText: getValue('#bubble-me-text-color', '#ffffff'),\n      bubbleThemBg: getValue('#bubble-them-color', '#ffffff'),\n      bubbleThemText: getValue('#bubble-them-text-color', '#72adf3'),\n      appBgColor: '#ffffff',\n      settingsBgColor: '#f2f2f7',\n      settingsCardBgColor: '#ffffff',\n      statusBar: getValue('#status-bar-color', '#428af2'),\n      dynamicIsland: getValue('#dynamic-island-color', '#a0c4f4'),\n      border: getValue('#border-color', '#E0E0E0'),\n      shadow: getValue('#shadow-color', '#4a90e2'),\n      isDarkMode: getChecked('#dark-mode-toggle'),\n      useSingleColorIcons: getChecked('#single-color-icons-toggle'),\n    });\n  }\n\n  // 保存自定义主题 - 使用jQuery重构\n  saveCustomTheme(): void {\n    // 直接使用getCurrentThemeFromEditor方法，避免重复代码\n    const customTheme = this.getCurrentThemeFromEditor();\n\n    // 保存并应用主题\n    this.themeManager.saveCustomTheme(customTheme);\n    this.themeManager.switchTheme('custom');\n\n    // 更新自定义主题按钮的显示\n    this.updateCustomThemeButton();\n\n    // 关闭编辑器\n    this.closeThemeEditor();\n\n    // 通知主题已更改\n    if (this.onThemeChanged) {\n      this.onThemeChanged();\n    }\n  }\n\n  // 创建自定义主题\n  private createCustomTheme(params: {\n    name: string;\n    phoneFrame: string;\n    primary: string;\n    light: string;\n    ultraLight: string;\n    deep: string;\n    textPrimary: string;\n    textSecondary: string;\n    bubbleMeBg: string;\n    bubbleMeText: string;\n    bubbleThemBg: string;\n    bubbleThemText: string;\n    appBgColor: string;\n    settingsBgColor: string;\n    settingsCardBgColor: string;\n    statusBar: string;\n    dynamicIsland: string;\n    border: string;\n    shadow: string;\n    isDarkMode: boolean;\n    useSingleColorIcons: boolean;\n  }): Theme {\n    const {\n      name,\n      phoneFrame,\n      primary,\n      light,\n      ultraLight,\n      deep,\n      textPrimary,\n      textSecondary,\n      bubbleMeBg,\n      bubbleMeText,\n      bubbleThemBg,\n      bubbleThemText,\n      appBgColor,\n      settingsBgColor,\n      settingsCardBgColor,\n      statusBar,\n      dynamicIsland,\n      border,\n      shadow,\n      isDarkMode,\n      useSingleColorIcons,\n    } = params;\n\n    // 提取阴影颜色的RGB分量\n    const r = parseInt(shadow.slice(1, 3), 16);\n    const g = parseInt(shadow.slice(3, 5), 16);\n    const b = parseInt(shadow.slice(5, 7), 16);\n    const shadowColorRgba = isDarkMode ? 'rgba(0, 0, 0, 0.5)' : `rgba(${r}, ${g}, ${b}, 0.3)`;\n    const bubbleShadow = `0 2px 8px rgba(${r}, ${g}, ${b}, 0.15)`;\n\n    // 渐变色\n    const gradientStart = this.lightenDarkenColor(primary, 20);\n    const gradientEnd = this.lightenDarkenColor(primary, -10);\n\n    // 添加缺少的属性\n    const soft = this.lightenDarkenColor(light, -10);\n    const textColor = '#ffffff';\n    const headerBg = isDarkMode\n      ? 'linear-gradient(315deg, #333333 0%, #444444 100%)'\n      : `linear-gradient(315deg, ${this.lightenDarkenColor(ultraLight, -5)} 0%, ${ultraLight} 100%)`;\n\n    // 创建自定义主题\n    const customTheme: Theme = {\n      name: 'custom',\n      displayName: name,\n      colors: {\n        phoneFrame: phoneFrame,\n        phoneFrameGradient: [\n          this.lightenDarkenColor(phoneFrame, -40),\n          phoneFrame,\n          this.lightenDarkenColor(phoneFrame, 20),\n          this.lightenDarkenColor(phoneFrame, -40),\n        ],\n        primary: primary,\n        light: light,\n        ultraLight: ultraLight,\n        soft: soft,\n        deep: deep,\n        textPrimary: textPrimary,\n        textSecondary: textSecondary,\n        textColor: textColor,\n        bubbleMeBg,\n        bubbleMeText,\n        bubbleThemBg,\n        bubbleThemText,\n        headerBg,\n        appBgColor,\n        settingsBgColor,\n        settingsCardBgColor,\n        gradientStart,\n        gradientEnd,\n        statusBarColor: statusBar,\n        dynamicIslandColor: dynamicIsland,\n        borderColor: border,\n        shadowColor: shadow,\n        shadowColorRgba,\n        bubbleShadow,\n        isDarkMode,\n        defaultWallpapers: {\n          chat: isDarkMode\n            ? 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_1.jpg'\n            : 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_3.jpg',\n          home: isDarkMode\n            ? 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_1.jpg'\n            : 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_2.jpg',\n          settings: isDarkMode ? '#1a1a1a' : '#f2f7fd',\n        },\n        useSingleColorIcons,\n      },\n    };\n\n    return customTheme;\n  }\n\n  // 颜色处理工具：调亮或调暗颜色\n  private lightenDarkenColor(col: string, amt: number): string {\n    let usePound = false;\n\n    if (col[0] === '#') {\n      col = col.slice(1);\n      usePound = true;\n    }\n\n    const num = parseInt(col, 16);\n\n    let r = (num >> 16) + amt;\n    if (r > 255) r = 255;\n    else if (r < 0) r = 0;\n\n    let b = ((num >> 8) & 0x00ff) + amt;\n    if (b > 255) b = 255;\n    else if (b < 0) b = 0;\n\n    let g = (num & 0x0000ff) + amt;\n    if (g > 255) g = 255;\n    else if (g < 0) g = 0;\n\n    return (usePound ? '#' : '') + (g | (b << 8) | (r << 16)).toString(16);\n  }\n\n  // 将颜色值转换为十六进制格式（用于颜色输入框）\n  private convertToHex(color: string): string {\n    // 如果已经是十六进制格式，直接返回\n    if (color.startsWith('#')) {\n      return color;\n    }\n\n    // 处理rgb()格式\n    const rgbMatch = color.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    if (rgbMatch) {\n      const r = parseInt(rgbMatch[1]);\n      const g = parseInt(rgbMatch[2]);\n      const b = parseInt(rgbMatch[3]);\n      return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    }\n\n    // 处理rgba()格式（忽略alpha通道）\n    const rgbaMatch = color.match(/rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*[\\d.]+\\)/);\n    if (rgbaMatch) {\n      const r = parseInt(rgbaMatch[1]);\n      const g = parseInt(rgbaMatch[2]);\n      const b = parseInt(rgbaMatch[3]);\n      return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    }\n\n    // 如果无法识别格式，返回默认颜色\n    console.warn(`[ThemeEditor] 无法转换颜色格式: ${color}`);\n    return '#000000';\n  }\n\n  // 验证主题数据格式\n  private validateThemeData(data: any): boolean {\n    if (!data || typeof data !== 'object') return false;\n\n    // 检查必需的字段\n    const requiredFields = ['name', 'colors'];\n    for (const field of requiredFields) {\n      if (!(field in data)) return false;\n    }\n\n    // 检查colors对象\n    const colors = data.colors;\n    if (!colors || typeof colors !== 'object') return false;\n\n    // 检查必需的颜色字段\n    const requiredColors = ['primary', 'phoneFrame', 'textPrimary', 'textSecondary'];\n    for (const color of requiredColors) {\n      if (!(color in colors)) return false;\n    }\n\n    return true;\n  }\n\n  // 应用导入的主题 - 使用jQuery重构\n  private applyImportedTheme(themeData: any): void {\n    // 填充主题名称\n    $('#theme-name-input').val(themeData.displayName || themeData.name || '导入的主题');\n\n    // 填充颜色字段 - 使用lodash简化映射\n    const colorMappings = {\n      '#phone-frame-color': themeData.colors.phoneFrame,\n      '#primary-color': themeData.colors.primary,\n      '#light-color': themeData.colors.light,\n      '#ultra-light-color': themeData.colors.ultraLight,\n      '#deep-color': themeData.colors.deep,\n      '#text-primary-color': themeData.colors.textPrimary,\n      '#text-secondary-color': themeData.colors.textSecondary,\n      '#bubble-me-color': themeData.colors.bubbleMeBg,\n      '#bubble-me-text-color': themeData.colors.bubbleMeText,\n      '#bubble-them-color': themeData.colors.bubbleThemBg,\n      '#bubble-them-text-color': themeData.colors.bubbleThemText,\n      '#status-bar-color': themeData.colors.statusBarColor,\n      '#dynamic-island-color': themeData.colors.dynamicIslandColor,\n      '#border-color': themeData.colors.borderColor,\n      '#shadow-color': themeData.colors.shadowColor,\n    };\n\n    // 使用lodash批量设置颜色值，并转换为十六进制格式\n    _.forEach(colorMappings, (colorValue, selector) => {\n      if (colorValue) {\n        $(selector).val(this.convertToHex(colorValue));\n      }\n    });\n\n    // 填充checkbox选项\n    if ('isDarkMode' in themeData.colors) {\n      $('#dark-mode-toggle').prop('checked', themeData.colors.isDarkMode);\n    }\n\n    if ('useSingleColorIcons' in themeData.colors) {\n      $('#single-color-icons-toggle').prop('checked', themeData.colors.useSingleColorIcons);\n    }\n\n    // 处理壁纸信息（如果存在）\n    if (themeData.wallpapers) {\n      this.applyImportedWallpapers(themeData.wallpapers);\n    }\n\n    // 重新设置checkbox状态\n    this.setupCheckboxes();\n  }\n\n  // 应用导入的壁纸设置\n  private applyImportedWallpapers(wallpapers: any): void {\n    try {\n      const wallpaperManager = this.themeManager.getWallpaperManager();\n\n      // 应用各个视图的壁纸\n      const viewTypes: ('chat' | 'home' | 'settings')[] = ['chat', 'home', 'settings'];\n\n      viewTypes.forEach(viewType => {\n        const wallpaper = wallpapers[viewType];\n        if (wallpaper) {\n          // 设置壁纸到当前主题\n          wallpaperManager.setWallpaper(viewType, wallpaper);\n        }\n      });\n\n      console.log('[ThemeEditor] 壁纸设置已导入');\n    } catch (error) {\n      console.warn('[ThemeEditor] 导入壁纸设置失败:', error);\n    }\n  }\n}\n","// 主题类型定义\nexport interface Theme {\n  name: string;\n  displayName: string;\n  colors: {\n    // 手机边框\n    phoneFrame: string;\n    phoneFrameGradient: string[];\n\n    // 主要颜色\n    primary: string;\n    light: string;\n    ultraLight: string;\n    soft: string;\n    deep: string;\n\n    // 渐变色\n    gradientStart: string;\n    gradientEnd: string;\n\n    // 文字颜色\n    textColor: string;\n    textPrimary: string;\n    textSecondary: string;\n\n    // 边框和阴影\n    borderColor: string;\n    bubbleShadow: string;\n\n    // 气泡背景\n    bubbleThemBg: string;\n    bubbleMeBg: string;\n\n    // 气泡文字颜色\n    bubbleThemText: string;\n    bubbleMeText: string;\n\n    // 头部背景\n    headerBg: string;\n\n    // 新增：状态栏颜色\n    statusBarColor: string;\n\n    // 新增：灵动岛颜色\n    dynamicIslandColor: string;\n\n    // 新增：应用背景色\n    appBgColor: string;\n\n    // 新增：设置页面背景色\n    settingsBgColor: string;\n\n    // 新增：设置卡片背景色\n    settingsCardBgColor: string;\n\n    // 新增：阴影颜色\n    shadowColor: string;\n    shadowColorRgba: string;\n\n    // 新增：是否是暗色主题\n    isDarkMode: boolean;\n\n    // 新增：默认壁纸\n    defaultWallpapers: {\n      chat: string; // 可以是颜色值或图片URL\n      home: string;\n      settings: string;\n    };\n\n    // 新增：是否使用单一颜色图标\n    useSingleColorIcons?: boolean;\n  };\n}\n\n// 当前应用版本\nexport const APP_VERSION = '1.1.0';\n\n// 默认主题配置\nexport const THEMES: Record<string, Theme> = {\n  blue: {\n    name: 'blue',\n    displayName: '蓝色主题',\n    colors: {\n      // 手机边框\n      phoneFrame: '#b4d0fa',\n      phoneFrameGradient: ['#4a95ed', '#98c2f5', '#accef2', '#4a95ed'],\n\n      // 主要颜色\n      primary: '#72adf3',\n      light: '#a8cbeb',\n      ultraLight: '#e8f4fd',\n      soft: '#b8d4f0',\n      deep: '#2c5282',\n\n      // 渐变色\n      gradientStart: '#98c2f5',\n      gradientEnd: '#accef2',\n\n      // 文字颜色\n      textColor: '#ffffff',\n      textPrimary: 'rgb(139, 162, 186)',\n      textSecondary: '#64748b',\n\n      // 边框和阴影\n      borderColor: '#cbd5e1',\n      bubbleShadow: '0 2px 8px rgba(74, 144, 226, 0.15)',\n\n      // 气泡背景\n      bubbleThemBg: '#ffffff',\n      bubbleMeBg: '#a8cbeb',\n\n      // 气泡文字颜色\n      bubbleThemText: '#72adf3',\n      bubbleMeText: '#ffffff',\n\n      // 头部背景\n      headerBg: 'linear-gradient(315deg, #eef4ff 0%, #f8faff 100%)',\n\n      // 新增：状态栏颜色\n      statusBarColor: '#428af2',\n\n      // 新增：灵动岛颜色\n      dynamicIslandColor: '#a0c4f4',\n\n      // 新增：应用背景色\n      appBgColor: '#ffffff',\n\n      // 新增：设置页面背景色\n      settingsBgColor: '#f2f2f7',\n\n      // 新增：设置卡片背景色\n      settingsCardBgColor: '#ffffff',\n\n      // 新增：阴影颜色\n      shadowColor: '#4a90e2',\n      shadowColorRgba: 'rgba(74, 144, 226, 0.3)',\n\n      // 新增：是否是暗色主题\n      isDarkMode: false,\n\n      // 新增：默认壁纸\n      defaultWallpapers: {\n        chat: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_3.jpg', // 更新为指定的蓝色主题壁纸\n        home: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_2.jpg', // 更新为指定的蓝色主题壁纸\n        settings: '#f2f7fd',\n      },\n\n      // 新增：是否使用单一颜色图标\n      useSingleColorIcons: true,\n    },\n  },\n\n  pink: {\n    name: 'pink',\n    displayName: '粉色主题',\n    colors: {\n      // 手机边框\n      phoneFrame: '#fad0e8',\n      phoneFrameGradient: ['#ed4a9e', '#f598c8', '#f2acce', '#ed4a9e'],\n\n      // 主要颜色\n      primary: '#f372ad',\n      light: '#eba8cb',\n      ultraLight: '#fde8f4',\n      soft: '#f0b8d4',\n      deep: '#822c5c',\n\n      // 渐变色\n      gradientStart: '#f598c8',\n      gradientEnd: '#f2acce',\n\n      // 文字颜色\n      textColor: '#ffffff',\n      textPrimary: 'rgb(186, 139, 162)',\n      textSecondary: '#8b647a',\n\n      // 边框和阴影\n      borderColor: '#e1cbd5',\n      bubbleShadow: '0 2px 8px rgba(226, 74, 144, 0.15)',\n\n      // 气泡背景\n      bubbleThemBg: '#ffffff',\n      bubbleMeBg: '#eba8cb',\n\n      // 气泡文字颜色\n      bubbleThemText: '#f372ad',\n      bubbleMeText: '#ffffff',\n\n      // 头部背景\n      headerBg: 'linear-gradient(315deg, #ffeeef 0%, #fff8fa 100%)',\n\n      // 新增：状态栏颜色\n      statusBarColor: '#ed72ad',\n\n      // 新增：灵动岛颜色\n      dynamicIslandColor: '#f4a0c4',\n\n      // 新增：应用背景色\n      appBgColor: '#ffffff',\n\n      // 新增：设置页面背景色\n      settingsBgColor: '#fff2f7',\n\n      // 新增：设置卡片背景色\n      settingsCardBgColor: '#ffffff',\n\n      // 新增：阴影颜色\n      shadowColor: '#e24a90',\n      shadowColorRgba: 'rgba(226, 74, 144, 0.3)',\n\n      // 新增：是否是暗色主题\n      isDarkMode: false,\n\n      // 新增：默认壁纸\n      defaultWallpapers: {\n        chat: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色星星_1.jpg', // 更新为指定的粉色主题壁纸\n        home: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色格子_3.jpg', // 更新为指定的粉色主题壁纸\n        settings: '#fdf2f7',\n      },\n\n      // 新增：是否使用单一颜色图标\n      useSingleColorIcons: true,\n    },\n  },\n\n  white: {\n    name: 'white',\n    displayName: '微信主题',\n    colors: {\n      // 手机边框\n      phoneFrame: '#000000',\n      phoneFrameGradient: ['#000000', '#222222', '#333333', '#000000'],\n\n      // 主要颜色 - 微信绿只用于特定元素\n      primary: '#999999', // 大多数按钮和图标用灰色\n      light: '#cccccc',\n      ultraLight: '#f8f8f8',\n      soft: '#e0e0e0',\n      deep: '#666666',\n\n      // 渐变色\n      gradientStart: '#cccccc',\n      gradientEnd: '#dddddd',\n\n      // 文字颜色\n      textColor: '#ffffff',\n      textPrimary: '#333333',\n      textSecondary: '#909090',\n\n      // 边框和阴影\n      borderColor: '#e0e0e0',\n      bubbleShadow: '0 2px 8px rgba(0, 0, 0, 0.08)',\n\n      // 气泡背景\n      bubbleThemBg: '#ffffff',\n      bubbleMeBg: '#A0E75A', // 更浅的微信气泡绿色\n\n      // 气泡文字颜色\n      bubbleThemText: '#333333',\n      bubbleMeText: '#333333',\n\n      // 头部背景\n      headerBg: 'linear-gradient(315deg, #f5f5f5 0%, #ffffff 100%)',\n\n      // 新增：状态栏颜色\n      statusBarColor: '#000000',\n\n      // 新增：灵动岛颜色\n      dynamicIslandColor: '#000000',\n\n      // 新增：应用背景色\n      appBgColor: '#ffffff',\n\n      // 新增：设置页面背景色\n      settingsBgColor: '#f5f5f5',\n\n      // 新增：设置卡片背景色\n      settingsCardBgColor: '#ffffff',\n\n      // 新增：阴影颜色\n      shadowColor: '#999999',\n      shadowColorRgba: 'rgba(0, 0, 0, 0.1)',\n\n      // 新增：是否是暗色主题\n      isDarkMode: false,\n\n      // 新增：默认壁纸\n      defaultWallpapers: {\n        chat: '#EDEDED', // 微信聊天背景灰色\n        home: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/白色_1.jpg', // 默认图片壁纸\n        settings: '#f5f5f5',\n      },\n\n      // 新增：是否使用单一颜色图标\n      useSingleColorIcons: false,\n    },\n  },\n\n  dark: {\n    name: 'dark',\n    displayName: '夜间模式',\n    colors: {\n      // 手机边框\n      phoneFrame: '#2c2c2c',\n      phoneFrameGradient: ['#1a1a1a', '#2c2c2c', '#3c3c3c', '#1a1a1a'],\n\n      // 主要颜色\n      primary: '#505050',\n      light: '#3c3c3c',\n      ultraLight: '#1a1a1a',\n      soft: '#2c2c2c',\n      deep: '#c0c0c0',\n\n      // 渐变色\n      gradientStart: '#3c3c3c',\n      gradientEnd: '#2c2c2c',\n\n      // 文字颜色\n      textColor: '#e0e0e0',\n      textPrimary: '#c0c0c0',\n      textSecondary: '#a0a0a0',\n\n      // 边框和阴影\n      borderColor: '#3c3c3c',\n      bubbleShadow: '0 2px 8px rgba(0, 0, 0, 0.3)',\n\n      // 气泡背景\n      bubbleThemBg: '#2a2a2a',\n      bubbleMeBg: '#505050',\n\n      // 气泡文字颜色\n      bubbleThemText: '#e0e0e0',\n      bubbleMeText: '#c0c0c0',\n\n      // 头部背景\n      headerBg: 'linear-gradient(315deg, #2c2c2c 0%, #1a1a1a 100%)',\n\n      // 新增：状态栏颜色\n      statusBarColor: '#888888',\n\n      // 新增：灵动岛颜色\n      dynamicIslandColor: '#3c3c3c',\n\n      // 新增：应用背景色\n      appBgColor: '#1a1a1a',\n\n      // 新增：设置页面背景色\n      settingsBgColor: '#1a1a1a',\n\n      // 新增：设置卡片背景色\n      settingsCardBgColor: '#2c2c2c',\n\n      // 新增：阴影颜色\n      shadowColor: '#000000',\n      shadowColorRgba: 'rgba(0, 0, 0, 0.5)',\n\n      // 新增：是否是暗色主题\n      isDarkMode: true,\n\n      // 新增：默认壁纸\n      defaultWallpapers: {\n        chat: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_1.jpg', // 夜间模式壁纸\n        home: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_1.jpg', // 夜间模式壁纸\n        settings: '#1a1a1a',\n      },\n\n      // 新增：是否使用单一颜色图标\n      useSingleColorIcons: false,\n    },\n  },\n};\n\n// 主题管理器类\nexport class ThemeManager {\n  private static THEME_STORAGE_KEY = 'blmx_theme';\n  private static CUSTOM_THEME_STORAGE_KEY = 'blmx_custom_theme';\n  private static VERSION_STORAGE_KEY = 'blmx_app_version';\n  private currentTheme: Theme;\n  private wallpaperManager: WallpaperManager;\n\n  constructor() {\n    // 检查版本并在需要时清理缓存\n    this.checkVersion();\n\n    // 从本地存储加载主题或使用默认微信主题\n    const savedThemeName = localStorage.getItem(ThemeManager.THEME_STORAGE_KEY) || 'white';\n\n    if (savedThemeName === 'custom') {\n      try {\n        const customThemeJson = localStorage.getItem(ThemeManager.CUSTOM_THEME_STORAGE_KEY);\n        if (customThemeJson) {\n          this.currentTheme = JSON.parse(customThemeJson);\n        } else {\n          this.currentTheme = THEMES.white;\n        }\n      } catch (e) {\n        console.error('Failed to load custom theme:', e);\n        this.currentTheme = THEMES.white;\n      }\n    } else {\n      this.currentTheme = THEMES[savedThemeName] || THEMES.white;\n    }\n\n    // 初始化壁纸管理器\n    this.wallpaperManager = new WallpaperManager();\n\n    // 应用当前主题\n    this.applyTheme(this.currentTheme);\n  }\n\n  // 检查版本并清理过时数据\n  private checkVersion(): void {\n    const savedVersion = localStorage.getItem(ThemeManager.VERSION_STORAGE_KEY);\n\n    // 如果没有版本记录或版本不匹配，执行清理\n    if (!savedVersion || savedVersion !== APP_VERSION) {\n      console.log(`版本更新: ${savedVersion || '初次安装'} -> ${APP_VERSION}, 清理过时数据...`);\n      this.cleanOutdatedData();\n\n      // 保存新版本号\n      localStorage.setItem(ThemeManager.VERSION_STORAGE_KEY, APP_VERSION);\n    }\n  }\n\n  // 清理过时数据\n  private cleanOutdatedData(): void {\n    // 保留用户的个人设置数据，但清理可能导致问题的主题和壁纸数据\n    const keysToPreserve: string[] = [];\n\n    // 查找所有需要保留的个人设置键\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (\n        key &&\n        (key.startsWith('blmx_user_name_') ||\n          key.startsWith('blmx_user_avatar_') ||\n          key.startsWith('blmx_char_avatar_') ||\n          key.startsWith('blmx_remark_') ||\n          key.startsWith('blmx_signature_') ||\n          key.startsWith('blmx_cover_photo_') ||\n          key.startsWith('blmx_input_placeholder_'))\n      ) {\n        keysToPreserve.push(key);\n      }\n    }\n\n    // 临时保存需要保留的数据\n    const preservedData: Record<string, string> = {};\n    keysToPreserve.forEach(key => {\n      const value = localStorage.getItem(key);\n      if (value) preservedData[key] = value;\n    });\n\n    // 清除所有 blmx_ 开头的数据\n    for (let i = localStorage.length - 1; i >= 0; i--) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('blmx_')) {\n        localStorage.removeItem(key);\n      }\n    }\n\n    // 恢复需要保留的数据\n    Object.entries(preservedData).forEach(([key, value]) => {\n      localStorage.setItem(key, value);\n    });\n  }\n\n  // 获取当前主题\n  getCurrentTheme(): Theme {\n    return this.currentTheme;\n  }\n\n  // 获取当前主题的实际应用数据（从DOM的CSS变量中读取）\n  getCurrentThemeWithAppliedValues(): Theme {\n    const theme = { ...this.currentTheme };\n    const colors = { ...theme.colors };\n\n    // 从DOM中读取实际应用的CSS变量值\n    const root = document.documentElement;\n    const computedStyle = getComputedStyle(root);\n\n    // 读取实际应用的颜色值\n    const actualValues = {\n      phoneFrame: computedStyle.getPropertyValue('--phoneFrame').trim(),\n      primary: computedStyle.getPropertyValue('--primary-blue').trim(),\n      light: computedStyle.getPropertyValue('--light-blue').trim(),\n      ultraLight: computedStyle.getPropertyValue('--ultra-light-blue').trim(),\n      soft: computedStyle.getPropertyValue('--soft-blue').trim(),\n      deep: computedStyle.getPropertyValue('--deep-blue').trim(),\n      textColor: computedStyle.getPropertyValue('--text-color').trim(),\n      textPrimary: computedStyle.getPropertyValue('--text-primary').trim(),\n      textSecondary: computedStyle.getPropertyValue('--text-secondary').trim(),\n      borderColor: computedStyle.getPropertyValue('--border-color').trim(),\n      bubbleShadow: computedStyle.getPropertyValue('--bubble-shadow').trim(),\n      bubbleThemBg: computedStyle.getPropertyValue('--wechat-bubble-them-bg').trim(),\n      bubbleMeBg: computedStyle.getPropertyValue('--wechat-bubble-me-bg').trim(),\n      bubbleThemText: computedStyle.getPropertyValue('--wechat-bubble-them-text').trim(),\n      bubbleMeText: computedStyle.getPropertyValue('--wechat-bubble-me-text').trim(),\n      headerBg: computedStyle.getPropertyValue('--header-bg').trim(),\n      statusBarColor: computedStyle.getPropertyValue('--status-bar-color').trim(),\n      dynamicIslandColor: computedStyle.getPropertyValue('--dynamic-island-color').trim(),\n      appBgColor: computedStyle.getPropertyValue('--app-bg-color').trim(),\n      settingsBgColor: computedStyle.getPropertyValue('--settings-bg-color').trim(),\n      settingsCardBgColor: computedStyle.getPropertyValue('--settings-card-bg-color').trim(),\n      shadowColor: computedStyle.getPropertyValue('--shadow-color').trim(),\n      shadowColorRgba: computedStyle.getPropertyValue('--shadow-color-rgba').trim(),\n      gradientStart:\n        computedStyle.getPropertyValue('--blue-gradient-start').trim() ||\n        computedStyle.getPropertyValue('--primary-gradient-light').trim(),\n      gradientEnd:\n        computedStyle.getPropertyValue('--blue-gradient-end').trim() ||\n        computedStyle.getPropertyValue('--primary-gradient-dark').trim(),\n    };\n\n    // 使用实际应用的值，如果CSS变量存在的话\n    Object.keys(actualValues).forEach(key => {\n      const value = actualValues[key as keyof typeof actualValues];\n      if (value && value !== '') {\n        (colors as any)[key] = value;\n      }\n    });\n\n    // 保持原有的布尔值和其他非颜色属性\n    colors.isDarkMode = theme.colors.isDarkMode;\n    colors.useSingleColorIcons = theme.colors.useSingleColorIcons;\n    colors.phoneFrameGradient = theme.colors.phoneFrameGradient;\n    colors.defaultWallpapers = theme.colors.defaultWallpapers;\n\n    return {\n      ...theme,\n      colors,\n    };\n  }\n\n  // 获取所有默认主题\n  getThemes(): Record<string, Theme> {\n    return THEMES;\n  }\n\n  // 获取壁纸管理器\n  getWallpaperManager(): WallpaperManager {\n    return this.wallpaperManager;\n  }\n\n  // 切换到指定主题\n  switchTheme(themeName: string): void {\n    if (themeName === 'custom') {\n      try {\n        const customThemeJson = localStorage.getItem(ThemeManager.CUSTOM_THEME_STORAGE_KEY);\n        if (customThemeJson) {\n          this.currentTheme = JSON.parse(customThemeJson);\n          localStorage.setItem(ThemeManager.THEME_STORAGE_KEY, 'custom');\n\n          // 更新壁纸管理器中的当前主题名称\n          this.wallpaperManager.setCurrentThemeName('custom');\n\n          this.applyTheme(this.currentTheme);\n\n          // 应用主题默认壁纸\n          this.wallpaperManager.applyThemeDefaultWallpapers(this.currentTheme);\n        }\n      } catch (e) {\n        console.error('Failed to load custom theme:', e);\n      }\n    } else if (THEMES[themeName]) {\n      this.currentTheme = THEMES[themeName];\n      localStorage.setItem(ThemeManager.THEME_STORAGE_KEY, themeName);\n\n      // 更新壁纸管理器中的当前主题名称\n      this.wallpaperManager.setCurrentThemeName(themeName);\n\n      this.applyTheme(this.currentTheme);\n\n      // 应用主题默认壁纸\n      this.wallpaperManager.applyThemeDefaultWallpapers(this.currentTheme);\n    }\n  }\n\n  // 保存自定义主题\n  saveCustomTheme(theme: Theme): void {\n    this.currentTheme = theme;\n    localStorage.setItem(ThemeManager.CUSTOM_THEME_STORAGE_KEY, JSON.stringify(theme));\n    localStorage.setItem(ThemeManager.THEME_STORAGE_KEY, 'custom');\n\n    // 更新壁纸管理器中的当前主题名称\n    this.wallpaperManager.setCurrentThemeName('custom');\n\n    this.applyTheme(theme);\n\n    // 应用主题默认壁纸\n    this.wallpaperManager.applyThemeDefaultWallpapers(theme);\n  }\n\n  // 应用主题到DOM\n  private applyTheme(theme: Theme): void {\n    const colors = theme.colors;\n    const root = document.documentElement;\n\n    // 设置CSS变量\n    root.style.setProperty('--phoneFrame', colors.phoneFrame);\n    root.style.setProperty('--primary-blue', colors.primary);\n    root.style.setProperty('--light-blue', colors.light);\n    root.style.setProperty('--ultra-light-blue', colors.ultraLight);\n    root.style.setProperty('--blue-gradient-start', colors.gradientStart);\n    root.style.setProperty('--blue-gradient-end', colors.gradientEnd);\n    root.style.setProperty('--soft-blue', colors.soft);\n    root.style.setProperty('--deep-blue', colors.deep);\n\n    // 设置文字颜色变量 - 这是关键的修复！\n    root.style.setProperty('--text-color', colors.textColor);\n    root.style.setProperty('--text-primary', colors.textPrimary);\n    root.style.setProperty('--text-secondary', colors.textSecondary);\n\n    // 设置边框颜色\n    root.style.setProperty('--border-color', colors.borderColor);\n\n    // 根据useSingleColorIcons属性设置图标颜色\n    if (colors.useSingleColorIcons) {\n      // 使用主题色作为图标颜色\n      document.body.classList.add('single-color-icon');\n\n      // 计算渐变色：比主色更亮和更暗的变体\n      const lighterColor = this.lightenDarkenColor(colors.primary, 20);\n      const darkerColor = this.lightenDarkenColor(colors.primary, -20);\n\n      // 设置渐变色变量\n      root.style.setProperty('--primary-gradient-light', lighterColor);\n      root.style.setProperty('--primary-gradient-dark', darkerColor);\n    } else {\n      // 使用默认的绿色和灰色图标\n      document.body.classList.remove('single-color-icon');\n      root.style.setProperty('--wechat-green-icon', theme.name === 'white' ? '#07C160' : '#07C160');\n      root.style.setProperty('--settings-icon-color', theme.name === 'white' ? '#8a8a8a' : '#8a8a8a');\n    }\n\n    root.style.setProperty('--wechat-green-bubble', colors.light);\n    root.style.setProperty('--wechat-bg', colors.ultraLight);\n    root.style.setProperty('--link-color', colors.primary);\n    root.style.setProperty('--text-color', colors.textColor);\n    root.style.setProperty('--text-primary', colors.textPrimary);\n    root.style.setProperty('--text-secondary', colors.textSecondary);\n    root.style.setProperty('--border-color', colors.borderColor);\n    root.style.setProperty('--header-bg', colors.headerBg);\n    root.style.setProperty('--bubble-shadow', colors.bubbleShadow);\n    root.style.setProperty('--wechat-bubble-them-bg', colors.bubbleThemBg);\n    root.style.setProperty('--wechat-bubble-me-bg', colors.bubbleMeBg);\n\n    // 设置气泡文字颜色\n    root.style.setProperty('--wechat-bubble-them-text', colors.bubbleThemText || colors.primary);\n    root.style.setProperty('--wechat-bubble-me-text', colors.bubbleMeText || '#ffffff');\n\n    // 设置状态栏颜色\n    root.style.setProperty('--status-bar-color', colors.statusBarColor);\n\n    // 设置灵动岛颜色\n    root.style.setProperty('--dynamic-island-color', colors.dynamicIslandColor);\n\n    // 设置应用背景色\n    root.style.setProperty('--app-bg-color', colors.appBgColor);\n\n    // 设置设置页面背景色\n    root.style.setProperty('--settings-bg-color', colors.settingsBgColor);\n\n    // 设置设置卡片背景色\n    root.style.setProperty('--settings-card-bg-color', colors.settingsCardBgColor);\n\n    // 设置输入框背景色（非夜间模式统一为白色）\n    root.style.setProperty('--input-bg', colors.isDarkMode ? '#2a2a2a' : '#ffffff');\n\n    // 设置阴影颜色\n    root.style.setProperty('--shadow-color', colors.shadowColor);\n    root.style.setProperty('--shadow-color-rgba', colors.shadowColorRgba);\n\n    // 提取阴影颜色的RGB分量，用于其他计算\n    const shadowRGB = this.extractRgbComponents(colors.shadowColor);\n    root.style.setProperty('--shadow-r', shadowRGB.r.toString());\n    root.style.setProperty('--shadow-g', shadowRGB.g.toString());\n    root.style.setProperty('--shadow-b', shadowRGB.b.toString());\n\n    // 设置暗色模式类\n    if (colors.isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n\n    // 手机边框样式\n    const phoneFrame = document.querySelector('.phone-frame') as HTMLElement;\n    if (phoneFrame) {\n      phoneFrame.style.background = colors.phoneFrame;\n\n      // 更新手机边框渐变 - 原子性更新避免闪烁\n      const gradientColors = colors.phoneFrameGradient.join(', ');\n\n      // 检查是否已存在样式元素\n      let phoneFrameStyle = document.getElementById('phone-frame-style') as HTMLStyleElement;\n      if (!phoneFrameStyle) {\n        phoneFrameStyle = document.createElement('style');\n        phoneFrameStyle.id = 'phone-frame-style';\n        document.head.appendChild(phoneFrameStyle);\n      }\n\n      // 直接更新样式内容，避免移除和重新添加造成的闪烁\n      phoneFrameStyle.textContent = `\n        .phone-frame::before {\n          background: linear-gradient(45deg, ${gradientColors});\n          background-size: 400% 400%;\n        }\n      `;\n    }\n\n    // 更新动态岛颜色\n    const dynamicIsland = document.querySelector('.dynamic-island') as HTMLElement;\n    if (dynamicIsland) {\n      dynamicIsland.style.background = colors.dynamicIslandColor;\n    }\n\n    // 更新状态栏颜色\n    const statusLeft = document.querySelector('.status-left') as HTMLElement;\n    const statusRight = document.querySelector('.status-right') as HTMLElement;\n    if (statusLeft && statusRight) {\n      statusLeft.style.color = colors.statusBarColor;\n      statusRight.style.color = colors.statusBarColor;\n    }\n\n    // 更新设置页面背景色\n    const settingsView = document.getElementById('settings-view');\n    if (settingsView) {\n      settingsView.style.backgroundColor = colors.settingsBgColor;\n    }\n\n    // 更新设置卡片背景色\n    const settingsCards = document.querySelectorAll('.settings-card');\n    settingsCards.forEach((card: Element) => {\n      (card as HTMLElement).style.backgroundColor = colors.settingsCardBgColor;\n    });\n\n    // 更新手机阴影\n    if (phoneFrame) {\n      phoneFrame.style.boxShadow = `\n        0 15px 20px ${this.hexToRgba(colors.shadowColor, 0.25)},\n        0 8px 20px ${this.hexToRgba(colors.shadowColor, 0.15)},\n        0 3px 8px rgba(0, 0, 0, 0.1),\n        inset 0 1px 0 rgba(255, 255, 255, 0.5),\n        inset 0 -1px 0 rgba(255, 255, 255, 0.2),\n        0 5px ${this.hexToRgba(colors.shadowColor, 0.08)}\n      `;\n    }\n\n    // 更新气泡阴影和颜色\n    const style = document.createElement('style');\n    style.id = 'theme-dynamic-styles';\n\n    // 检查是否是自定义主题（使用纯色背景）还是默认主题（保留渐变）\n    // 注释掉未使用的变量\n    // const isCustomBubbleColors = theme.name === 'custom';\n\n    style.textContent = `\n      /* 微信主题下的气泡样式 - 直接应用绿色 */\n      .message-row.me .message-bubble {\n        background-color: ${colors.bubbleMeBg} !important;\n        background: ${colors.bubbleMeBg} !important;\n        color: ${colors.bubbleMeText || '#ffffff'} !important;\n        box-shadow: 0 4px 12px ${this.hexToRgba(colors.shadowColor, 0.3)};\n      }\n      \n      /* 对方气泡样式 */\n      .message-row.them .message-bubble {\n        background-color: ${colors.bubbleThemBg} !important;\n        background: ${colors.bubbleThemBg} !important;\n        color: ${colors.bubbleThemText || colors.primary} !important;\n      }\n      \n      /* 确保语音气泡也使用正确的颜色 */\n      .message-row.me .message-bubble.voice-bubble {\n        background: ${colors.bubbleMeBg} !important;\n        background-color: ${colors.bubbleMeBg} !important;\n        background-image: none !important;\n        color: ${colors.bubbleMeText || '#ffffff'} !important;\n      }\n      \n      .message-row.them .message-bubble.voice-bubble {\n        background: ${colors.bubbleThemBg} !important;\n        color: ${colors.bubbleThemText || colors.primary} !important;\n      }\n      \n      /* 朋友圈文字描述图片样式 */\n      .post-media .image-desc-content {\n        background-color: ${this.hexToRgba(colors.primary, 0.1)} !important;\n        border: 1px solid ${this.hexToRgba(colors.primary, 0.1)} !important;\n      }\n      \n      /* 发送按钮样式 */\n      .wechat-footer .send-btn {\n        box-shadow: 0 4px 12px ${this.hexToRgba(colors.shadowColor, 0.3)};\n      }\n      \n      .wechat-footer .send-btn:hover {\n        box-shadow: 0 6px 16px ${this.hexToRgba(colors.shadowColor, 0.4)};\n      }\n      \n      /* 夜间模式特殊处理 */\n      ${\n        colors.isDarkMode\n          ? `\n        .settings-card p, \n        .settings-card a,\n        .settings-card li a,\n        .post-content,\n        .post-meta,\n        .theme-editor-modal .modal-content {\n          color: #e0e0e0 !important;\n        }\n        \n        .settings-card,\n        .theme-editor-modal .modal-content {\n          background-color: #2a2a2a !important;\n        }\n        \n        /* 修改夜间模式下正在输入指示器样式 */\n        .typing-indicator .message-bubble {\n          background-color: ${colors.bubbleThemBg} !important;\n          background: ${colors.bubbleThemBg} !important;\n          color: #ffffff !important;\n          border: none !important;\n        }\n        \n        .typing-dot {\n          background-color: rgba(255, 255, 255, 0.6) !important;\n        }\n        \n        .settings-card li {\n          border-bottom-color: #3c3c3c !important;\n        }\n        \n        .settings-card li a {\n          color: #a0a0a0 !important;\n        }\n        \n        #show-last-ai-response-btn,\n        #show-last-sent-prompt-btn {\n          background-color: #2c2c2c !important;\n          color: #a0a0a0 !important;\n        }\n\n        /* 朋友圈暗色模式 */\n        #moments-view {\n          background: linear-gradient(180deg, #1a1a1a 0%, #252525 100%) !important;\n        }\n        \n        .moments-body {\n          background-color: #1a1a1a !important;\n        }\n        \n        .moment-post {\n          border-bottom-color: #2c2c2c !important;\n        }\n        \n        .post-interactions {\n          background: #2a2a2a !important;\n          border-color: #3c3c3c !important;\n        }\n        \n        .post-interactions::before {\n          border-bottom-color: #2a2a2a !important;\n        }\n        \n        .likes-section {\n          background: rgba(42, 42, 42, 0.8) !important;\n        }\n        \n        .comments-section {\n          border-top-color: #3c3c3c !important;\n        }\n        \n        .post-meta .comment-button {\n          background: #2c2c2c !important;\n        }\n\n        /* 朋友圈文字描述图片样式 - 夜间模式 */\n        .post-media .image-desc-content {\n          background-color: rgba(42, 42, 42, 0.8) !important;\n          border: 1px solid rgba(60, 60, 60, 0.4) !important;\n          color: #e0e0e0 !important;\n        }\n\n        /* 更多夜间模式样式 */\n        .post-author-name, \n        .liker-name, \n        .comment-author {\n          color: #a0c0e0 !important;\n        }\n        \n        .moments-header,\n        .wechat-header {\n          background: linear-gradient(315deg, #252525 0%, #1a1a1a 100%) !important;\n          border-bottom-color: #3c3c3c !important;\n        }\n        \n        .wechat-footer {\n          background: linear-gradient(315deg, #252525 0%, #1a1a1a 100%) !important;\n          border-top-color: #3c3c3c !important;\n        }\n        \n        .wechat-footer .text-input {\n          background-color: #2a2a2a !important;\n          border-color: #3c3c3c !important;\n          color: #e0e0e0 !important;\n        }\n        \n        .wechat-footer .text-input::placeholder {\n          color: #808080 !important;\n        }\n        \n        .timestamp-text,\n        .event-time-text {\n          background: linear-gradient(315deg, #505050 0%, #3c3c3c 100%) !important;\n        }\n        \n        .recall-notice-text {\n          background: linear-gradient(315deg, #505050 0%, #3c3c3c 100%) !important;\n        }\n        \n        .message-row.them .voice-bubble .voice-icon {\n          color: #a0c0e0 !important;\n        }\n        \n        .voice-text-content {\n          background-color: #2a2a2a !important;\n          border-color: #3c3c3c !important;\n          color: #e0e0e0 !important;\n        }\n        \n        .location-card,\n        .file-card {\n          background-color: #2a2a2a !important;\n        }\n        \n        .location-content .location-title {\n          color: #e0e0e0 !important;\n        }\n        \n        .file-details .file-name {\n          color: #e0e0e0 !important;\n        }\n        \n        .file-footer {\n          background-color: #252525 !important;\n          border-top-color: #3c3c3c !important;\n        }\n        \n        .panel-container {\n          background-color: #1a1a1a !important;\n        }\n        \n        .feature-icon {\n          background-color: #2a2a2a !important;\n          border-color: #3c3c3c !important;\n        }\n        \n        .feature-label {\n          color: #a0a0a0 !important;\n        }\n        \n        /* Theme-colored icons in dark mode */\n        .feature-icon .theme-icon {\n          color: var(--primary-blue) !important;\n        }\n        \n        /* 壁纸选择器暗色模式 */\n        .wallpaper-container {\n          background-color: #2a2a2a !important;\n          color: #e0e0e0 !important;\n        }\n        \n        .wallpaper-container h2,\n        .wallpaper-container h3,\n        .wallpaper-container p {\n          color: #e0e0e0 !important;\n        }\n        \n        .wallpaper-container input[type=\"text\"],\n        .wallpaper-container input[type=\"file\"] {\n          background-color: #1a1a1a !important;\n          border-color: #3c3c3c !important;\n          color: #e0e0e0 !important;\n        }\n        \n        .wallpaper-item .name {\n          background-color: rgba(42, 42, 42, 0.9) !important;\n          color: #e0e0e0 !important;\n        }\n      `\n          : ''\n      }\n    `;\n\n    const oldDynamicStyles = document.getElementById('theme-dynamic-styles');\n    if (oldDynamicStyles) {\n      oldDynamicStyles.remove();\n    }\n    document.head.appendChild(style);\n  }\n\n  // 辅助方法：HEX转RGBA\n  private hexToRgba(hex: string, alpha: number): string {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n\n  // 辅助方法：提取RGB分量\n  private extractRgbComponents(hex: string): { r: number; g: number; b: number } {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    return { r, g, b };\n  }\n\n  // 辅助方法：调整颜色亮度\n  private lightenDarkenColor(color: string, amount: number): string {\n    let hex = color.replace('#', '');\n    if (hex.length === 3) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    const num = parseInt(hex, 16);\n    let r = (num >> 16) + amount;\n    let g = ((num >> 8) & 0x00ff) + amount;\n    let b = (num & 0x0000ff) + amount;\n\n    r = Math.max(0, Math.min(255, r));\n    g = Math.max(0, Math.min(255, g));\n    b = Math.max(0, Math.min(255, b));\n\n    const rHex = r.toString(16).padStart(2, '0');\n    const gHex = g.toString(16).padStart(2, '0');\n    const bHex = b.toString(16).padStart(2, '0');\n\n    return `#${rHex}${gHex}${bHex}`;\n  }\n}\n\n// 壁纸类型定义\nexport interface Wallpaper {\n  id: string;\n  type: 'color' | 'image' | 'url';\n  value: string; // 颜色代码或图片URL\n  name: string;\n  thumbnail?: string; // 缩略图URL，如果是图片类型\n}\n\n// 壁纸管理器类\nexport class WallpaperManager {\n  private static WALLPAPER_STORAGE_KEY_PREFIX = 'blmx_wallpaper_';\n  private static CUSTOM_WALLPAPERS_KEY = 'blmx_custom_wallpapers';\n  private static THEME_WALLPAPER_KEY_PREFIX = 'blmx_theme_wallpaper_';\n  private currentThemeName: string = 'white'; // 默认主题名称\n\n  // 内置壁纸\n  private builtInWallpapers: Wallpaper[] = [\n    { id: 'blue_solid', type: 'color', value: '#e8f4fd', name: '蓝色纯色' },\n    { id: 'pink_solid', type: 'color', value: '#fde8f4', name: '粉色纯色' },\n    { id: 'white_solid', type: 'color', value: '#f8f8f8', name: '白色纯色' },\n    { id: 'dark_solid', type: 'color', value: '#1a1a1a', name: '黑色纯色' },\n    {\n      id: 'default_image',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/白色_1.jpg',\n      name: '白色壁纸',\n    },\n    {\n      id: 'dark_image',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_1.jpg',\n      name: '深色星星壁纸',\n    },\n    {\n      id: 'blue_theme',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色星星_1.jpg',\n      name: '蓝色星星壁纸',\n    },\n    {\n      id: 'pink_theme',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色星星_1.jpg',\n      name: '粉色星星壁纸',\n    },\n    {\n      id: 'kitty_theme',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色小猫_1.jpg',\n      name: '粉色小猫壁纸',\n    },\n    {\n      id: 'deep_stars_2',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_2.jpg',\n      name: '深色星星壁纸2',\n    },\n    {\n      id: 'deep_stars_3',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/深色星星_3.jpg',\n      name: '深色星星壁纸3',\n    },\n    {\n      id: 'white_stars',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/白色星星_1.jpg',\n      name: '白色星星壁纸',\n    },\n    {\n      id: 'pink_stars_2',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色星星_2.jpg',\n      name: '粉色星星壁纸2',\n    },\n    {\n      id: 'pink_grid_2',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色格子_2.jpg',\n      name: '粉色格子壁纸2',\n    },\n    {\n      id: 'pink_grid_4',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/粉色格子_4.jpg',\n      name: '粉色格子壁纸4',\n    },\n    {\n      id: 'blue_1',\n      type: 'image',\n      value: 'https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/素材/wallpaper/蓝色_1.jpg',\n      name: '蓝色壁纸1',\n    },\n  ];\n\n  // 自定义壁纸\n  private customWallpapers: Wallpaper[] = [];\n\n  constructor() {\n    this.loadCustomWallpapers();\n    // 从localStorage加载当前主题名称\n    const savedThemeName = localStorage.getItem('blmx_theme');\n    if (savedThemeName) {\n      this.currentThemeName = savedThemeName;\n    }\n\n    // 迁移旧的壁纸设置到新的主题关联格式\n    this.migrateOldWallpaperSettings();\n  }\n\n  // 设置当前主题名称\n  setCurrentThemeName(themeName: string): void {\n    this.currentThemeName = themeName;\n  }\n\n  // 获取所有壁纸（内置+自定义）\n  getAllWallpapers(): Wallpaper[] {\n    return [...this.builtInWallpapers, ...this.customWallpapers];\n  }\n\n  // 获取内置壁纸\n  getBuiltInWallpapers(): Wallpaper[] {\n    return this.builtInWallpapers;\n  }\n\n  // 获取自定义壁纸\n  getCustomWallpapers(): Wallpaper[] {\n    return this.customWallpapers;\n  }\n\n  // 添加自定义壁纸\n  addCustomWallpaper(wallpaper: Omit<Wallpaper, 'id'>): Wallpaper {\n    const id = `custom_${Date.now()}`;\n    const newWallpaper: Wallpaper = { ...wallpaper, id };\n\n    this.customWallpapers.push(newWallpaper);\n    this.saveCustomWallpapers();\n\n    return newWallpaper;\n  }\n\n  // 删除自定义壁纸\n  deleteCustomWallpaper(id: string): boolean {\n    const initialLength = this.customWallpapers.length;\n    this.customWallpapers = this.customWallpapers.filter(w => w.id !== id);\n\n    if (this.customWallpapers.length !== initialLength) {\n      this.saveCustomWallpapers();\n      return true;\n    }\n\n    return false;\n  }\n\n  // 设置壁纸（与主题关联）\n  setWallpaper(viewType: 'chat' | 'home' | 'settings', wallpaper: Wallpaper | null): void {\n    // 使用主题名称作为存储键的一部分\n    const storageKey = `${WallpaperManager.THEME_WALLPAPER_KEY_PREFIX}${this.currentThemeName}_${viewType}`;\n\n    if (wallpaper) {\n      localStorage.setItem(storageKey, JSON.stringify(wallpaper));\n    } else {\n      localStorage.removeItem(storageKey);\n    }\n  }\n\n  // 获取当前壁纸（与主题关联）\n  getCurrentWallpaper(viewType: 'chat' | 'home' | 'settings'): Wallpaper | null {\n    // 首先尝试获取与当前主题关联的壁纸\n    const themeStorageKey = `${WallpaperManager.THEME_WALLPAPER_KEY_PREFIX}${this.currentThemeName}_${viewType}`;\n    const savedThemeWallpaper = localStorage.getItem(themeStorageKey);\n\n    if (savedThemeWallpaper) {\n      try {\n        return JSON.parse(savedThemeWallpaper);\n      } catch (e) {\n        console.error('Failed to parse theme wallpaper:', e);\n      }\n    }\n\n    // 如果没有与主题关联的壁纸，则尝试获取旧格式的壁纸设置（兼容性）\n    const oldStorageKey = `${WallpaperManager.WALLPAPER_STORAGE_KEY_PREFIX}${viewType}`;\n    const savedOldWallpaper = localStorage.getItem(oldStorageKey);\n\n    if (savedOldWallpaper) {\n      try {\n        return JSON.parse(savedOldWallpaper);\n      } catch (e) {\n        console.error('Failed to parse old wallpaper:', e);\n      }\n    }\n\n    return null;\n  }\n\n  // 迁移旧的壁纸设置到新的主题关联格式\n  private migrateOldWallpaperSettings(): void {\n    const viewTypes: Array<'chat' | 'home' | 'settings'> = ['chat', 'home', 'settings'];\n\n    viewTypes.forEach(viewType => {\n      const oldStorageKey = `${WallpaperManager.WALLPAPER_STORAGE_KEY_PREFIX}${viewType}`;\n      const savedOldWallpaper = localStorage.getItem(oldStorageKey);\n\n      if (savedOldWallpaper) {\n        try {\n          // 解析但不存储未使用的变量\n          JSON.parse(savedOldWallpaper);\n          // 将旧设置迁移到当前主题下\n          const themeStorageKey = `${WallpaperManager.THEME_WALLPAPER_KEY_PREFIX}${this.currentThemeName}_${viewType}`;\n\n          // 只有在当前主题下没有设置时才迁移\n          if (!localStorage.getItem(themeStorageKey)) {\n            localStorage.setItem(themeStorageKey, savedOldWallpaper);\n          }\n\n          // 迁移后删除旧设置\n          localStorage.removeItem(oldStorageKey);\n        } catch (e) {\n          console.error('Failed to migrate old wallpaper setting:', e);\n        }\n      }\n    });\n  }\n\n  // 应用主题默认壁纸\n  applyThemeDefaultWallpapers(theme: Theme): void {\n    // 更新当前主题名称\n    this.setCurrentThemeName(theme.name);\n\n    const viewTypes: Array<'chat' | 'home' | 'settings'> = ['chat', 'home', 'settings'];\n\n    viewTypes.forEach(viewType => {\n      // 检查是否已经有与当前主题关联的壁纸设置\n      const themeStorageKey = `${WallpaperManager.THEME_WALLPAPER_KEY_PREFIX}${theme.name}_${viewType}`;\n      const existingWallpaper = localStorage.getItem(themeStorageKey);\n\n      if (existingWallpaper) {\n        // 已有壁纸设置，保留现有设置\n        return;\n      }\n\n      const defaultValue = theme.colors.defaultWallpapers[viewType];\n\n      // 检查是否是颜色值\n      const isColor = defaultValue.startsWith('#');\n\n      const wallpaper: Wallpaper = {\n        id: `theme_default_${viewType}`,\n        type: isColor ? 'color' : 'image',\n        value: defaultValue,\n        name: `${theme.displayName}默认${viewType === 'chat' ? '聊天' : viewType === 'home' ? '主屏幕' : '设置'}壁纸`,\n      };\n\n      // 保存为与主题关联的壁纸\n      localStorage.setItem(themeStorageKey, JSON.stringify(wallpaper));\n    });\n  }\n\n  // 应用壁纸到DOM\n  applyWallpaperToElement(element: HTMLElement, wallpaper: Wallpaper | null, defaultThemeWallpaper?: string): void {\n    if (!element) return;\n\n    // 重置样式\n    element.style.backgroundImage = 'none';\n    element.style.backgroundColor = '';\n    element.style.backgroundSize = '';\n    element.style.backgroundPosition = '';\n    element.style.backgroundRepeat = '';\n\n    if (wallpaper) {\n      if (wallpaper.type === 'color') {\n        // 纯色壁纸 - 确保清除背景图并设置背景色\n        element.style.backgroundImage = 'none';\n        element.style.backgroundColor = wallpaper.value;\n      } else {\n        // 图片壁纸\n        element.style.backgroundImage = `url(\"${wallpaper.value}\")`;\n        element.style.backgroundSize = 'cover';\n        element.style.backgroundPosition = 'center';\n        element.style.backgroundRepeat = 'no-repeat';\n      }\n    } else if (defaultThemeWallpaper) {\n      // 使用主题默认壁纸\n      if (defaultThemeWallpaper.startsWith('#')) {\n        // 如果是颜色值，设置背景色\n        element.style.backgroundImage = 'none';\n        element.style.backgroundColor = defaultThemeWallpaper;\n      } else {\n        // 如果是图片URL，设置背景图\n        element.style.backgroundImage = `url(\"${defaultThemeWallpaper}\")`;\n        element.style.backgroundSize = 'cover';\n        element.style.backgroundPosition = 'center';\n        element.style.backgroundRepeat = 'no-repeat';\n      }\n    }\n  }\n\n  // 从URL创建壁纸\n  async createWallpaperFromUrl(url: string, name: string): Promise<Wallpaper | null> {\n    try {\n      // 验证URL\n      new URL(url);\n\n      return this.addCustomWallpaper({\n        type: 'url',\n        value: url,\n        name: name || `URL壁纸 ${new Date().toLocaleString()}`,\n      });\n    } catch (e) {\n      console.error('Invalid URL:', e);\n      return null;\n    }\n  }\n\n  // 从File对象创建壁纸\n  async createWallpaperFromFile(file: File): Promise<Wallpaper | null> {\n    return new Promise(resolve => {\n      if (!file.type.startsWith('image/')) {\n        resolve(null);\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        if (e.target?.result) {\n          const wallpaper = this.addCustomWallpaper({\n            type: 'image',\n            value: e.target.result as string,\n            name: file.name || `上传的壁纸 ${new Date().toLocaleString()}`,\n          });\n          resolve(wallpaper);\n        } else {\n          resolve(null);\n        }\n      };\n\n      reader.onerror = () => resolve(null);\n      reader.readAsDataURL(file);\n    });\n  }\n\n  // 创建纯色壁纸\n  createSolidColorWallpaper(color: string, name?: string): Wallpaper | null {\n    // 验证颜色格式，支持3位和6位十六进制颜色\n    if (!color.match(/^#([0-9A-Fa-f]{3}){1,2}$/)) {\n      console.error('Invalid color format:', color);\n      return null;\n    }\n\n    // 确保颜色格式统一为6位十六进制\n    let normalizedColor = color;\n    if (color.length === 4) {\n      // #RGB 格式\n      const r = color[1];\n      const g = color[2];\n      const b = color[3];\n      normalizedColor = `#${r}${r}${g}${g}${b}${b}`;\n    }\n\n    return this.addCustomWallpaper({\n      type: 'color',\n      value: normalizedColor,\n      name: name || `纯色壁纸 ${normalizedColor}`,\n    });\n  }\n\n  // 加载自定义壁纸\n  private loadCustomWallpapers(): void {\n    const savedWallpapers = localStorage.getItem(WallpaperManager.CUSTOM_WALLPAPERS_KEY);\n\n    if (savedWallpapers) {\n      try {\n        this.customWallpapers = JSON.parse(savedWallpapers);\n      } catch (e) {\n        console.error('Failed to load custom wallpapers:', e);\n        this.customWallpapers = [];\n      }\n    }\n  }\n\n  // 保存自定义壁纸\n  private saveCustomWallpapers(): void {\n    localStorage.setItem(WallpaperManager.CUSTOM_WALLPAPERS_KEY, JSON.stringify(this.customWallpapers));\n  }\n}\n","// 用户界面管理模块\n// 负责导航、面板切换、尺寸调整、版本显示等UI相关功能\n\nimport { ConfigManager } from './config-manager';\nimport { LogEntry } from './script';\nimport { APP_VERSION } from './theme-manager';\n\nexport class UIManager {\n  private configManager: ConfigManager;\n  private onAddEntry?: (entry: LogEntry) => void;\n  private onRenderEntry?: (entry: LogEntry, index?: number, animate?: boolean) => void;\n\n  constructor(\n    configManager: ConfigManager,\n    onAddEntry?: (entry: LogEntry) => void,\n    onRenderEntry?: (entry: LogEntry, index?: number, animate?: boolean) => void,\n  ) {\n    this.configManager = configManager;\n    this.onAddEntry = onAddEntry;\n    this.onRenderEntry = onRenderEntry;\n  }\n\n  // 显示应用版本\n  displayAppVersion(): void {\n    $('#app-version-display').text(`v${APP_VERSION}`);\n  }\n\n  // 检查是否显示版本更新通知\n  checkVersionUpdateNotification(): void {\n    const lastNotifiedVersion = this.configManager.getLastNotifiedVersion();\n\n    // 如果没有通知过当前版本，显示通知\n    if (lastNotifiedVersion !== APP_VERSION) {\n      this.showVersionUpdateNotification();\n      this.configManager.setLastNotifiedVersion(APP_VERSION);\n    }\n  }\n\n  // 显示版本更新通知\n  private showVersionUpdateNotification(): void {\n    // 创建系统消息\n    const updateEntry: LogEntry = {\n      type: 'message',\n      sender: 'them',\n      content: `系统消息：应用已更新到 v${APP_VERSION}，已自动清理过时数据以确保功能正常运行。您无需手动清除浏览器缓存。`,\n      id: `system-${Date.now()}`,\n      isSystemMessage: true,\n    };\n\n    // 添加到聊天记录\n    if (this.onAddEntry) {\n      this.onAddEntry(updateEntry);\n    }\n\n    // 渲染消息\n    if (this.onRenderEntry) {\n      this.onRenderEntry(updateEntry, undefined, true);\n    }\n  }\n\n  // 更新底部按钮状态\n  updateFooterButtonsState(hasNotifications: boolean): void {\n    const $wechatInput = $('#wechat-input-field');\n    const $sendBtn = $('#send-btn');\n    const $plusBtn = $('#plus-btn');\n\n    const hasText = $wechatInput.val()?.toString().trim() !== '';\n    const shouldShowSendBtn = hasText || hasNotifications;\n\n    // 使用jQuery方法更新显示状态\n    $sendBtn.css('display', shouldShowSendBtn ? 'flex' : 'none');\n    $plusBtn.css('display', hasText ? 'none' : 'inline-block');\n  }\n\n  // 切换面板\n  togglePanel(panelToShow: string | null): void {\n    const $panelContainer = $('#panel-container');\n    const $currentActivePanel = $('.panel-view.active');\n    const isActive = $panelContainer.hasClass('active');\n\n    if (isActive && $currentActivePanel.length && $currentActivePanel.attr('id')?.startsWith(panelToShow || '')) {\n      $panelContainer.removeClass('active');\n      $currentActivePanel.removeClass('active');\n    } else if (panelToShow) {\n      if ($currentActivePanel.length) $currentActivePanel.removeClass('active');\n      $(`#${panelToShow}-panel`).addClass('active');\n      if (!isActive) $panelContainer.addClass('active');\n    } else {\n      if (isActive) $panelContainer.removeClass('active');\n      if ($currentActivePanel.length) $currentActivePanel.removeClass('active');\n    }\n  }\n\n  // 导航到指定视图\n  navigateTo(viewName: 'home' | 'wechat' | 'moments' | 'settings', onEnterMomentsView?: () => void): void {\n    const views = {\n      home: '#app-homescreen',\n      wechat: '#wechat-view',\n      moments: '#moments-view',\n      settings: '#settings-view',\n    };\n\n    // 使用jQuery隐藏所有视图并显示目标视图\n    $('.app-view').removeClass('active');\n    $(views[viewName]).addClass('active');\n\n    // 当导航到朋友圈视图时，执行回调\n    if (viewName === 'moments' && onEnterMomentsView) {\n      onEnterMomentsView();\n    }\n  }\n\n  // 设置输入框提示文字\n  setupInputPlaceholder(charDisplayName: string): void {\n    const savedPlaceholder = this.configManager.getSavedInputPlaceholder();\n    const $inputElement = $('#wechat-input-field');\n    $inputElement.attr('placeholder', savedPlaceholder || `与 ${charDisplayName} 对话...`);\n    $inputElement.prop('disabled', false);\n  }\n\n  // 设置手机尺寸调整\n  setupPhoneSizeAdjustment(): void {\n    const defaultBtn = document.getElementById('phone-size-default');\n    const mediumBtn = document.getElementById('phone-size-medium');\n    const smallBtn = document.getElementById('phone-size-small');\n    const phoneScreen = document.querySelector('.phone-screen') as HTMLElement;\n\n    if (!defaultBtn || !mediumBtn || !smallBtn || !phoneScreen) {\n      console.error('[BLMX] Phone size adjustment elements not found');\n      return;\n    }\n\n    // 应用保存的尺寸设置\n    const savedSize = this.configManager.getPhoneSize();\n    this.applyPhoneSize(savedSize, phoneScreen, [defaultBtn, mediumBtn, smallBtn]);\n\n    // 设置按钮点击事件\n    defaultBtn.addEventListener('click', () => {\n      this.applyPhoneSize('default', phoneScreen, [defaultBtn, mediumBtn, smallBtn]);\n    });\n\n    mediumBtn.addEventListener('click', () => {\n      this.applyPhoneSize('medium', phoneScreen, [defaultBtn, mediumBtn, smallBtn]);\n    });\n\n    smallBtn.addEventListener('click', () => {\n      this.applyPhoneSize('small', phoneScreen, [defaultBtn, mediumBtn, smallBtn]);\n    });\n  }\n\n  // 设置表情包尺寸控制\n  setupStickerSizeControl(): void {\n    const sizeSlider = document.getElementById('sticker-size-slider') as HTMLInputElement;\n    const sizeInput = document.getElementById('sticker-size-input') as HTMLInputElement;\n    const smallSizeBtn = document.getElementById('sticker-size-small');\n    const mediumSizeBtn = document.getElementById('sticker-size-medium');\n\n    if (!sizeSlider || !sizeInput || !smallSizeBtn || !mediumSizeBtn) {\n      return;\n    }\n\n    // 获取保存的尺寸设置\n    const savedSize = this.configManager.getStickerSize();\n\n    // 初始化控件值\n    sizeSlider.value = savedSize.toString();\n    sizeInput.value = savedSize.toString();\n\n    // 设置初始按钮状态\n    if (savedSize === 80) {\n      smallSizeBtn.classList.add('sticker-size-active');\n      mediumSizeBtn.classList.remove('sticker-size-active');\n    } else if (savedSize === 120) {\n      smallSizeBtn.classList.remove('sticker-size-active');\n      mediumSizeBtn.classList.add('sticker-size-active');\n    } else {\n      smallSizeBtn.classList.remove('sticker-size-active');\n      mediumSizeBtn.classList.remove('sticker-size-active');\n    }\n\n    // 设置CSS变量\n    this.applyStickerSize(savedSize);\n\n    // 滑块事件\n    sizeSlider.addEventListener('input', () => {\n      const newSize = parseInt(sizeSlider.value);\n      sizeInput.value = newSize.toString();\n      this.configManager.setStickerSize(newSize);\n      this.applyStickerSize(newSize);\n\n      // 更新按钮状态\n      this.updateStickerSizeButtonState(newSize, smallSizeBtn, mediumSizeBtn);\n    });\n\n    // 数字输入框事件\n    sizeInput.addEventListener('change', () => {\n      let newSize = parseInt(sizeInput.value);\n      // 限制范围\n      if (newSize < 40) newSize = 40;\n      if (newSize > 200) newSize = 200;\n\n      const newSizeStr = newSize.toString();\n      sizeInput.value = newSizeStr;\n      sizeSlider.value = newSizeStr;\n      this.configManager.setStickerSize(newSize);\n      this.applyStickerSize(newSize);\n\n      // 更新按钮状态\n      this.updateStickerSizeButtonState(newSize, smallSizeBtn, mediumSizeBtn);\n    });\n\n    // 小尺寸按钮事件\n    smallSizeBtn.addEventListener('click', () => {\n      this.setStickerSize(80, sizeSlider, sizeInput, smallSizeBtn, mediumSizeBtn);\n    });\n\n    // 中尺寸按钮事件\n    mediumSizeBtn.addEventListener('click', () => {\n      this.setStickerSize(120, sizeSlider, sizeInput, smallSizeBtn, mediumSizeBtn);\n    });\n  }\n\n  // 应用手机尺寸设置\n  private applyPhoneSize(size: 'default' | 'medium' | 'small', phoneScreen: HTMLElement, buttons: HTMLElement[]): void {\n    // 手机尺寸常量\n    const PHONE_SIZES = {\n      default: '48.75rem', // 默认尺寸: 48.75rem (780px)\n      medium: '42rem', // 中等尺寸: 42rem (672px)\n      small: '36rem', // 小尺寸: 36rem (576px)\n    };\n\n    // 设置屏幕高度\n    phoneScreen.style.height = PHONE_SIZES[size];\n\n    // 保存设置\n    this.configManager.setPhoneSize(size);\n\n    // 更新按钮样式\n    buttons.forEach(btn => btn.classList.remove('phone-size-active'));\n\n    // 根据选择的尺寸激活对应按钮\n    if (size === 'default') {\n      buttons[0].classList.add('phone-size-active');\n    } else if (size === 'medium') {\n      buttons[1].classList.add('phone-size-active');\n    } else if (size === 'small') {\n      buttons[2].classList.add('phone-size-active');\n    }\n  }\n\n  // 应用表情包尺寸\n  private applyStickerSize(size: number): void {\n    document.documentElement.style.setProperty('--sticker-size', `${size}px`);\n  }\n\n  // 设置表情包尺寸\n  private setStickerSize(\n    size: number,\n    sizeSlider: HTMLInputElement,\n    sizeInput: HTMLInputElement,\n    smallSizeBtn: HTMLElement,\n    mediumSizeBtn: HTMLElement,\n  ): void {\n    sizeSlider.value = size.toString();\n    sizeInput.value = size.toString();\n    this.configManager.setStickerSize(size);\n    this.applyStickerSize(size);\n\n    this.updateStickerSizeButtonState(size, smallSizeBtn, mediumSizeBtn);\n  }\n\n  // 更新表情包尺寸按钮状态\n  private updateStickerSizeButtonState(size: number, smallSizeBtn: HTMLElement, mediumSizeBtn: HTMLElement): void {\n    if (size === 80) {\n      smallSizeBtn.classList.add('sticker-size-active');\n      mediumSizeBtn.classList.remove('sticker-size-active');\n    } else if (size === 120) {\n      smallSizeBtn.classList.remove('sticker-size-active');\n      mediumSizeBtn.classList.add('sticker-size-active');\n    } else {\n      smallSizeBtn.classList.remove('sticker-size-active');\n      mediumSizeBtn.classList.remove('sticker-size-active');\n    }\n  }\n\n  // 滚动到聊天底部\n  scrollToBottom(): void {\n    setTimeout(() => {\n      const wechatBody = document.querySelector('.wechat-body') as HTMLElement;\n      if (wechatBody) {\n        wechatBody.scrollTop = wechatBody.scrollHeight;\n      }\n    }, 300);\n  }\n\n  // 设置字体选择功能\n  setupFontSelection(): void {\n    const $customFontBtn = $('#font-default');\n    const $systemFontBtn = $('#font-system');\n\n    if (!$customFontBtn.length || !$systemFontBtn.length) {\n      return;\n    }\n\n    // 从localStorage读取保存的字体设置\n    const savedFont = localStorage.getItem('blmx_font_setting') || 'custom';\n    this.applyFontSetting(savedFont as 'custom' | 'system');\n\n    // 绑定点击事件\n    $customFontBtn.on('click', () => {\n      this.applyFontSetting('custom');\n      localStorage.setItem('blmx_font_setting', 'custom');\n    });\n\n    $systemFontBtn.on('click', () => {\n      this.applyFontSetting('system');\n      localStorage.setItem('blmx_font_setting', 'system');\n    });\n  }\n\n  // 应用字体设置\n  private applyFontSetting(fontType: 'custom' | 'system'): void {\n    const $body = $('body');\n    const $customBtn = $('#font-default');\n    const $systemBtn = $('#font-system');\n\n    // 移除所有按钮的激活状态\n    $('.font-btn').removeClass('font-active');\n\n    if (fontType === 'custom') {\n      // 使用自定义字体 - 改进兼容性\n      this.applyCustomFont();\n      $customBtn.addClass('font-active');\n    } else {\n      // 使用系统字体 - 改进兼容性\n      this.applySystemFont();\n      $systemBtn.addClass('font-active');\n    }\n  }\n\n  // 应用自定义字体的兼容性方法\n  private applyCustomFont(): void {\n    const $body = $('body');\n\n    // 检测特殊WebView环境\n    const isIOSWebView = /iPhone|iPad|iPod/.test(navigator.userAgent) && /WebKit/.test(navigator.userAgent);\n    const isHuaweiWebView = /HUAWEI/.test(navigator.userAgent);\n\n    if (isIOSWebView || isHuaweiWebView) {\n      // 对于问题WebView，使用更简单的方法\n      // 直接设置字体，不依赖Font Loading API\n      const fontStack =\n        \"'MyCustomFont', 'Noto Sans SC', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif\";\n      $body.css('font-family', fontStack);\n\n      // 强制重新渲染\n      $body.addClass('force-font-refresh');\n      setTimeout(() => {\n        $body.removeClass('force-font-refresh');\n      }, 50);\n\n      // 延迟再次应用，确保生效\n      setTimeout(() => {\n        $body.css('font-family', fontStack);\n      }, 100);\n\n      return;\n    }\n\n    // 对于正常浏览器，使用标准方法\n    this.checkFontLoaded('MyCustomFont').then(loaded => {\n      if (loaded) {\n        // 字体已加载，直接应用\n        $body.css('font-family', \"'MyCustomFont', 'Noto Sans SC', sans-serif\");\n      } else {\n        // 字体未加载，尝试加载后再应用\n        this.loadCustomFont()\n          .then(() => {\n            $body.css('font-family', \"'MyCustomFont', 'Noto Sans SC', sans-serif\");\n          })\n          .catch(() => {\n            // 加载失败，使用备用字体\n            $body.css('font-family', \"'Noto Sans SC', sans-serif\");\n          });\n      }\n    });\n  }\n\n  // 应用系统字体的兼容性方法\n  private applySystemFont(): void {\n    const $body = $('body');\n\n    // 检测特殊WebView环境\n    const isIOSWebView = /iPhone|iPad|iPod/.test(navigator.userAgent) && /WebKit/.test(navigator.userAgent);\n    const isHuaweiWebView = /HUAWEI/.test(navigator.userAgent);\n\n    let fontStack: string;\n\n    if (isIOSWebView) {\n      // iOS WebView 优化字体栈\n      fontStack = '-apple-system, \"SF Pro Display\", \"SF Pro Text\", \"Helvetica Neue\", Helvetica, Arial, sans-serif';\n    } else if (isHuaweiWebView) {\n      // 华为 WebView 优化字体栈\n      fontStack = '\"HarmonyOS Sans\", \"Noto Sans SC\", \"Microsoft YaHei\", Arial, sans-serif';\n    } else {\n      // 通用系统字体栈\n      fontStack =\n        '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"';\n    }\n\n    $body.css('font-family', fontStack);\n\n    // 对于问题WebView，强制重新渲染\n    if (isIOSWebView || isHuaweiWebView) {\n      $body.addClass('force-font-refresh');\n      setTimeout(() => {\n        $body.removeClass('force-font-refresh');\n      }, 50);\n    }\n  }\n\n  // 检查字体是否已加载\n  private checkFontLoaded(fontFamily: string): Promise<boolean> {\n    return new Promise(resolve => {\n      if (!document.fonts) {\n        // 不支持Font Loading API，假设已加载\n        resolve(true);\n        return;\n      }\n\n      document.fonts.ready\n        .then(() => {\n          const fontFace = Array.from(document.fonts).find(\n            font => font.family === fontFamily || font.family === `'${fontFamily}'`,\n          );\n          resolve(!!fontFace && fontFace.status === 'loaded');\n        })\n        .catch(() => {\n          resolve(false);\n        });\n    });\n  }\n\n  // 加载自定义字体\n  private loadCustomFont(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!document.fonts) {\n        // 不支持Font Loading API，使用传统方法\n        const testElement = $('<div>')\n          .css({\n            position: 'absolute',\n            left: '-9999px',\n            top: '-9999px',\n            fontSize: '72px',\n            fontFamily: \"'MyCustomFont', monospace\",\n            visibility: 'hidden',\n          })\n          .text('test')\n          .appendTo('body');\n\n        // 等待一段时间后检查\n        setTimeout(() => {\n          testElement.remove();\n          resolve();\n        }, 1000);\n        return;\n      }\n\n      const fontFace = new FontFace('MyCustomFont', 'url(https://files.catbox.moe/er4wsg.ttf)');\n\n      fontFace\n        .load()\n        .then(loadedFace => {\n          document.fonts.add(loadedFace);\n          resolve();\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  // 设置全屏模式手机大小调整\n  setupFullscreenSizeAdjustment(): void {\n    // 等待DOM完全加载\n    setTimeout(() => {\n      const $defaultBtn = $('#fullscreen-size-default');\n      const $largeBtn = $('#fullscreen-size-large');\n      const $xlargeBtn = $('#fullscreen-size-xlarge');\n      const $slider = $('#fullscreen-size-slider');\n      const $input = $('#fullscreen-size-input');\n\n      if (!$defaultBtn.length || !$largeBtn.length || !$xlargeBtn.length || !$slider.length || !$input.length) {\n        return;\n      }\n\n      this.initializeFullscreenSizeControls($defaultBtn, $largeBtn, $xlargeBtn, $slider, $input);\n    }, 100);\n  }\n\n  // 初始化全屏大小控件\n  private initializeFullscreenSizeControls(\n    $defaultBtn: JQuery,\n    $largeBtn: JQuery,\n    $xlargeBtn: JQuery,\n    $slider: JQuery,\n    $input: JQuery,\n  ): void {\n    // 从localStorage读取保存的全屏大小设置\n    const savedSize = this.configManager.getFullscreenSize();\n\n    // 初始化控件值\n    $slider.val(savedSize);\n    $input.val(savedSize);\n    this.applyFullscreenSize(savedSize);\n    this.updateFullscreenSizeButtonState(savedSize);\n\n    // 预设按钮点击事件\n    $defaultBtn.off('click').on('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setFullscreenSize(100);\n    });\n\n    $largeBtn.off('click').on('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setFullscreenSize(130);\n    });\n\n    $xlargeBtn.off('click').on('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setFullscreenSize(160);\n    });\n\n    // 滑块事件\n    $slider.off('input').on('input', e => {\n      const newSize = parseInt($(e.target).val() as string);\n      $input.val(newSize);\n      this.setFullscreenSize(newSize);\n    });\n\n    // 数字输入框事件\n    $input.off('change').on('change', e => {\n      let newSize = parseInt($(e.target).val() as string);\n      // 限制范围\n      if (newSize < 50) newSize = 50;\n      if (newSize > 200) newSize = 200;\n\n      $input.val(newSize);\n      $slider.val(newSize);\n      this.setFullscreenSize(newSize);\n    });\n\n    // 监听全屏状态变化\n    this.setupFullscreenListener();\n  }\n\n  // 设置全屏状态监听器\n  private setupFullscreenListener(): void {\n    const handleFullscreenChange = () => {\n      const isFullscreen = !!(\n        document.fullscreenElement ||\n        (document as any).webkitFullscreenElement ||\n        (document as any).mozFullScreenElement ||\n        (document as any).msFullscreenElement\n      );\n\n      if (!isFullscreen) {\n        // 退出全屏时重置缩放\n        this.resetBrowserZoom();\n      } else {\n        // 进入全屏时应用当前设置\n        const currentSize = this.configManager.getFullscreenSize();\n        this.applyBrowserLikeZoom(currentSize / 100);\n      }\n    };\n\n    // 绑定全屏状态变化事件\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n    document.addEventListener('MSFullscreenChange', handleFullscreenChange);\n  }\n\n  // 重置浏览器缩放\n  private resetBrowserZoom(): void {\n    const body = document.body;\n\n    // 重置所有缩放相关样式\n    body.style.transform = '';\n    body.style.transformOrigin = '';\n    body.style.position = '';\n    body.style.width = '';\n    body.style.height = '';\n    body.style.margin = '';\n  }\n\n  // 设置全屏大小并更新UI\n  private setFullscreenSize(size: number): void {\n    // 保存设置\n    this.configManager.setFullscreenSize(size);\n\n    // 更新滑块和输入框\n    $('#fullscreen-size-slider').val(size);\n    $('#fullscreen-size-input').val(size);\n\n    // 应用设置\n    this.applyFullscreenSize(size);\n\n    // 更新按钮状态\n    this.updateFullscreenSizeButtonState(size);\n  }\n\n  // 应用全屏模式手机大小设置\n  private applyFullscreenSize(size: number): void {\n    const scale = size / 100;\n\n    // 检查当前是否在全屏模式\n    const isFullscreen = !!(\n      document.fullscreenElement ||\n      (document as any).webkitFullscreenElement ||\n      (document as any).mozFullScreenElement ||\n      (document as any).msFullscreenElement\n    );\n\n    if (isFullscreen) {\n      // 在全屏模式下应用浏览器级别的缩放\n      this.applyBrowserLikeZoom(scale);\n    }\n    // 删除非全屏模式下的临时预览功能\n  }\n\n  // 应用类似浏览器的缩放效果\n  private applyBrowserLikeZoom(scale: number): void {\n    const body = document.body;\n\n    if (scale !== 1) {\n      body.style.transform = `scale(${scale})`;\n      body.style.transformOrigin = 'center center';\n      body.style.position = 'relative';\n      body.style.width = `${100 / scale}%`;\n      body.style.height = `${100 / scale}%`;\n      body.style.margin = '0 auto';\n    } else {\n      body.style.transform = '';\n      body.style.transformOrigin = '';\n      body.style.position = '';\n      body.style.width = '';\n      body.style.height = '';\n      body.style.margin = '';\n    }\n  }\n\n  // 更新按钮状态\n  private updateFullscreenSizeButtonState(size: number): void {\n    // 移除所有按钮的激活状态\n    $('.fullscreen-size-btn').removeClass('fullscreen-size-active');\n\n    // 根据大小激活对应按钮\n    if (size === 100) {\n      $('#fullscreen-size-default').addClass('fullscreen-size-active');\n    } else if (size === 130) {\n      $('#fullscreen-size-large').addClass('fullscreen-size-active');\n    } else if (size === 160) {\n      $('#fullscreen-size-xlarge').addClass('fullscreen-size-active');\n    }\n    // 自定义大小不激活任何预设按钮\n  }\n}\n","import { EventManager } from './event-manager';\nimport {\n  ChatEntry,\n  EventLogEntry,\n  FileMessage,\n  GiftMessage,\n  ImageMessage,\n  LocationMessage,\n  LogEntry,\n  StickerMessage,\n  TextMessage,\n  TransferMessage,\n  VoiceMessage,\n} from './script';\n\n// 类型定义\ninterface Avatars {\n  user: string;\n  char: string;\n}\n\ninterface UIRendererOptions {\n  getDisplayName: (type: 'user' | 'char') => string;\n  findStickerUrlByName: (name: string) => string | undefined;\n  onTransferAccept?: (data: TransferMessage['data']) => void;\n  onGiftAction?: (data: GiftMessage['data']) => Promise<void>;\n  onRecallMessage?: (entry: ChatEntry) => Promise<void>;\n  isMessageInQueue?: (messageId: string) => boolean;\n}\n\n// UI渲染器类\nexport class UIRenderer {\n  private wechatBody: HTMLElement;\n  private lastDisplayedTimeInMinutes: number = -Infinity;\n  private options: UIRendererOptions;\n  private avatars: Avatars;\n  private eventManager: EventManager;\n\n  // 性能优化：添加渲染节流\n  private renderQueue: LogEntry[] = [];\n  private isRendering: boolean = false;\n  private renderThrottle: number = 16; // 60fps\n\n  constructor(wechatBodySelector: string, avatars: Avatars, options: UIRendererOptions) {\n    const $wechatBody = $(wechatBodySelector);\n    if (!$wechatBody.length) {\n      throw new Error(`Element with selector \"${wechatBodySelector}\" not found`);\n    }\n    this.wechatBody = $wechatBody[0];\n    this.avatars = avatars;\n    this.options = options;\n    this.eventManager = new EventManager();\n\n    // 启动渲染队列处理\n    this.startRenderLoop();\n  }\n\n  /**\n   * 性能优化：批量渲染队列处理\n   */\n  private startRenderLoop(): void {\n    const processQueue = () => {\n      if (this.renderQueue.length > 0 && !this.isRendering) {\n        this.isRendering = true;\n        const batch = this.renderQueue.splice(0, 5); // 每次处理5个\n\n        batch.forEach(entry => {\n          this.renderEntry(entry, undefined, false);\n        });\n\n        this.isRendering = false;\n      }\n\n      setTimeout(processQueue, this.renderThrottle);\n    };\n\n    processQueue();\n  }\n\n  /**\n   * 添加到渲染队列而不是立即渲染\n   */\n  private queueRender(entry: LogEntry): void {\n    this.renderQueue.push(entry);\n  }\n\n  // 清除聊天界面\n  clearChat(): void {\n    this.wechatBody.innerHTML = '';\n    this.lastDisplayedTimeInMinutes = -Infinity;\n  }\n\n  // 渲染单个条目到UI\n  renderEntry(entry: LogEntry, index?: number, animate: boolean = false): void {\n    if (!entry) return;\n\n    if ('type' in entry) {\n      switch (entry.type) {\n        case 'message':\n          if (entry.isSystemMessage) {\n            this.renderSystemMessage(entry as TextMessage, animate, index);\n          } else {\n            this.addMessageToWeChat(entry, index, animate);\n          }\n          break;\n        case 'time':\n          this.addTimestampToWeChat(entry.content.date, entry.content.time, true, index);\n          break;\n        case 'event':\n          this.addEventLogToWeChat(entry.content, index);\n          break;\n        default:\n          this.addMessageToWeChat(entry, index, animate);\n      }\n    }\n  }\n\n  // 渲染撤回通知\n  renderRecallNotice(entry: LogEntry, elementToReplace: HTMLElement | null = null, index?: number): void {\n    const who = this.options.getDisplayName('sender' in entry && entry.sender === 'me' ? 'user' : 'char');\n    const noticeRow = document.createElement('div');\n    noticeRow.className = 'timestamp-row';\n\n    // 确保添加data-log-index属性，这样在删除模式下可以显示删除按钮\n    if (index !== undefined) {\n      noticeRow.dataset.logIndex = index.toString();\n    }\n\n    // 如果有id，添加message-id属性\n    if ('id' in entry) {\n      noticeRow.dataset.messageId = entry.id;\n    }\n\n    const recalledText =\n      typeof entry.recalled_content === 'object' && entry.recalled_content !== null\n        ? entry.recalled_content.text\n        : entry.recalled_content;\n\n    noticeRow.innerHTML = `\n      <div class=\"recall-notice-container\">\n        <div class=\"recall-notice-text\">\"${who}\" 撤回了一条消息</div>\n        <div class=\"recall-content\">${recalledText || ('content' in entry ? entry.content : '')}</div>\n      </div>\n    `;\n\n    const noticeTextEl = noticeRow.querySelector('.recall-notice-text');\n    const contentEl = noticeRow.querySelector('.recall-content');\n\n    if (noticeTextEl && contentEl) {\n      noticeTextEl.addEventListener('click', () => {\n        contentEl.classList.toggle('expanded');\n      });\n    }\n\n    if (elementToReplace) {\n      elementToReplace.replaceWith(noticeRow);\n    } else {\n      this.wechatBody.appendChild(noticeRow);\n    }\n\n    this.scrollToBottom();\n  }\n\n  renderMomentsFeed(\n    logEntries: LogEntry[],\n    getDisplayName: (type: 'user' | 'char') => string,\n    avatars: { user: string; char: string },\n  ): void {\n    const momentsFeedList = $('#moments-feed-list')[0] as HTMLUListElement;\n    if (!momentsFeedList) return;\n\n    momentsFeedList.innerHTML = '';\n    const posts: { [key: number]: any } = {};\n    const momentPostLogIndices: number[] = [];\n\n    logEntries.forEach((entry, index) => {\n      if ('key' in entry && entry.key.includes('_MOMENT')) {\n        momentPostLogIndices.push(index);\n      }\n    });\n\n    momentPostLogIndices.forEach(logIndex => {\n      const entry = logEntries[logIndex];\n      posts[logIndex] = { ...(entry as any), likes: [], comments: [], id: logIndex };\n    });\n\n    logEntries.forEach((entry, index) => {\n      if ('key' in entry && (entry.key.includes('_LIKE') || entry.key.includes('_COMMENT'))) {\n        const targetPostAbsoluteIndex = momentPostLogIndices[parseInt((entry as any).data.target_post_id, 10)];\n        const targetPost = posts[targetPostAbsoluteIndex];\n\n        if (targetPost) {\n          if (entry.key.includes('_LIKE')) {\n            const likerName = entry.key.startsWith('USER') ? getDisplayName('user') : getDisplayName('char');\n            if (!targetPost.likes.some((l: any) => l.name === likerName)) {\n              targetPost.likes.push({ key: entry.key, name: likerName, originalLogIndex: index });\n            }\n          } else {\n            targetPost.comments.push({ ...(entry as any), originalLogIndex: index });\n          }\n        } else {\n          // 目标帖子未找到，跳过交互渲染\n        }\n      }\n    });\n\n    Object.values(posts)\n      .reverse()\n      .forEach(post => {\n        const fromUser = post.key.startsWith('USER');\n        const authorName = fromUser ? getDisplayName('user') : getDisplayName('char');\n        const authorAvatar = fromUser ? avatars.user : avatars.char;\n        const li = document.createElement('li');\n        li.className = 'moment-post';\n        li.dataset.postId = post.id;\n        const momentSequenceId = momentPostLogIndices.indexOf(post.id);\n        li.dataset.momentSequenceId = String(momentSequenceId);\n        // 设置moment-id属性，用于删除功能\n        li.dataset.momentId = String(momentSequenceId);\n\n        let mediaHtml = '';\n        if (post.data.image_type === 'url' && post.data.image) {\n          mediaHtml = `<img src=\"${post.data.image}\" class=\"post-media-image\" />`;\n        } else if (post.data.image_type === 'desc' && post.data.image) {\n          mediaHtml = `<div class=\"image-desc-content\"><div class=\"text-wrapper\">${post.data.image}</div></div>`;\n        }\n\n        let interactionsHtml = '';\n        if (post.likes.length > 0 || post.comments.length > 0) {\n          const likersHtml =\n            post.likes.length > 0\n              ? `<div class=\"likes-section\"><i class=\"fas fa-heart\"></i> ${post.likes\n                  .map((l: any) => `<span class=\"liker-name\">${l.name}</span>`)\n                  .join(', ')}</div>`\n              : '';\n          const commentsHtml =\n            post.comments.length > 0\n              ? `<ul class=\"comments-section\">${post.comments\n                  .map(\n                    (c: any) =>\n                      `<li><span class=\"comment-author\">${\n                        c.key.startsWith('USER') ? getDisplayName('user') : getDisplayName('char')\n                      }</span>: ${c.data.text}</li>`,\n                  )\n                  .join('')}</ul>`\n              : '';\n          interactionsHtml = `<div class=\"post-interactions\">${likersHtml}${commentsHtml}</div>`;\n        }\n\n        const displayTime = this.formatMomentTimestamp(post.data.date, post.data.time);\n        const deleteBtnHtml = fromUser ? `<span class=\"delete-moment-btn\" title=\"删除\">删除</span>` : '';\n\n        li.innerHTML = `<img src=\"${authorAvatar}\" class=\"post-author-avatar\" />\n                         <div class=\"post-details\">\n                             <span class=\"post-author-name\">${authorName}</span>\n                             <p class=\"post-content\">${post.data.text || ''}</p>\n                             <div class=\"post-media\">${mediaHtml}</div>\n                             <div class=\"post-meta\">\n                                 <div class=\"post-meta-left\">\n                                     <span class=\"timestamp\">${displayTime}</span>\n                                     ${deleteBtnHtml}\n                                 </div>\n                                 <div class=\"post-actions\">\n                                     <span class=\"comment-button\" title=\"评论/点赞\"><i class=\"fas fa-comment-dots\"></i></span>\n                                 </div>\n                             </div>\n                             ${interactionsHtml}\n                         </div>`;\n        momentsFeedList.appendChild(li);\n      });\n  }\n\n  // 显示\"正在输入\"指示器\n  showTypingIndicator(): void {\n    this.hideTypingIndicator(); // 确保只有一个\n    const indicator = document.createElement('div');\n    indicator.className = 'typing-indicator';\n    indicator.id = 'typing-indicator-id';\n    const avatarSrc = this.avatars.char;\n\n    indicator.innerHTML = `\n      <img src=\"${avatarSrc}\" class=\"message-avatar\" />\n      <div class=\"message-bubble\">\n        <span class=\"typing-dot\"></span>\n        <span class=\"typing-dot\"></span>\n        <span class=\"typing-dot\"></span>\n      </div>\n    `;\n    this.wechatBody.appendChild(indicator);\n    this.scrollToBottom();\n  }\n\n  // 隐藏\"正在输入\"指示器\n  hideTypingIndicator(): void {\n    $('#typing-indicator-id').remove();\n  }\n\n  // 显示AI生成内容的加载动画（在灵动岛上）\n  showGeneratingIndicator(): void {\n    this.hideGeneratingIndicator(); // 确保只有一个\n\n    // 获取灵动岛元素 - 使用jQuery\n    const dynamicIsland = $('.dynamic-island')[0] as HTMLElement;\n    if (!dynamicIsland) return;\n\n    // 创建加载动画容器\n    const loadingContainer = document.createElement('div');\n    loadingContainer.className = 'generating-indicator';\n    loadingContainer.id = 'generating-indicator-id';\n\n    // 创建加载动画点\n    loadingContainer.innerHTML = `\n      <span class=\"generating-dot\"></span>\n      <span class=\"generating-dot\"></span>\n      <span class=\"generating-dot\"></span>\n    `;\n\n    // 添加到灵动岛\n    dynamicIsland.appendChild(loadingContainer);\n\n    // 添加活跃类\n    dynamicIsland.classList.add('generating-active');\n  }\n\n  // 隐藏AI生成内容的加载动画\n  hideGeneratingIndicator(): void {\n    $('#generating-indicator-id').remove();\n    $('.dynamic-island').removeClass('generating-active');\n  }\n\n  // 计算打字延迟时间\n  calculateTypingDelay(messageContent: string | object): number {\n    // 对于非文本消息（如表情、图片等），使用一个较短的固定延迟\n    if (typeof messageContent !== 'string' || messageContent.trim() === '') {\n      return 800 + Math.random() * 700; // 0.8s to 1.5s\n    }\n\n    const textLength = messageContent.length;\n    const baseDelay = 500; // 基础延迟 0.5s\n    const perCharDelay = 40; // 每个字符增加 40ms\n    const randomComponent = Math.random() * 800; // 增加 0-0.8s 的随机性\n\n    const totalDelay = baseDelay + textLength * perCharDelay + randomComponent;\n\n    // 确保总延迟不超过3秒 (3000ms)\n    return Math.min(totalDelay, 3000);\n  }\n\n  // 添加消息到微信界面\n  private addMessageToWeChat(entry: ChatEntry, index?: number, isNewMessage: boolean = false): void {\n    const { id, sender, type } = entry;\n    const messageRow = document.createElement('div');\n    messageRow.className = 'message-row';\n    if (index !== undefined) messageRow.dataset.logIndex = index.toString();\n    messageRow.dataset.messageId = id;\n\n    const senderClass = sender;\n    messageRow.classList.add(senderClass);\n\n    const avatarSrc = sender === 'me' ? this.avatars.user : this.avatars.char;\n    const avatarImgHtml = `<img src=\"${avatarSrc}\" class=\"message-avatar\" />`;\n\n    if (type === 'voice') {\n      this.renderVoiceMessage(messageRow, entry as VoiceMessage, avatarImgHtml);\n    } else {\n      let bubbleContent = '';\n\n      switch (type) {\n        case 'sticker':\n          bubbleContent = this.renderStickerContent(entry as StickerMessage);\n          break;\n        case 'image':\n          bubbleContent = this.renderImageContent(entry as ImageMessage);\n          break;\n        case 'location':\n          bubbleContent = this.renderLocationContent(entry as LocationMessage);\n          break;\n        case 'transfer':\n          bubbleContent = this.renderTransferContent(entry as TransferMessage);\n          break;\n        case 'file':\n          bubbleContent = this.renderFileContent(entry as FileMessage);\n          break;\n        case 'gift':\n          {\n            // 判断是红包还是礼物\n            const giftEntry = entry as GiftMessage;\n            const isRedEnvelope =\n              giftEntry.data.name.includes('红包') ||\n              giftEntry.data.name.includes('压岁钱') ||\n              giftEntry.data.name.includes('红利');\n\n            if (isRedEnvelope) {\n              bubbleContent = this.renderRedEnvelopeContent(giftEntry);\n            } else {\n              bubbleContent = this.renderGiftContent(giftEntry);\n            }\n          }\n          break;\n        default:\n          bubbleContent = (entry as TextMessage).content.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n          break;\n      }\n\n      // 根据消息类型添加特殊的气泡类\n      let bubbleClass = 'message-bubble';\n      if (type === 'sticker') {\n        bubbleClass += ' sticker-bubble';\n      } else if (type === 'image') {\n        bubbleClass += ' image-desc-bubble';\n      } else if (type === 'location') {\n        bubbleClass += ' location-bubble';\n      } else if (type === 'transfer') {\n        bubbleClass += ' transfer-bubble';\n      } else if (type === 'file') {\n        bubbleClass += ' file-bubble';\n      } else if (type === 'gift') {\n        bubbleClass += ' gift-bubble';\n      }\n\n      messageRow.innerHTML =\n        sender === 'me'\n          ? `<div class=\"${bubbleClass}\">${bubbleContent}</div>${avatarImgHtml}`\n          : `${avatarImgHtml}<div class=\"${bubbleClass}\">${bubbleContent}</div>`;\n\n      const bubble = messageRow.querySelector('.message-bubble');\n      if (bubble) {\n        this.applyBubbleStyles(bubble, type, entry);\n        this.setupBubbleInteractions(bubble, type, entry);\n      }\n    }\n\n    if (isNewMessage) {\n      messageRow.classList.add('new-message');\n    }\n\n    // 为USER文字消息添加长按撤回功能\n    if (sender === 'me' && entry.type === 'message') {\n      this.setupUserMessageLongPress(messageRow, entry);\n    }\n\n    this.wechatBody.appendChild(messageRow);\n    this.scrollToBottom();\n  }\n\n  // 渲染语音消息\n  private renderVoiceMessage(messageRow: HTMLElement, entry: VoiceMessage, avatarImgHtml: string): void {\n    const contentContainer = document.createElement('div');\n    contentContainer.className = 'message-content-container';\n\n    const bubble = document.createElement('div');\n    bubble.className = 'message-bubble voice-bubble';\n    bubble.innerHTML = `<span class=\"duration\">${entry.content.duration}\"</span><i class=\"fas fa-wifi voice-icon\"></i>`;\n\n    const textRevealBox = document.createElement('div');\n    textRevealBox.className = 'voice-text-content';\n    textRevealBox.textContent = entry.content.text;\n\n    contentContainer.appendChild(bubble);\n    contentContainer.appendChild(textRevealBox);\n\n    if (entry.sender === 'me') {\n      messageRow.appendChild(contentContainer);\n      messageRow.insertAdjacentHTML('beforeend', avatarImgHtml);\n    } else {\n      messageRow.insertAdjacentHTML('afterbegin', avatarImgHtml);\n      messageRow.appendChild(contentContainer);\n    }\n\n    let longPressFired = false;\n    const timerDuration = 500;\n    let pressTimer: number;\n\n    bubble.addEventListener('pointerdown', e => {\n      if (e.pointerType === 'mouse' && (e as PointerEvent).button !== 0) return;\n      longPressFired = false;\n      pressTimer = window.setTimeout(() => {\n        messageRow.classList.add('voice-text-visible');\n        longPressFired = true;\n      }, timerDuration);\n    });\n\n    bubble.addEventListener('pointerup', () => {\n      clearTimeout(pressTimer);\n      if (!longPressFired) {\n        if (messageRow.classList.contains('voice-text-visible')) {\n          messageRow.classList.remove('voice-text-visible');\n        }\n      }\n    });\n\n    bubble.addEventListener('pointerleave', () => clearTimeout(pressTimer));\n    bubble.addEventListener('contextmenu', e => e.preventDefault());\n  }\n\n  // 渲染表情包内容\n  private renderStickerContent(entry: StickerMessage): string {\n    const stickerUrl = this.options.findStickerUrlByName(entry.content);\n    if (stickerUrl) {\n      // 使用纯HTML创建表情包容器和图片\n      return `<div class=\"sticker-container\"><img src=\"${stickerUrl}\" class=\"sticker-img\" /></div>`;\n    } else {\n      return `<div class=\"sticker-placeholder\">[表情]</div>`;\n    }\n  }\n\n  // 渲染图片内容\n  private renderImageContent(entry: ImageMessage): string {\n    if (entry.content.type === 'url') {\n      let imageUrl = entry.content.value;\n      if (imageUrl.startsWith('blmx-img-')) {\n        const storedImage = sessionStorage.getItem(imageUrl);\n        if (storedImage) {\n          imageUrl = storedImage;\n        } else {\n          return `<div class=\"image-desc-content\"><div class=\"text-wrapper\">[图片已过期]</div></div>`;\n        }\n      }\n      return `<img src=\"${imageUrl}\" class=\"chat-image\" />`;\n    } else {\n      const descText = entry.content.value;\n      return `<div class=\"image-desc-content\"><div class=\"text-wrapper\">${String(descText)\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')}</div></div>`;\n    }\n  }\n\n  // 渲染位置内容\n  private renderLocationContent(entry: LocationMessage): string {\n    return `<div class=\"location-card\">\n      <div class=\"location-content\">\n        <div class=\"location-title\">${entry.content}</div>\n        <div class=\"location-subtitle\">共享实时位置</div>\n      </div>\n      <div class=\"location-map-placeholder\"></div>\n    </div>`;\n  }\n\n  // 渲染转账内容\n  private renderTransferContent(entry: TransferMessage): string {\n    const isReceipt = entry.data.status !== 'sent';\n    const detailsHtml = isReceipt\n      ? `<div class=\"status-text\">${entry.data.status === 'accepted' ? '已接收' : '已退还'}</div>`\n      : `<div class=\"note\">${entry.data.note || ' '}</div>`;\n    const cardClass = isReceipt ? 'transfer-receipt' : 'transfer-initial';\n\n    return `<div class=\"transfer-card ${cardClass}\">\n      <div class=\"transfer-content\">\n        <img src=\"https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E7%B4%A0%E6%9D%90/arrows.png\" class=\"transfer-icon-image\">\n        <div class=\"transfer-details\">\n          <div class=\"amount\">¥${entry.data.amount}</div>\n          ${detailsHtml}\n        </div>\n      </div>\n      <div class=\"transfer-footer\">转账</div>\n    </div>`;\n  }\n\n  // 渲染文件内容\n  private renderFileContent(entry: FileMessage): string {\n    return `<div class=\"file-card\">\n      <div class=\"file-content\">\n        <i class=\"fas fa-file-alt file-icon\"></i>\n        <div class=\"file-details\">\n          <div class=\"file-name\">${entry.content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>\n        </div>\n      </div>\n      <div class=\"file-footer\">文件</div>\n    </div>`;\n  }\n\n  // 渲染礼物内容\n  private renderGiftContent(entry: GiftMessage): string {\n    let detailsClass = '';\n    let detailsContent = '';\n    const isReceipt = entry.data.status !== 'sent';\n    const cardClass = isReceipt ? 'gift-receipt' : 'gift-initial';\n\n    if (entry.data.status === 'sent') {\n      if (entry.data.price) {\n        detailsClass = 'gift-price';\n        detailsContent = `¥ ${entry.data.price}`;\n      }\n    } else {\n      detailsClass = 'gift-status-text';\n      detailsContent = entry.data.status === 'accepted' ? '已收下' : '已拒收';\n    }\n\n    return `<div class=\"gift-card ${cardClass}\">\n      <div class=\"gift-content\">\n        <span class=\"gift-icon-emoji\">🎁</span>\n        <div class=\"gift-details\">\n          <div class=\"gift-name\">${entry.data.name}</div>\n          ${detailsContent ? `<div class=\"${detailsClass}\">${detailsContent}</div>` : ''}\n        </div>\n      </div>\n      <div class=\"gift-footer\">礼物</div>\n    </div>`;\n  }\n\n  // 渲染红包内容\n  private renderRedEnvelopeContent(entry: GiftMessage): string {\n    let detailsClass = '';\n    let detailsContent = '';\n    const isReceipt = entry.data.status !== 'sent';\n    const cardClass = isReceipt ? 'gift-receipt' : 'gift-initial';\n\n    if (entry.data.status === 'sent') {\n      if (entry.data.price) {\n        detailsClass = 'gift-price';\n        detailsContent = `¥ ${entry.data.price}`;\n      }\n    } else {\n      detailsClass = 'gift-status-text';\n      detailsContent = entry.data.status === 'accepted' ? '已领取' : '已拒收';\n    }\n\n    return `<div class=\"gift-card ${cardClass}\">\n      <div class=\"gift-content\">\n        <img src=\"https://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/%E7%B4%A0%E6%9D%90/red-envelope.png\" class=\"gift-icon-image\">\n        <div class=\"gift-details\">\n          <div class=\"gift-name\">${entry.data.name}</div>\n          ${detailsContent ? `<div class=\"${detailsClass}\">${detailsContent}</div>` : ''}\n        </div>\n      </div>\n      <div class=\"gift-footer\">红包</div>\n    </div>`;\n  }\n\n  // 应用气泡样式\n  private applyBubbleStyles(bubble: Element, type: string, entry: ChatEntry): void {\n    if (type === 'image') {\n      if ((entry as ImageMessage).content.type === 'url') {\n        bubble.classList.add('image-url-bubble');\n      } else {\n        bubble.classList.add('image-desc-bubble');\n      }\n    } else {\n      const bubbleTypeMap: Record<string, string> = {\n        sticker: 'sticker-bubble',\n        location: 'location-bubble',\n        transfer: 'transfer-bubble',\n        file: 'file-bubble',\n        gift: 'gift-bubble',\n      };\n\n      if (bubbleTypeMap[type]) {\n        bubble.classList.add(bubbleTypeMap[type]);\n      }\n    }\n  }\n\n  // 设置气泡交互\n  private setupBubbleInteractions(bubble: Element, type: string, entry: ChatEntry): void {\n    if (type === 'transfer') {\n      const transferCard = bubble.querySelector('.transfer-card');\n      if (!transferCard) return;\n\n      const transferEntry = entry as TransferMessage;\n      const isReceipt = transferEntry.data.status !== 'sent';\n\n      if (!isReceipt && entry.sender === 'them') {\n        transferCard.classList.add('them');\n        transferCard.addEventListener(\n          'click',\n          () => {\n            // 直接接收转账，因为转账功能本身已经有自定义对话框\n            if (this.options.onTransferAccept) {\n              this.options.onTransferAccept({\n                ...transferEntry.data,\n                status: 'accepted' as 'accepted' | 'rejected',\n              });\n            }\n          },\n          { once: true },\n        );\n      }\n    }\n\n    if (type === 'gift') {\n      const giftBubble = bubble as HTMLElement;\n      const giftCard = bubble.querySelector('.gift-card');\n      const giftEntry = entry as GiftMessage;\n      const isReceipt = giftEntry.data.status !== 'sent';\n\n      if (isReceipt) {\n        // 已经接收或拒收的礼物，不需要添加点击事件\n        return;\n      }\n\n      // 为所有未处理的礼物添加点击事件，无论是用户还是AI发送的\n      if (giftCard) giftCard.classList.add(entry.sender === 'them' ? 'them' : 'me');\n      giftBubble.classList.add('gift-clickable');\n      giftBubble.addEventListener(\n        'click',\n        async () => {\n          if (this.options.onGiftAction) {\n            await this.options.onGiftAction(giftEntry.data);\n          }\n\n          giftBubble.classList.remove('gift-clickable');\n        },\n        { once: true },\n      );\n    }\n  }\n\n  // 添加时间戳到微信界面\n  private addTimestampToWeChat(date: string, time: string, isSystemTime: boolean, index?: number): void {\n    const timeText = this.formatMomentTimestamp(date, time);\n\n    // 检查是否需要显示时间戳\n    // 如果是系统时间（而不是用户手动插入的时间）\n    if (isSystemTime) {\n      // 只有纯时间（今天的消息）才需要进行10分钟过滤\n      const isOnlyTime = timeText === time;\n\n      if (isOnlyTime) {\n        // 对于今天的消息，检查是否与上一条时间戳太接近\n        const timeInMinutes = this.parseTimeToMinutes(timeText);\n        if (timeInMinutes !== null && timeInMinutes - this.lastDisplayedTimeInMinutes < 10) {\n          return; // 跳过显示这个时间戳\n        }\n\n        // 更新最后显示的时间\n        if (timeInMinutes !== null) {\n          this.lastDisplayedTimeInMinutes = timeInMinutes;\n        }\n      } else {\n        // 对于昨天或更早的消息，总是显示并重置时间计数器\n        this.lastDisplayedTimeInMinutes = -Infinity;\n      }\n    }\n\n    // 创建并添加时间戳元素\n    const t = document.createElement('div');\n    t.className = 'timestamp-row';\n    if (index !== undefined) t.dataset.logIndex = index.toString();\n\n    // 存储原始日期和时间用于刷新\n    t.dataset.originalDate = date;\n    t.dataset.originalTime = time;\n\n    t.innerHTML = `<span class=\"timestamp-text\">${timeText}</span>`;\n    this.wechatBody.appendChild(t);\n\n    this.scrollToBottom();\n  }\n\n  // 添加事件日志到微信界面\n  private addEventLogToWeChat(eventData: EventLogEntry['content'], index?: number): void {\n    // 确保eventData具有必要的字段\n    if (!eventData || !eventData.date || !eventData.time) {\n      console.error('事件日志数据不完整:', eventData);\n      return;\n    }\n\n    // 获取格式化后的时间文本，包含日期信息\n    const timeText = this.formatMomentTimestamp(eventData.date, eventData.time);\n\n    // 创建事件日志行\n    const row = document.createElement('div');\n    row.className = 'event-log-row';\n    if (index !== undefined) row.dataset.logIndex = index.toString();\n\n    // 存储原始日期和时间用于刷新\n    row.dataset.originalDate = eventData.date;\n    row.dataset.originalTime = eventData.time;\n\n    // 如果没有描述，只显示时间；如果有描述，显示时间和描述\n    if (eventData.description) {\n      row.innerHTML = `\n        <div class=\"event-log-container\">\n          <div class=\"event-time-text has-desc clickable\">${timeText}</div>\n          <div class=\"event-description\">${eventData.description}</div>\n        </div>\n      `;\n    } else {\n      row.innerHTML = `\n        <div class=\"event-log-container\">\n          <div class=\"event-time-text\">${timeText}</div>\n        </div>\n      `;\n    }\n\n    // 为带有描述的事件添加点击展开功能\n    if (eventData.description) {\n      const timeEl = row.querySelector('.event-time-text');\n      const descEl = row.querySelector('.event-description');\n\n      if (timeEl && descEl) {\n        timeEl.addEventListener('click', () => {\n          // 只使用CSS类来控制显示/隐藏，不手动设置display属性\n          descEl.classList.toggle('expanded');\n        });\n      }\n    }\n\n    // 添加到聊天界面并滚动到底部\n    this.wechatBody.appendChild(row);\n    this.scrollToBottom();\n  }\n\n  // 渲染系统消息\n  private renderSystemMessage(entry: TextMessage, animate: boolean = false, index?: number): void {\n    const chatContainer = this.wechatBody;\n    if (!chatContainer) return;\n\n    const systemRow = document.createElement('div');\n    systemRow.className = 'event-log-row';\n    if (animate) systemRow.classList.add('new-message');\n    if (entry.id) {\n      systemRow.dataset.messageId = entry.id;\n    }\n    if (index !== undefined) {\n      systemRow.dataset.logIndex = index.toString();\n    }\n\n    const systemContainer = document.createElement('div');\n    systemContainer.className = 'event-log-container';\n\n    const systemText = document.createElement('div');\n    systemText.className = 'event-time-text system-message';\n    systemText.textContent = entry.content;\n\n    systemContainer.appendChild(systemText);\n    systemRow.appendChild(systemContainer);\n    chatContainer.appendChild(systemRow);\n\n    this.scrollToBottom();\n  }\n\n  // 解析时间为分钟数\n  private parseTimeToMinutes(timeString: string): number | null {\n    const match = timeString.match(/(\\d{1,2}):(\\d{2})/);\n    return match ? 60 * parseInt(match[1], 10) + parseInt(match[2], 10) : null;\n  }\n\n  // 格式化时间戳\n  private formatMomentTimestamp(dateString: string, timeString: string): string {\n    if (!dateString || !timeString) return ' ';\n\n    try {\n      // 解析日期和当前日期\n      const postDate = new Date(dateString);\n      // 确保我们使用游戏时间而非现实时间\n      const currentDate = window.currentGameDate ? new Date(window.currentGameDate) : new Date();\n\n      // 提取年月日\n      const postYear = postDate.getFullYear();\n      const postMonth = postDate.getMonth();\n      const postDay = postDate.getDate();\n\n      const nowYear = currentDate.getFullYear();\n      const nowMonth = currentDate.getMonth();\n      const nowDay = currentDate.getDate();\n\n      // 判断是否是今天的消息\n      if (postYear === nowYear && postMonth === nowMonth && postDay === nowDay) {\n        return timeString;\n      }\n\n      // 创建昨天的日期对象\n      const yesterday = new Date(currentDate);\n      yesterday.setDate(currentDate.getDate() - 1);\n      const yesterdayYear = yesterday.getFullYear();\n      const yesterdayMonth = yesterday.getMonth();\n      const yesterdayDay = yesterday.getDate();\n\n      // 判断是否是昨天的消息\n      if (postYear === yesterdayYear && postMonth === yesterdayMonth && postDay === yesterdayDay) {\n        return `昨天 ${timeString}`;\n      }\n\n      // 判断是否是今年的消息\n      if (postYear === nowYear) {\n        return `${postMonth + 1}月${postDay}日 ${timeString}`;\n      }\n\n      // 其他情况显示完整日期\n      return `${postYear}年${postMonth + 1}月${postDay}日 ${timeString}`;\n    } catch (error) {\n      console.error('Error formatting timestamp:', error);\n      return timeString; // 出错时至少返回时间\n    }\n  }\n\n  // 刷新所有时间戳显示\n  public refreshAllTimestamps(): void {\n    // 刷新所有时间戳\n    const timestampRows = $('.timestamp-row', this.wechatBody);\n    const eventLogRows = $('.event-log-row', this.wechatBody);\n\n    // 刷新时间戳行\n    timestampRows.each((_, row) => {\n      const $row = $(row);\n      const $timestampText = $row.find('.timestamp-text');\n      if ($timestampText.length) {\n        const originalDate = $row.data('originalDate');\n        const originalTime = $row.data('originalTime');\n        if (originalDate && originalTime) {\n          $timestampText.text(this.formatMomentTimestamp(originalDate, originalTime));\n        }\n      }\n    });\n\n    // 刷新事件日志行\n    eventLogRows.each((_, row) => {\n      const $row = $(row);\n      const $eventTimeText = $row.find('.event-time-text');\n      if ($eventTimeText.length) {\n        const originalDate = $row.data('originalDate');\n        const originalTime = $row.data('originalTime');\n        if (originalDate && originalTime) {\n          // 更新文本内容\n          $eventTimeText.text(this.formatMomentTimestamp(originalDate, originalTime));\n        }\n      }\n    });\n  }\n\n  renderFeatureGrid(\n    gridElement: HTMLElement,\n    features: any[],\n    callbacks: {\n      onToggleDeleteMode: () => void;\n      onAddStickers: () => void;\n    },\n  ): void {\n    if (!gridElement) {\n      console.error('[BLMX] Grid element not found for renderFeatureGrid');\n      return;\n    }\n\n    gridElement.innerHTML = '';\n    const isDeleteMode = gridElement.classList.contains('sticker-delete-mode');\n\n    features.forEach(feature => {\n      const item = document.createElement('div');\n      item.className = 'feature-item';\n\n      let iconHtml = '';\n      if (feature.isAddBtn) {\n        // 如果是表情管理按钮，使用齿轮图标\n        if (feature.label === '表情管理') {\n          iconHtml = `<div class=\"feature-icon\"><i class=\"fas fa-cog\"></i></div>`;\n        } else {\n          iconHtml = `<div class=\"feature-icon\"><i class=\"fas fa-${\n            feature.label === '添加' ? 'plus' : 'trash-alt'\n          }\"></i></div>`;\n        }\n      } else if (feature.icon && feature.icon.startsWith('http')) {\n        // 处理图片URL (表情包)\n        iconHtml = `<div class=\"feature-icon\"><img src=\"${feature.icon}\" alt=\"${feature.label}\" class=\"feature-icon-img\"></div>`;\n      } else if (\n        feature.icon &&\n        (feature.icon.startsWith('fas ') || feature.icon.startsWith('far ') || feature.icon.startsWith('fab '))\n      ) {\n        // 处理带空格的Font Awesome图标\n        iconHtml = `<div class=\"feature-icon\"><i class=\"${feature.icon} theme-icon\"></i></div>`;\n      } else if (feature.icon && feature.icon.startsWith('fa')) {\n        // 处理不带空格的Font Awesome图标\n        iconHtml = `<div class=\"feature-icon\"><i class=\"${feature.icon} theme-icon\"></i></div>`;\n      } else {\n        // 处理其他图标类型\n        iconHtml = `<div class=\"feature-icon\"><i class=\"${feature.icon || 'fas fa-question'}\"></i></div>`;\n      }\n\n      item.innerHTML = `${iconHtml}<span class=\"feature-label\">${feature.label}</span>`;\n\n      const iconContainer = item.querySelector('.feature-icon');\n      if (isDeleteMode && !feature.isAddBtn && !feature.isDefault) {\n        // 创建隐藏的原生checkbox\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.className = 'sticker-checkbox';\n        checkbox.dataset.stickerLabel = feature.label;\n        item.appendChild(checkbox);\n\n        // 创建可见的checkbox按钮\n        const checkboxButton = document.createElement('div');\n        checkboxButton.className = 'sticker-checkbox-button';\n        checkboxButton.style.display = 'block';\n        item.appendChild(checkboxButton);\n\n        // 更新checkbox按钮状态\n        const updateCheckboxState = (checked: boolean) => {\n          if (checked) {\n            checkboxButton.classList.add('checked');\n          } else {\n            checkboxButton.classList.remove('checked');\n          }\n          iconContainer?.classList.toggle('selected-for-delete', checked);\n        };\n\n        // 点击事件\n        const handleClick = (e: Event) => {\n          e.preventDefault();\n          e.stopPropagation();\n          checkbox.checked = !checkbox.checked;\n          updateCheckboxState(checkbox.checked);\n        };\n\n        item.addEventListener('click', handleClick);\n        checkboxButton.addEventListener('click', handleClick);\n\n        // 设置初始状态\n        updateCheckboxState(checkbox.checked);\n      } else if (feature.label === '添加') {\n        item.addEventListener('click', callbacks.onAddStickers);\n      } else if (feature.label === '删除' || feature.label === '表情管理') {\n        item.addEventListener('click', callbacks.onToggleDeleteMode);\n      } else {\n        item.addEventListener('click', feature.action);\n      }\n\n      gridElement.appendChild(item);\n    });\n  }\n\n  // 滚动到底部\n  private scrollToBottom(): void {\n    // 直接设置scrollTop，避免jQuery动画可能导致的滚动锁定问题\n    this.wechatBody.scrollTop = this.wechatBody.scrollHeight;\n\n    // 添加一个延迟执行的备份滚动，确保在DOM完全渲染后滚动生效\n    setTimeout(() => {\n      this.wechatBody.scrollTop = this.wechatBody.scrollHeight;\n    }, 100);\n  }\n\n  // 为USER消息设置长按撤回功能 - 完全照抄原版逻辑\n  private setupUserMessageLongPress(messageRow: HTMLElement, entry: ChatEntry): void {\n    const $messageRow = $(messageRow);\n    const $messageBubble = $messageRow.find('.message-bubble');\n    const $targetElement = $messageBubble.length ? $messageBubble : $messageRow;\n\n    // 原版长按监听器实现\n    this.addLongPressListener($targetElement[0], () => {\n      this.handleLongPressRecall(entry);\n    });\n\n    // 添加双击撤回功能作为备用方案（特别是在全屏模式下长按可能失效时）\n    this.setupDoubleClickRecall($targetElement, entry);\n  }\n\n  // 原版长按监听器实现 - 完全照抄原版逻辑\n  private addLongPressListener(\n    element: HTMLElement,\n    callback: () => void,\n    options = { duration: 600, preventDefault: true },\n  ): void {\n    let timer: number;\n    let startX: number, startY: number;\n\n    const onStart = (e: PointerEvent) => {\n      if (e.pointerType === 'mouse' && e.button !== 0) return;\n      startX = e.clientX;\n      startY = e.clientY;\n      if (options.preventDefault) e.preventDefault();\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        timer = 0;\n        callback();\n      }, options.duration);\n    };\n\n    const onMove = (e: PointerEvent) => {\n      if (!timer) return;\n      const moveX = e.clientX;\n      const moveY = e.clientY;\n      if (Math.abs(moveX - startX) > 10 || Math.abs(moveY - startY) > 10) {\n        clearTimeout(timer);\n      }\n    };\n\n    const onEnd = () => clearTimeout(timer);\n\n    element.addEventListener('pointerdown', onStart);\n    element.addEventListener('pointermove', onMove);\n    element.addEventListener('pointerup', onEnd);\n    element.addEventListener('pointerleave', onEnd);\n\n    if (options.preventDefault) {\n      element.addEventListener('contextmenu', e => e.preventDefault());\n    }\n  }\n\n  // 处理长按撤回 - 先检查消息是否可以撤回\n  private async handleLongPressRecall(entry: ChatEntry): Promise<void> {\n    try {\n      // 检查消息是否可以撤回\n      if (this.options.isMessageInQueue && this.options.isMessageInQueue(entry.id)) {\n        await this.handleUserMessageRecall(entry);\n      } else {\n        // 使用jQuery UI的效果显示无法撤回\n        const $messageElement = $(`[data-message-id=\"${entry.id}\"]`);\n        $messageElement.effect('shake', { times: 2, distance: 5 }, 300);\n\n        const { DialogManager } = await import('./dialog-manager');\n        const dialogManager = DialogManager.getInstance();\n        await dialogManager.alert('消息已合并发送，无法撤回。', '无法撤回');\n      }\n    } catch (error) {\n      console.error('长按撤回失败:', error);\n\n      // 显示错误反馈\n      const $messageElement = $(`[data-message-id=\"${entry.id}\"]`);\n      $messageElement.effect('shake', { times: 2, distance: 5 }, 300);\n    }\n  }\n\n  // 处理USER消息撤回\n  private async handleUserMessageRecall(entry: ChatEntry): Promise<void> {\n    try {\n      // 导入DialogManager\n      const { DialogManager } = await import('./dialog-manager');\n      const dialogManager = DialogManager.getInstance();\n\n      // 确认撤回操作\n      const confirmed = await dialogManager.confirm(\n        '确定要撤回这条文字消息吗？撤回后对方将看到\"你撤回了一条消息\"。',\n        '撤回文字消息',\n        '撤回',\n        '取消',\n      );\n\n      if (confirmed) {\n        // 调用撤回功能\n        if (this.options.onRecallMessage) {\n          await this.options.onRecallMessage(entry);\n        }\n      }\n    } catch (error) {\n      console.error('撤回消息时出错:', error);\n    }\n  }\n\n  // 设置双击撤回功能 - 作为长按撤回的备用方案\n  private setupDoubleClickRecall($targetElement: JQuery, entry: ChatEntry): void {\n    let clickCount = 0;\n    let clickTimer: number;\n    const doubleClickDelay = 300; // 300ms内的两次点击视为双击\n\n    $targetElement.on('click.doubleClickRecall', e => {\n      // 阻止事件冒泡，避免干扰其他点击事件\n      e.stopPropagation();\n\n      clickCount++;\n\n      if (clickCount === 1) {\n        // 第一次点击，启动定时器\n        clickTimer = window.setTimeout(() => {\n          // 超时后重置点击计数\n          clickCount = 0;\n        }, doubleClickDelay);\n      } else if (clickCount === 2) {\n        // 双击检测到，清除定时器并执行撤回\n        clearTimeout(clickTimer);\n        clickCount = 0;\n\n        // 添加视觉反馈\n        $targetElement.addClass('double-click-active');\n        setTimeout(() => {\n          $targetElement.removeClass('double-click-active');\n        }, 200);\n\n        // 添加触觉反馈（移动端）\n        if ('vibrate' in navigator) {\n          navigator.vibrate([30, 50, 30]); // 双击振动模式\n        }\n\n        // 执行撤回操作\n        this.handleDoubleClickRecall(entry);\n      }\n    });\n  }\n\n  // 处理双击撤回\n  private async handleDoubleClickRecall(entry: ChatEntry): Promise<void> {\n    try {\n      // 检查消息是否可以撤回\n      if (this.options.isMessageInQueue && this.options.isMessageInQueue(entry.id)) {\n        await this.handleUserMessageRecall(entry);\n      } else {\n        // 使用jQuery UI的效果显示无法撤回\n        const $messageElement = $(`[data-message-id=\"${entry.id}\"]`);\n        $messageElement.effect('shake', { times: 2, distance: 5 }, 300);\n\n        const { DialogManager } = await import('./dialog-manager');\n        const dialogManager = DialogManager.getInstance();\n        await dialogManager.alert('消息已合并发送，无法撤回。', '无法撤回');\n      }\n    } catch (error) {\n      console.error('双击撤回失败:', error);\n\n      // 显示错误反馈\n      const $messageElement = $(`[data-message-id=\"${entry.id}\"]`);\n      $messageElement.effect('shake', { times: 2, distance: 5 }, 300);\n    }\n  }\n\n  /**\n   * 清理资源，防止内存泄漏\n   */\n  cleanup(): void {\n    this.eventManager.cleanup();\n  }\n}\n","// 壁纸选择器模块\n// 负责壁纸选择器UI的创建和管理\n\nimport { Wallpaper, WallpaperManager } from './theme-manager';\n\nexport class WallpaperSelector {\n  private wallpaperManager: WallpaperManager;\n  private themeManager: any; // 主题管理器引用\n\n  constructor(wallpaperManager: WallpaperManager, themeManager: any) {\n    this.wallpaperManager = wallpaperManager;\n    this.themeManager = themeManager;\n  }\n\n  // 显示壁纸选择器\n  showWallpaperSelector(viewType: 'chat' | 'home' | 'settings', onApplyWallpaper: () => void): void {\n    // 创建模态框\n    const modal = document.createElement('div');\n    modal.className = 'wallpaper-modal';\n    modal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.7);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n    `;\n\n    // 创建内容容器\n    const container = document.createElement('div');\n    container.className = 'wallpaper-container';\n    container.style.cssText = `\n      background-color: white;\n      border-radius: 12px;\n      width: 90%;\n      max-width: 500px;\n      max-height: 80vh;\n      overflow-y: auto;\n      padding: 20px;\n      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n    `;\n\n    // 标题\n    const title = document.createElement('h2');\n    title.textContent = `选择${viewType === 'chat' ? '聊天' : viewType === 'home' ? '主屏幕' : '设置'}壁纸`;\n    title.style.cssText = `\n      margin-top: 0;\n      color: var(--text-primary);\n      font-size: 1.2rem;\n      text-align: center;\n      margin-bottom: 20px;\n    `;\n    container.appendChild(title);\n\n    // 创建选项卡\n    const tabs = this.createTabs(container);\n    container.appendChild(tabs);\n\n    // 创建各个选项卡内容\n    this.createBuiltinWallpaperTab(container, viewType, modal, onApplyWallpaper);\n    this.createSolidColorTab(container, viewType, modal, onApplyWallpaper);\n    this.createCustomWallpaperTab(container, viewType, modal, onApplyWallpaper);\n    this.createUploadTab(container, viewType, modal, onApplyWallpaper);\n\n    // 创建底部按钮\n    this.createBottomButtons(container, viewType, modal, onApplyWallpaper);\n\n    modal.appendChild(container);\n    document.body.appendChild(modal);\n  }\n\n  // 创建选项卡\n  private createTabs(container: HTMLElement): HTMLElement {\n    const tabs = document.createElement('div');\n    tabs.style.cssText = `\n      display: flex;\n      border-bottom: 1px solid ${document.body.classList.contains('dark-mode') ? '#3c3c3c' : '#eee'};\n      margin-bottom: 15px;\n    `;\n\n    const createTab = (label: string, id: string, isActive: boolean = false) => {\n      const tab = document.createElement('div');\n      tab.textContent = label;\n      tab.dataset.tabId = id;\n      tab.style.cssText = `\n        padding: 10px 15px;\n        cursor: pointer;\n        font-weight: ${isActive ? 'bold' : 'normal'};\n        color: ${isActive ? 'var(--primary-blue)' : 'var(--text-secondary)'};\n        border-bottom: ${isActive ? '2px solid var(--primary-blue)' : 'none'};\n        margin-bottom: -1px;\n      `;\n      tab.addEventListener('click', () => {\n        // 移除所有活动状态\n        tabs.querySelectorAll('div').forEach(t => {\n          t.style.fontWeight = 'normal';\n          t.style.color = 'var(--text-secondary)';\n          t.style.borderBottom = 'none';\n        });\n\n        // 设置当前标签为活动状态\n        tab.style.fontWeight = 'bold';\n        tab.style.color = 'var(--primary-blue)';\n        tab.style.borderBottom = '2px solid var(--primary-blue)';\n\n        // 隐藏所有内容\n        container.querySelectorAll('.tab-content').forEach(c => {\n          (c as HTMLElement).style.display = 'none';\n        });\n\n        // 显示选定的内容\n        const content = container.querySelector(`.tab-content[data-tab-id=\"${id}\"]`);\n        if (content) {\n          (content as HTMLElement).style.display = 'block';\n        }\n      });\n      return tab;\n    };\n\n    tabs.appendChild(createTab('内置壁纸', 'builtin', true));\n    tabs.appendChild(createTab('纯色壁纸', 'solid'));\n    tabs.appendChild(createTab('自定义壁纸', 'custom'));\n    tabs.appendChild(createTab('上传壁纸', 'upload'));\n\n    return tabs;\n  }\n\n  // 创建内置壁纸选项卡\n  private createBuiltinWallpaperTab(\n    container: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const builtinContent = document.createElement('div');\n    builtinContent.className = 'tab-content';\n    builtinContent.dataset.tabId = 'builtin';\n    builtinContent.style.cssText = 'display: block;';\n\n    // 获取内置壁纸\n    const builtinWallpapers = this.wallpaperManager.getBuiltInWallpapers().filter(w => w.type === 'image');\n\n    // 创建壁纸网格\n    const builtinGrid = document.createElement('div');\n    builtinGrid.style.cssText = `\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 10px;\n    `;\n\n    builtinWallpapers.forEach(wallpaper => {\n      const wallpaperItem = this.createWallpaperItem(wallpaper, viewType, false, modal, onApplyWallpaper);\n      builtinGrid.appendChild(wallpaperItem);\n    });\n\n    builtinContent.appendChild(builtinGrid);\n    container.appendChild(builtinContent);\n  }\n\n  // 创建纯色壁纸选项卡\n  private createSolidColorTab(\n    container: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const solidContent = document.createElement('div');\n    solidContent.className = 'tab-content';\n    solidContent.dataset.tabId = 'solid';\n    solidContent.style.cssText = 'display: none;';\n\n    // 获取纯色壁纸\n    const solidWallpapers = this.wallpaperManager.getBuiltInWallpapers().filter(w => w.type === 'color');\n\n    // 创建壁纸网格\n    const solidGrid = document.createElement('div');\n    solidGrid.style.cssText = `\n      display: grid;\n      grid-template-columns: repeat(4, 1fr);\n      gap: 10px;\n    `;\n\n    solidWallpapers.forEach(wallpaper => {\n      const wallpaperItem = this.createWallpaperItem(wallpaper, viewType, false, modal, onApplyWallpaper);\n      solidGrid.appendChild(wallpaperItem);\n    });\n\n    solidContent.appendChild(solidGrid);\n\n    // 添加颜色选择器\n    this.addColorPicker(solidContent, viewType, modal, onApplyWallpaper);\n\n    container.appendChild(solidContent);\n  }\n\n  // 创建自定义壁纸选项卡\n  private createCustomWallpaperTab(\n    container: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const customContent = document.createElement('div');\n    customContent.className = 'tab-content';\n    customContent.dataset.tabId = 'custom';\n    customContent.style.cssText = 'display: none;';\n\n    // 获取自定义壁纸\n    const customWallpapers = this.wallpaperManager.getCustomWallpapers();\n\n    if (customWallpapers.length === 0) {\n      const noCustomWallpapers = document.createElement('p');\n      noCustomWallpapers.textContent = '没有自定义壁纸。请在\"上传壁纸\"选项卡中添加。';\n      noCustomWallpapers.style.cssText = `\n        text-align: center;\n        color: var(--text-secondary);\n        margin: 30px 0;\n      `;\n      customContent.appendChild(noCustomWallpapers);\n    } else {\n      // 创建壁纸网格\n      const customGrid = document.createElement('div');\n      customGrid.style.cssText = `\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 10px;\n      `;\n\n      customWallpapers.forEach(wallpaper => {\n        const wallpaperItem = this.createWallpaperItem(wallpaper, viewType, true, modal, onApplyWallpaper);\n        customGrid.appendChild(wallpaperItem);\n      });\n\n      customContent.appendChild(customGrid);\n    }\n\n    container.appendChild(customContent);\n  }\n\n  // 创建上传选项卡\n  private createUploadTab(\n    container: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const uploadContent = document.createElement('div');\n    uploadContent.className = 'tab-content';\n    uploadContent.dataset.tabId = 'upload';\n    uploadContent.style.cssText = 'display: none; padding: 10px 0;';\n\n    // 从本地上传部分\n    this.createLocalUploadSection(uploadContent, viewType, modal, onApplyWallpaper);\n\n    // 从URL添加部分\n    this.createUrlUploadSection(uploadContent, viewType, modal, onApplyWallpaper);\n\n    container.appendChild(uploadContent);\n  }\n\n  // 添加颜色选择器\n  private addColorPicker(\n    solidContent: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const colorPickerContainer = document.createElement('div');\n    colorPickerContainer.style.cssText = `\n      margin-top: 20px;\n      padding-top: 15px;\n      border-top: 1px solid ${document.body.classList.contains('dark-mode') ? '#3c3c3c' : '#eee'};\n    `;\n\n    const colorPickerLabel = document.createElement('p');\n    colorPickerLabel.textContent = '自定义颜色:';\n    colorPickerLabel.style.cssText = `\n      margin: 0 0 10px 0;\n      font-size: 0.9rem;\n      color: var(--text-primary);\n    `;\n\n    const colorPicker = document.createElement('input');\n    colorPicker.type = 'color';\n    colorPicker.value = '#ffffff';\n    colorPicker.style.cssText = `\n      width: 100%;\n      height: 40px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n    `;\n\n    const colorNameInput = document.createElement('input');\n    colorNameInput.type = 'text';\n    colorNameInput.placeholder = '颜色名称 (可选)';\n    colorNameInput.style.cssText = `\n      width: 100%;\n      padding: 8px;\n      margin-top: 10px;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-sizing: border-box;\n    `;\n\n    const addColorBtn = document.createElement('button');\n    addColorBtn.textContent = '添加此颜色';\n    addColorBtn.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      margin-top: 10px;\n      background: var(--primary-blue);\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n\n    addColorBtn.addEventListener('click', () => {\n      const color = colorPicker.value;\n      const name = colorNameInput.value.trim() || `颜色 ${color}`;\n\n      const newWallpaper = this.wallpaperManager.createSolidColorWallpaper(color, name);\n\n      if (newWallpaper) {\n        // 应用新壁纸\n        this.wallpaperManager.setWallpaper(viewType, newWallpaper);\n        onApplyWallpaper();\n\n        // 关闭模态框\n        document.body.removeChild(modal);\n      } else {\n        // 显示错误消息\n        alert('创建纯色壁纸失败，请确保颜色格式正确。');\n      }\n    });\n\n    colorPickerContainer.appendChild(colorPickerLabel);\n    colorPickerContainer.appendChild(colorPicker);\n    colorPickerContainer.appendChild(colorNameInput);\n    colorPickerContainer.appendChild(addColorBtn);\n\n    solidContent.appendChild(colorPickerContainer);\n  }\n\n  // 创建本地上传部分\n  private createLocalUploadSection(\n    uploadContent: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const localUploadSection = document.createElement('div');\n    localUploadSection.style.cssText = 'margin-bottom: 20px;';\n\n    const localUploadTitle = document.createElement('h3');\n    localUploadTitle.textContent = '从本地上传';\n    localUploadTitle.style.cssText = `\n      font-size: 1rem;\n      color: var(--text-primary);\n      margin: 0 0 10px 0;\n    `;\n\n    const fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = 'image/*';\n    fileInput.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      margin-bottom: 10px;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-sizing: border-box;\n    `;\n\n    const uploadBtn = document.createElement('button');\n    uploadBtn.textContent = '上传并应用';\n    uploadBtn.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      background: var(--primary-blue);\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n\n    uploadBtn.addEventListener('click', async () => {\n      if (fileInput.files && fileInput.files[0]) {\n        const file = fileInput.files[0];\n        const newWallpaper = await this.wallpaperManager.createWallpaperFromFile(file);\n\n        if (newWallpaper) {\n          // 应用新壁纸\n          this.wallpaperManager.setWallpaper(viewType, newWallpaper);\n          onApplyWallpaper();\n\n          // 关闭模态框\n          document.body.removeChild(modal);\n        }\n      }\n    });\n\n    localUploadSection.appendChild(localUploadTitle);\n    localUploadSection.appendChild(fileInput);\n    localUploadSection.appendChild(uploadBtn);\n    uploadContent.appendChild(localUploadSection);\n  }\n\n  // 创建URL上传部分\n  private createUrlUploadSection(\n    uploadContent: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const urlUploadSection = document.createElement('div');\n    urlUploadSection.style.cssText = `\n      margin-top: 30px;\n      padding-top: 20px;\n      border-top: 1px solid ${document.body.classList.contains('dark-mode') ? '#3c3c3c' : '#eee'};\n    `;\n\n    const urlUploadTitle = document.createElement('h3');\n    urlUploadTitle.textContent = '从URL添加';\n    urlUploadTitle.style.cssText = `\n      font-size: 1rem;\n      color: var(--text-primary);\n      margin: 0 0 10px 0;\n    `;\n\n    const urlInput = document.createElement('input');\n    urlInput.type = 'text';\n    urlInput.placeholder = '输入图片URL';\n    urlInput.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      margin-bottom: 10px;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-sizing: border-box;\n    `;\n\n    const nameInput = document.createElement('input');\n    nameInput.type = 'text';\n    nameInput.placeholder = '壁纸名称 (可选)';\n    nameInput.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      margin-bottom: 10px;\n      border: 1px solid #ddd;\n      border-radius: 5px;\n      box-sizing: border-box;\n    `;\n\n    const addUrlBtn = document.createElement('button');\n    addUrlBtn.textContent = '添加并应用';\n    addUrlBtn.style.cssText = `\n      width: 100%;\n      padding: 10px;\n      background: var(--primary-blue);\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n\n    addUrlBtn.addEventListener('click', async () => {\n      const url = urlInput.value.trim();\n      const name = nameInput.value.trim() || 'URL壁纸';\n\n      if (url) {\n        const newWallpaper = await this.wallpaperManager.createWallpaperFromUrl(url, name);\n\n        if (newWallpaper) {\n          // 应用新壁纸\n          this.wallpaperManager.setWallpaper(viewType, newWallpaper);\n          onApplyWallpaper();\n\n          // 关闭模态框\n          document.body.removeChild(modal);\n        } else {\n          alert('无效的URL。请输入有效的图片URL。');\n        }\n      }\n    });\n\n    urlUploadSection.appendChild(urlUploadTitle);\n    urlUploadSection.appendChild(urlInput);\n    urlUploadSection.appendChild(nameInput);\n    urlUploadSection.appendChild(addUrlBtn);\n    uploadContent.appendChild(urlUploadSection);\n  }\n\n  // 创建壁纸项\n  private createWallpaperItem(\n    wallpaper: Wallpaper,\n    viewType: 'chat' | 'home' | 'settings',\n    showDeleteButton: boolean,\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): HTMLElement {\n    const item = document.createElement('div');\n    item.style.cssText = `\n      border-radius: 8px;\n      overflow: hidden;\n      position: relative;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n      transition: transform 0.2s ease, box-shadow 0.2s ease;\n    `;\n\n    // 预览\n    const preview = document.createElement('div');\n    preview.style.cssText = `\n      width: 100%;\n      height: 100px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n\n    if (wallpaper.type === 'color') {\n      // 确保纯色壁纸预览正确\n      preview.style.backgroundImage = 'none';\n      preview.style.backgroundColor = wallpaper.value;\n    } else {\n      preview.style.backgroundImage = `url(\"${wallpaper.value}\")`;\n      preview.style.backgroundSize = 'cover';\n      preview.style.backgroundPosition = 'center';\n    }\n\n    // 名称\n    const name = document.createElement('div');\n    name.textContent = wallpaper.name;\n    name.style.cssText = `\n      padding: 8px;\n      text-align: center;\n      font-size: 0.8rem;\n      color: var(--text-primary);\n      background-color: ${\n        document.body.classList.contains('dark-mode') ? 'rgba(42, 42, 42, 0.9)' : 'rgba(255, 255, 255, 0.9)'\n      };\n    `;\n\n    // 删除按钮\n    if (showDeleteButton) {\n      const deleteBtn = document.createElement('button');\n      deleteBtn.innerHTML = '&times;';\n      deleteBtn.style.cssText = `\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        width: 20px;\n        height: 20px;\n        border-radius: 50%;\n        background-color: rgba(255, 0, 0, 0.7);\n        color: white;\n        border: none;\n        font-size: 14px;\n        line-height: 1;\n        cursor: pointer;\n        z-index: 1;\n      `;\n\n      deleteBtn.addEventListener('click', e => {\n        e.stopPropagation();\n\n        if (confirm('确定要删除这个壁纸吗？')) {\n          this.wallpaperManager.deleteCustomWallpaper(wallpaper.id);\n\n          // 如果当前正在使用这个壁纸，则重置为默认\n          const currentWallpaper = this.wallpaperManager.getCurrentWallpaper(viewType);\n          if (currentWallpaper && currentWallpaper.id === wallpaper.id) {\n            this.wallpaperManager.setWallpaper(viewType, null);\n            onApplyWallpaper();\n          }\n\n          // 移除元素\n          item.parentElement?.removeChild(item);\n        }\n      });\n\n      item.appendChild(deleteBtn);\n    }\n\n    // 点击应用壁纸\n    item.addEventListener('click', () => {\n      // 确保壁纸管理器使用当前主题名称\n      const currentTheme = this.themeManager.getCurrentTheme();\n      this.wallpaperManager.setCurrentThemeName(currentTheme.name);\n\n      this.wallpaperManager.setWallpaper(viewType, wallpaper);\n      onApplyWallpaper();\n\n      // 关闭模态框\n      document.body.removeChild(modal);\n    });\n\n    item.appendChild(preview);\n    item.appendChild(name);\n\n    return item;\n  }\n\n  // 创建底部按钮\n  private createBottomButtons(\n    container: HTMLElement,\n    viewType: 'chat' | 'home' | 'settings',\n    modal: HTMLElement,\n    onApplyWallpaper: () => void,\n  ): void {\n    const buttonsContainer = document.createElement('div');\n    buttonsContainer.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      margin-top: 20px;\n      padding-top: 15px;\n      border-top: 1px solid ${document.body.classList.contains('dark-mode') ? '#3c3c3c' : '#eee'};\n    `;\n\n    const resetBtn = document.createElement('button');\n    resetBtn.textContent = '恢复默认';\n    resetBtn.style.cssText = `\n      padding: 10px 15px;\n      background: ${document.body.classList.contains('dark-mode') ? '#3c3c3c' : '#f1f5f9'};\n      color: var(--text-primary);\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n\n    resetBtn.addEventListener('click', () => {\n      // 移除自定义壁纸设置，将使用主题默认壁纸\n      this.wallpaperManager.setWallpaper(viewType, null);\n      onApplyWallpaper();\n\n      // 关闭模态框\n      document.body.removeChild(modal);\n    });\n\n    const closeBtn = document.createElement('button');\n    closeBtn.textContent = '关闭';\n    closeBtn.style.cssText = `\n      padding: 10px 20px;\n      background: var(--primary-blue);\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n\n    closeBtn.addEventListener('click', () => {\n      document.body.removeChild(modal);\n    });\n\n    buttonsContainer.appendChild(resetBtn);\n    buttonsContainer.appendChild(closeBtn);\n    container.appendChild(buttonsContainer);\n  }\n}\n","// 壁纸控制器模块\n// 负责壁纸的应用和管理\n\nimport { Theme, ThemeManager, WallpaperManager } from './theme-manager';\nimport { WallpaperSelector } from './wallpaper-selector';\n\nexport class WallpaperController {\n  private wallpaperManager: WallpaperManager;\n  private themeManager: ThemeManager;\n  private wallpaperSelector: WallpaperSelector;\n\n  constructor(themeManager: ThemeManager) {\n    this.themeManager = themeManager;\n    this.wallpaperManager = themeManager.getWallpaperManager();\n    this.wallpaperSelector = new WallpaperSelector(this.wallpaperManager, this.themeManager);\n  }\n\n  // 应用壁纸到所有视图\n  applyWallpapers(): void {\n    const $chatView = $('#wechat-view');\n    const $homeScreen = $('#app-homescreen');\n    const $settingsView = $('#settings-view');\n    const currentTheme = this.themeManager.getCurrentTheme();\n\n    // 确保壁纸管理器使用当前主题名称\n    this.wallpaperManager.setCurrentThemeName(currentTheme.name);\n\n    // 应用聊天壁纸\n    const chatWallpaper = this.wallpaperManager.getCurrentWallpaper('chat');\n    this.wallpaperManager.applyWallpaperToElement(\n      $chatView[0],\n      chatWallpaper,\n      currentTheme.colors.defaultWallpapers.chat,\n    );\n\n    // 应用主屏幕壁纸\n    const homeWallpaper = this.wallpaperManager.getCurrentWallpaper('home');\n    this.wallpaperManager.applyWallpaperToElement(\n      $homeScreen[0],\n      homeWallpaper,\n      currentTheme.colors.defaultWallpapers.home,\n    );\n\n    // 应用设置壁纸\n    const settingsWallpaper = this.wallpaperManager.getCurrentWallpaper('settings');\n    this.wallpaperManager.applyWallpaperToElement(\n      $settingsView[0],\n      settingsWallpaper,\n      currentTheme.colors.defaultWallpapers.settings,\n    );\n  }\n\n  // 更改壁纸\n  changeWallpaper(viewType: 'chat' | 'home' | 'settings'): void {\n    // 显示壁纸选择器\n    this.wallpaperSelector.showWallpaperSelector(viewType, () => {\n      this.applyWallpapers();\n    });\n  }\n\n  // 初始化壁纸（在主题切换时调用）\n  initializeWallpapers(theme: Theme): void {\n    // 确保应用当前主题的默认壁纸，但不覆盖用户已保存的壁纸设置\n    this.wallpaperManager.applyThemeDefaultWallpapers(theme);\n    this.applyWallpapers();\n  }\n\n  // 获取壁纸管理器（用于其他模块访问）\n  getWallpaperManager(): WallpaperManager {\n    return this.wallpaperManager;\n  }\n}\n","import { AiResponseManager } from './ai-response-manager';\nimport { ConfigManager } from './config-manager';\nimport { addTestEntry, clearDebugData, loadDebugData, showDebugInfo, showTestEntryTypes } from './debug-data'; // 导入调试数据\nimport { DialogManager } from './dialog-manager';\nimport { InputHandler } from './input-handler';\nimport { MomentsManager } from './moments-manager';\nimport { BLMX_Protocol, ChatEntry, getTavernHelper, LogEntry } from './script';\nimport { ThemeEditor } from './theme-editor';\nimport { ThemeManager } from './theme-manager';\nimport { IAppController, IEventHandler } from './types';\nimport { UIManager } from './ui-manager';\nimport { UIRenderer } from './ui-renderer';\nimport { WallpaperController } from './wallpaper-controller';\n\n/**\n * 应用主控制器\n *\n * 重构后的主控制器专注于：\n * 1. 模块初始化和协调\n * 2. 核心业务流程编排\n * 3. 模块间通信协调\n * 4. 对外接口统一管理\n *\n * 具体功能已拆分到各专门模块：\n * - ConfigManager: 配置管理\n * - UIManager: 界面管理\n * - MomentsManager: 朋友圈管理\n * - AiResponseManager: AI响应处理\n * - ThemeEditor: 主题编辑\n * - InputHandler: 输入处理\n * - WallpaperController: 壁纸管理\n */\nexport class AppController implements IAppController {\n  private blmxManager!: BLMX_Protocol;\n  private uiRenderer!: UIRenderer;\n  private eventHandler!: IEventHandler;\n  private themeManager!: ThemeManager;\n  private wallpaperController!: WallpaperController;\n  private configManager!: ConfigManager;\n  private momentsManager!: MomentsManager;\n  private aiResponseManager!: AiResponseManager;\n  private themeEditor!: ThemeEditor;\n  private inputHandler!: InputHandler;\n  private uiManager!: UIManager;\n  private dialogManager!: DialogManager;\n\n  // 用户消息队列，模拟原版机制\n  private userMessageQueue: ChatEntry[] = [];\n\n  // 朋友圈通知状态管理\n  hasMomentNotifications(): boolean {\n    return this.momentsManager.hasMomentNotifications();\n  }\n\n  setMomentNotification(value: boolean): void {\n    this.momentsManager.setMomentNotification(value);\n  }\n\n  constructor() {\n    // 初始化配置管理器\n    this.configManager = new ConfigManager();\n  }\n\n  // 初始化应用\n  async initialize(): Promise<void> {\n    try {\n      window.currentGameDate = new Date();\n\n      // 初始化主题管理器\n      this.themeManager = new ThemeManager();\n      this.wallpaperController = new WallpaperController(this.themeManager);\n\n      // 确保应用当前主题的默认壁纸，但不覆盖用户已保存的壁纸设置\n      const currentTheme = this.themeManager.getCurrentTheme();\n      this.wallpaperController.initializeWallpapers(currentTheme);\n\n      const charData = await getTavernHelper().getCharData();\n\n      // 使用配置管理器加载配置\n      await this.configManager.loadFromStorage(charData);\n\n      // 如果没有保存的角色头像，获取默认头像\n      let config = this.configManager.getConfig();\n      if (!config.avatars.char) {\n        const charAvatarPath = await getTavernHelper().getCharAvatarPath();\n        this.configManager.updateAvatar('char', charAvatarPath);\n        config = this.configManager.getConfig(); // 重新获取更新后的配置\n      }\n\n      // 更新UI元素 - 使用jQuery\n      $('.contact-name').text(this.getDisplayName('char'));\n      $('#moments-user-name').text(this.getDisplayName('user'));\n      $('#moments-user-avatar').attr('src', config.avatars.user);\n\n      // 加载朋友圈封面图片 - 使用jQuery\n      const savedCoverPhoto = this.configManager.getSavedCoverPhoto();\n      if (savedCoverPhoto) {\n        $('#moments-cover-photo').attr('src', savedCoverPhoto);\n      }\n\n      // 加载个性签名 - 使用jQuery\n      const savedSignature = this.configManager.getSavedSignature();\n      $('#user-signature-display').text(savedSignature);\n\n      // 初始化BLMX协议\n      this.blmxManager = new BLMX_Protocol(config.currentCharId);\n      await this.blmxManager.initialize();\n\n      // 加载调试数据（仅在开发模式下）\n      if ((window as any).BLMX_DEV_MODE) {\n        loadDebugData(this.blmxManager);\n      }\n\n      // 首先初始化EventHandler，因为其他模块可能依赖它\n      const EventHandler = (window as any).EventHandlerClass;\n      this.eventHandler = new EventHandler(\n        '#wechat-input-field',\n        '#send-btn',\n        '#plus-btn',\n        this.blmxManager,\n        this,\n        null, // uiRenderer 稍后设置\n        {\n          getDisplayName: this.getDisplayName.bind(this),\n          stageAndDisplayEntry: this.stageAndDisplayEntry.bind(this),\n          triggerAiResponse: this.triggerAiResponse.bind(this),\n          updateFooterButtonsState: this.updateFooterButtonsState.bind(this),\n          renderChatHistory: this.renderChatHistory.bind(this),\n          renderMomentsFeed: this.renderMomentsFeed.bind(this),\n          togglePanel: this.togglePanel.bind(this),\n          findStickerUrlByName: this.findStickerUrlByName.bind(this),\n        },\n      );\n\n      // 初始化UI渲染器\n      this.uiRenderer = new UIRenderer('.wechat-body', config.avatars, {\n        getDisplayName: this.getDisplayName.bind(this),\n        findStickerUrlByName: this.findStickerUrlByName.bind(this),\n        onTransferAccept: this.handleTransferAccept.bind(this),\n        onGiftAction: this.handleGiftAction.bind(this),\n        onRecallMessage: this.handleMessageRecall.bind(this),\n        isMessageInQueue: this.isMessageInQueue.bind(this),\n      });\n\n      // 更新EventHandler中的uiRenderer引用\n      this.eventHandler.setUIRenderer(this.uiRenderer);\n\n      // 初始化朋友圈管理器\n      this.momentsManager = new MomentsManager(this.blmxManager, this.configManager, this.uiRenderer);\n\n      // 初始化AI响应管理器\n      this.aiResponseManager = new AiResponseManager(\n        this.blmxManager,\n        this.uiRenderer,\n        this.eventHandler,\n        this.momentsManager,\n      );\n\n      // 初始化主题编辑器\n      this.themeEditor = new ThemeEditor(this.themeManager, () => {\n        this.applyWallpapers();\n      });\n\n      // 初始化输入处理器\n      this.inputHandler = new InputHandler(\n        this.configManager,\n        this.stageAndDisplayEntry.bind(this),\n        this.updateFooterButtonsState.bind(this),\n      );\n\n      // 初始化UI管理器\n      this.uiManager = new UIManager(\n        this.configManager,\n        this.blmxManager.addEntry.bind(this.blmxManager),\n        this.uiRenderer.renderEntry.bind(this.uiRenderer),\n      );\n\n      // 初始化对话框管理器\n      this.dialogManager = DialogManager.getInstance();\n\n      // 应用壁纸\n      this.applyWallpapers();\n\n      // 渲染初始界面\n      this.renderChatHistory();\n      this.renderMomentsFeed();\n\n      // 设置输入框提示文字\n      this.uiManager.setupInputPlaceholder(this.getDisplayName('char'));\n\n      // 更新底部按钮状态\n      this.updateFooterButtonsState();\n\n      // 初始化UI后设置主题选择器\n      this.setupThemeSelector();\n\n      // 确保自定义主题按钮显示正确的信息\n      this.themeEditor.updateCustomThemeButton();\n\n      // 初始化手机尺寸调整功能\n      this.uiManager.setupPhoneSizeAdjustment();\n\n      // 初始化表情包尺寸控制\n      this.uiManager.setupStickerSizeControl();\n\n      // 初始化字体设置功能\n      this.uiManager.setupFontSelection();\n\n      // 初始化全屏模式手机大小设置功能\n      this.uiManager.setupFullscreenSizeAdjustment();\n\n      // 显示当前版本\n      this.uiManager.displayAppVersion();\n\n      // 检查是否显示版本更新通知\n      this.uiManager.checkVersionUpdateNotification();\n\n      // 初始化朋友圈通知状态\n      // 通知状态由 MomentsManager 管理\n\n      // 事件监听器现在由 AiResponseManager 管理\n    } catch (error) {\n      // console.error('[BLMX] Failed to initialize:', error);\n    }\n  }\n\n  // 核心数据访问方法\n  getDisplayName(type: 'user' | 'char'): string {\n    return this.configManager.getDisplayName(type);\n  }\n\n  findStickerUrlByName(name: string): string | undefined {\n    return this.configManager.findStickerUrlByName(name);\n  }\n\n  // 壁纸管理\n  applyWallpapers(): void {\n    this.wallpaperController.applyWallpapers();\n  }\n\n  changeWallpaper(viewType: 'chat' | 'home' | 'settings'): void {\n    this.wallpaperController.changeWallpaper(viewType);\n  }\n\n  // 界面渲染协调\n  renderChatHistory(): void {\n    this.uiRenderer.clearChat();\n    if (!this.blmxManager) return;\n\n    // 先渲染主日志中的消息\n    this.blmxManager.logEntries.forEach((entry, index) => {\n      if (entry.recalled) {\n        this.uiRenderer.renderRecallNotice(entry, null, index);\n      } else {\n        this.uiRenderer.renderEntry(entry, index, false);\n      }\n    });\n\n    // 再渲染队列中的消息（模拟原版机制）\n    this.userMessageQueue.forEach((entry, queueIndex) => {\n      // 队列中的消息索引应该是主日志长度 + 队列索引\n      const actualIndex = this.blmxManager.logEntries.length + queueIndex;\n      if (entry.recalled) {\n        this.uiRenderer.renderRecallNotice(entry, null, actualIndex);\n      } else {\n        this.uiRenderer.renderEntry(entry, actualIndex, false);\n      }\n    });\n\n    this.uiRenderer.refreshAllTimestamps();\n    this.uiManager.scrollToBottom();\n  }\n\n  renderMomentsFeed(): void {\n    this.momentsManager.renderMomentsFeed();\n  }\n\n  // 暂存并显示条目\n  stageAndDisplayEntry(entry: LogEntry): void {\n    if ('type' in entry) {\n      if (entry.type === 'event') {\n        // 为event类型的条目添加到日志中并渲染\n        this.blmxManager.addEntry(entry);\n        const entryIndex = this.blmxManager.logEntries.length - 1;\n        this.uiRenderer.renderEntry(entry, entryIndex, true);\n\n        // 如果是用户发送的事件，则标记为需要AI响应\n        if ('sender' in entry && entry.sender === 'me') {\n          this.eventHandler.setHasPendingNotifications(true);\n        }\n\n        return;\n      } else if (entry.type === 'time') {\n        // 跳过time类型处理\n        return;\n      }\n\n      if (!entry.id) {\n        entry.id = 'msg-' + Date.now() + Math.random();\n      }\n\n      // 处理图片上传\n      if (\n        entry.type === 'image' &&\n        'content' in entry &&\n        entry.content.type === 'url' &&\n        typeof entry.content.value === 'string' &&\n        entry.content.value.startsWith('data:image')\n      ) {\n        // 使用类型断言\n        ((entry as ChatEntry).content as any).isNewForAI = true;\n      }\n\n      // 如果是用户消息，先添加到队列（模拟原版机制）\n      if ('sender' in entry && entry.sender === 'me') {\n        this.userMessageQueue.push(entry as ChatEntry);\n        this.eventHandler.setHasPendingNotifications(true);\n\n        // 渲染条目（使用全局索引：主日志长度 + 队列索引）\n        const queueIndex = this.userMessageQueue.length - 1;\n        const globalIndex = this.blmxManager.logEntries.length + queueIndex;\n        this.uiRenderer.renderEntry(entry as ChatEntry, globalIndex, true);\n      } else {\n        // 非用户消息直接添加到主日志\n        this.blmxManager.addEntry(entry as ChatEntry);\n        const entryIndex = this.blmxManager.logEntries.length - 1;\n        this.uiRenderer.renderEntry(entry as ChatEntry, entryIndex, true);\n      }\n      this.updateFooterButtonsState();\n    }\n  }\n\n  // AI响应协调\n  async triggerAiResponse(immediate: boolean = false): Promise<void> {\n    // 检查是否有待处理的消息（队列机制）\n    const hasQueuedMessages = this.userMessageQueue.length > 0;\n\n    // 如果没有立即触发标志，且没有队列消息和通知，则不触发\n    if (!immediate && !hasQueuedMessages && !this.eventHandler.hasNotifications) {\n      return;\n    }\n\n    // 在触发AI响应前，将队列中的消息移到主日志（模拟原版机制）\n    if (hasQueuedMessages) {\n      // 复制队列中的消息\n      const messagesToProcess = [...this.userMessageQueue];\n\n      // 将消息添加到主日志\n      messagesToProcess.forEach(entry => {\n        if (entry.type === 'image' && 'content' in entry && (entry.content as any).isNewForAI) {\n          (entry.content as any).value = `[用户发送的图片]`;\n          delete (entry.content as any).isNewForAI;\n        }\n        this.blmxManager.addEntry(entry);\n      });\n\n      // 清空队列（模拟原版的 userMessageQueue = []）\n      this.userMessageQueue = [];\n    }\n\n    await this.aiResponseManager.triggerAiResponse(immediate);\n  }\n\n  // UI控制协调\n  updateFooterButtonsState(): void {\n    this.uiManager.updateFooterButtonsState(this.eventHandler.hasNotifications);\n  }\n\n  togglePanel(panelToShow: string | null): void {\n    this.uiManager.togglePanel(panelToShow);\n  }\n\n  // 导航到指定视图\n  navigateTo(viewName: 'home' | 'wechat' | 'moments' | 'settings'): void {\n    const views = {\n      home: '#app-homescreen',\n      wechat: '#wechat-view',\n      moments: '#moments-view',\n      settings: '#settings-view',\n    };\n\n    try {\n      // 首先尝试使用jQuery\n      if (typeof $ !== 'undefined' && typeof jQuery !== 'undefined') {\n        // 使用jQuery隐藏所有视图并显示目标视图\n        $('.app-view').removeClass('active');\n        $(views[viewName]).addClass('active');\n      } else {\n        // 备用方案：使用jQuery（应该总是可用的）\n        $('.app-view').removeClass('active');\n        const $targetView = $(views[viewName]);\n        if ($targetView.length) {\n          $targetView.addClass('active');\n        } else {\n          console.error(`[BLMX] 找不到目标视图: ${views[viewName]}`);\n        }\n      }\n\n      // 当导航到朋友圈视图时，更新通知状态并重新渲染\n      if (viewName === 'moments') {\n        // 更新朋友圈通知状态\n        this.setMomentNotification(false);\n\n        // 重新渲染朋友圈内容\n        this.renderMomentsFeed();\n      }\n    } catch (error) {\n      console.error(`[BLMX] 导航错误:`, error);\n\n      // 最后的备用方案，使用jQuery\n      try {\n        $('.app-view').removeClass('active');\n        const $targetElement = $(views[viewName]);\n        if ($targetElement.length) {\n          $targetElement.addClass('active');\n        }\n      } catch (e) {\n        console.error(`[BLMX] 最终导航失败:`, e);\n      }\n    }\n  }\n\n  async updateAvatar(avatarType: 'user' | 'char'): Promise<void> {\n    const config = this.configManager.getConfig();\n    const currentUrl = config.avatars[avatarType] || '';\n    const displayName = this.getDisplayName(avatarType);\n\n    if (avatarType === 'user') {\n      // 用户头像：显示头像和个性签名设置对话框\n      await this.showUserProfileDialog(currentUrl);\n    } else {\n      // 角色头像：只设置头像\n      const newUrl = await this.dialogManager.showInputDialog(\n        '更换头像',\n        `${displayName}头像URL`,\n        currentUrl,\n        '请输入头像图片链接',\n        'url',\n      );\n\n      if (newUrl) {\n        this.configManager.updateAvatar(avatarType, newUrl);\n        await this.dialogManager.alert('头像已更新！', '更新成功');\n        this.renderChatHistory();\n        this.renderMomentsFeed();\n      }\n    }\n  }\n\n  // 显示用户资料设置对话框（头像+个性签名）\n  private async showUserProfileDialog(currentAvatarUrl: string): Promise<void> {\n    const currentSignature = this.configManager.getSavedSignature();\n\n    return new Promise(resolve => {\n      // 创建对话框HTML，使用与现有对话框完全一致的样式\n      const dialogHtml = `\n        <div class=\"custom-dialog-overlay\" id=\"user-profile-dialog-overlay\">\n          <div class=\"custom-dialog user-profile-dialog\">\n            <div class=\"dialog-header\">\n              <h3 class=\"dialog-title\">个人资料设置</h3>\n            </div>\n            <div class=\"dialog-body\">\n              <div class=\"dialog-input-container\">\n                <input type=\"url\" id=\"avatar-url-input\" value=\"${currentAvatarUrl}\" placeholder=\"请输入头像图片链接\">\n              </div>\n              <div class=\"dialog-input-container\">\n                <input type=\"text\" id=\"signature-input\" value=\"${currentSignature}\" placeholder=\"请输入个性签名\">\n              </div>\n            </div>\n            <div class=\"dialog-footer\">\n              <button class=\"dialog-button cancel-button\" id=\"user-profile-cancel\">取消</button>\n              <button class=\"dialog-button primary-button\" id=\"user-profile-confirm\">确定</button>\n            </div>\n          </div>\n        </div>\n      `;\n\n      // 添加到手机屏幕容器内，与其他对话框保持一致\n      const $phoneScreen = $('.phone-screen');\n      if ($phoneScreen.length) {\n        $phoneScreen.append(dialogHtml);\n      } else {\n        // 如果找不到手机屏幕容器，回退到body\n        $('body').append(dialogHtml);\n      }\n      const $overlay = $('#user-profile-dialog-overlay');\n\n      // 显示对话框\n      $overlay.show();\n\n      // 绑定事件\n      $('#user-profile-cancel').on('click', () => {\n        $overlay.remove();\n        resolve();\n      });\n\n      $('#user-profile-confirm').on('click', async () => {\n        const newAvatarUrl = ($('#avatar-url-input').val() as string).trim();\n        const newSignature = ($('#signature-input').val() as string).trim();\n\n        let hasChanges = false;\n\n        // 更新头像\n        if (newAvatarUrl && newAvatarUrl !== currentAvatarUrl) {\n          this.configManager.updateAvatar('user', newAvatarUrl);\n          $('#moments-user-avatar').attr('src', newAvatarUrl);\n          hasChanges = true;\n        }\n\n        // 更新个性签名\n        if (newSignature !== currentSignature) {\n          this.configManager.setSignature(newSignature);\n          $('#user-signature-display').text(newSignature);\n          hasChanges = true;\n\n          // 询问是否发送朋友圈通知\n          if (newSignature !== currentSignature) {\n            const shouldNotify = await this.dialogManager.confirm(\n              '是否要发送朋友圈动态通知AI你更改了个性签名？',\n              '朋友圈通知',\n            );\n            if (shouldNotify) {\n              this.momentsManager.notifyMomentChange('signature', currentSignature, newSignature);\n              this.eventHandler.setHasPendingNotifications(true);\n            }\n          }\n        }\n\n        $overlay.remove();\n\n        if (hasChanges) {\n          this.renderChatHistory();\n          this.renderMomentsFeed();\n          await this.dialogManager.alert('个人资料已更新！', '更新成功');\n        }\n\n        resolve();\n      });\n\n      // ESC键关闭\n      $(document).on('keydown.userProfile', e => {\n        if (e.key === 'Escape') {\n          $overlay.remove();\n          $(document).off('keydown.userProfile');\n          resolve();\n        }\n      });\n\n      // 点击遮罩关闭\n      $overlay.on('click', e => {\n        if (e.target === $overlay[0]) {\n          $overlay.remove();\n          resolve();\n        }\n      });\n\n      // 聚焦到头像输入框\n      setTimeout(() => {\n        $('#avatar-url-input').focus();\n      }, 100);\n    });\n  }\n\n  async updateCharRemark(): Promise<void> {\n    const oldDisplayName = this.getDisplayName('char');\n    const config = this.configManager.getConfig();\n    const newRemark = await this.dialogManager.prompt('请输入新的备注:', config.charRemark, '修改备注');\n    if (newRemark !== null) {\n      this.configManager.updateCharRemark(newRemark);\n      const newDisplayName = this.getDisplayName('char');\n\n      $('#contact-name-header').text(newDisplayName);\n      $('#wechat-input-field').attr(\n        'placeholder',\n        this.configManager.getSavedInputPlaceholder() || `与 ${newDisplayName} 对话...`,\n      );\n\n      $('#moments-feed-list .post-author-name').each(function () {\n        if ($(this).text() === oldDisplayName) $(this).text(newDisplayName);\n      });\n\n      $('.recall-notice-text').each(function () {\n        const text = $(this).text();\n        if (text && text.includes(`\"${oldDisplayName}\"`)) {\n          $(this).text(`\"${newDisplayName}\" 撤回了一条消息`);\n        }\n      });\n\n      await this.dialogManager.alert('备注已更新！', '更新成功');\n    }\n  }\n\n  async updateUserName(): Promise<void> {\n    const oldName = this.getDisplayName('user');\n    const newName = await this.dialogManager.showInputDialog('更改名字', '请输入你的新名字', oldName, '输入新名字...');\n\n    if (newName && newName.trim() !== '' && newName !== oldName) {\n      this.configManager.updateUserName(newName);\n      $('#moments-user-name').text(newName);\n\n      // 询问用户是否要发送朋友圈通知AI\n      const shouldNotify = await this.dialogManager.confirm('是否要发送朋友圈动态通知AI你更改了名字？', '朋友圈通知');\n      if (shouldNotify) {\n        this.momentsManager.notifyMomentChange('name', oldName, newName);\n        this.eventHandler.setHasPendingNotifications(true);\n      }\n\n      await this.dialogManager.alert('名字已更新！', '更新成功');\n    }\n  }\n\n  // updateSignature方法已移除，个性签名设置已整合到用户头像设置对话框中\n\n  async updateCoverPhoto(): Promise<void> {\n    const currentCover = this.configManager.getSavedCoverPhoto() || '';\n    const newCover = await this.dialogManager.showInputDialog(\n      '朋友圈封面',\n      '朋友圈封面URL',\n      currentCover,\n      '请输入封面图片链接',\n      'url',\n    );\n    if (newCover) {\n      this.configManager.setCoverPhoto(newCover);\n      $('#moments-cover-photo').attr('src', newCover);\n    }\n  }\n\n  // 输入处理协调\n  async handleTransferAccept(data: any): Promise<void> {\n    await this.inputHandler.handleTransferAccept(data);\n  }\n\n  async handleGiftAction(data: any): Promise<void> {\n    await this.inputHandler.handleGiftAction(data);\n    this.eventHandler.setHasPendingNotifications(true);\n  }\n\n  // 检查消息是否在队列中（模拟原版逻辑）\n  isMessageInQueue(messageId: string): boolean {\n    return this.userMessageQueue.some(entry => entry.id === messageId);\n  }\n\n  // 从用户消息队列中移除指定索引的消息\n  removeFromUserMessageQueue(index: number): void {\n    if (index >= 0 && index < this.userMessageQueue.length) {\n      this.userMessageQueue.splice(index, 1);\n    }\n  }\n\n  // 处理消息撤回（仅限文字消息）\n  async handleMessageRecall(entry: ChatEntry): Promise<void> {\n    try {\n      // 只允许撤回文字消息\n      if (entry.type !== 'message') {\n        // 只能撤回文字消息\n        return;\n      }\n\n      // 查找消息在队列中的索引\n      const queueIndex = this.userMessageQueue.findIndex(queueEntry => queueEntry.id === entry.id);\n\n      if (queueIndex === -1) {\n        // 未找到要撤回的消息\n        return;\n      }\n\n      const targetEntry = this.userMessageQueue[queueIndex];\n\n      // 保存原始内容到recalled_content\n      targetEntry.recalled_content = targetEntry.content;\n\n      // 设置撤回时间戳\n      targetEntry.recalled_timestamp = new Date().toISOString();\n\n      // 标记消息为已撤回\n      targetEntry.recalled = true;\n\n      // 重新渲染聊天历史\n      this.renderChatHistory();\n    } catch (error) {\n      console.error('撤回消息时出错:', error);\n    }\n  }\n\n  // AI响应数据访问\n  getLatestAiRawResponse(): string {\n    return this.aiResponseManager.getLatestAiRawResponse();\n  }\n\n  getLatestSentPrompt(): string {\n    return this.aiResponseManager.getLatestSentPrompt();\n  }\n\n  getRawAiResponse(): string {\n    return this.aiResponseManager.getRawAiResponse();\n  }\n\n  getFullPrompt(): string {\n    return this.aiResponseManager.getFullPrompt();\n  }\n\n  // 主题管理协调\n  setupThemeSelector(): void {\n    this.themeEditor.setupThemeSelector();\n    this.themeEditor.addCustomThemeEditButton();\n    this.setupThemeEditorEvents();\n  }\n\n  private setupThemeEditorEvents(): void {\n    // 使用jQuery进行事件绑定\n    $('#close-theme-editor').on('click', () => this.themeEditor.closeThemeEditor());\n    $('#save-theme-btn').on('click', () => this.themeEditor.saveCustomTheme());\n    $('#reset-theme-btn').on('click', () => this.themeEditor.resetThemeEditor());\n    $('#custom-theme-btn').on('click', () => this.themeEditor.openThemeEditor());\n    $('#import-theme-btn').on('click', () => this.themeEditor.importTheme());\n    $('#export-json-btn').on('click', () => this.themeEditor.exportThemeAsJSON());\n  }\n\n  openThemeEditor(): void {\n    this.themeEditor.openThemeEditor();\n  }\n\n  closeThemeEditor(): void {\n    this.themeEditor.closeThemeEditor();\n  }\n\n  // 辅助方法：HEX转RGBA\n  hexToRgba(hex: string, alpha: number): string {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n\n  // 调试功能协调\n  addTestEntry(entryType: string): void {\n    addTestEntry(this.blmxManager, entryType);\n  }\n\n  clearDebugData(): void {\n    clearDebugData(this.blmxManager);\n  }\n\n  showTestEntryTypes(): void {\n    showTestEntryTypes();\n  }\n\n  showDebugInfo(): void {\n    showDebugInfo(this);\n  }\n\n  // 处理消息撤回的朋友圈通知\n  notifyRecallViaMoments(sender: 'USER' | 'CHAR', targetText: string): void {\n    // 询问用户是否要发送朋友圈通知AI\n    if (confirm('是否要发送朋友圈动态通知AI你撤回了消息？')) {\n      this.momentsManager.notifyRecallViaMoments(sender, targetText);\n      this.eventHandler.setHasPendingNotifications(true);\n    }\n  }\n\n  /**\n   * 清理所有资源，防止内存泄漏\n   */\n  cleanup(): void {\n    // 清理各个管理器的资源\n    if (this.aiResponseManager && typeof this.aiResponseManager.cleanup === 'function') {\n      this.aiResponseManager.cleanup();\n    }\n\n    if (this.uiRenderer && typeof this.uiRenderer.cleanup === 'function') {\n      this.uiRenderer.cleanup();\n    }\n  }\n}\n","/**\n * 样式管理器\n * 负责导入和管理所有SCSS样式文件\n */\n\n// 导入主样式文件\nimport './styles/main.scss';\n\n/**\n * 样式管理器类\n * 提供样式相关的工具方法和管理功能\n */\nexport class StyleManager {\n  private static instance: StyleManager;\n  private loadedStyles: Set<string> = new Set();\n\n  private constructor() {\n    this.initializeStyles();\n  }\n\n  /**\n   * 获取样式管理器单例实例\n   */\n  public static getInstance(): StyleManager {\n    if (!StyleManager.instance) {\n      StyleManager.instance = new StyleManager();\n    }\n    return StyleManager.instance;\n  }\n\n  /**\n   * 初始化样式\n   */\n  private initializeStyles(): void {\n    console.log('[StyleManager] 正在加载样式文件...');\n\n    // 标记主样式已加载\n    this.loadedStyles.add('main');\n\n    // 添加样式加载完成的标记到body\n    document.body.classList.add('styles-loaded');\n\n    console.log('[StyleManager] 样式文件加载完成');\n  }\n\n  /**\n   * 检查样式是否已加载\n   */\n  public isStyleLoaded(styleName: string): boolean {\n    return this.loadedStyles.has(styleName);\n  }\n\n  /**\n   * 动态切换主题\n   */\n  public toggleTheme(theme: 'light' | 'dark'): void {\n    const body = document.body;\n\n    if (theme === 'dark') {\n      body.classList.add('dark-mode');\n    } else {\n      body.classList.remove('dark-mode');\n    }\n\n    console.log(`[StyleManager] 主题已切换到: ${theme}`);\n  }\n\n  /**\n   * 获取当前主题\n   */\n  public getCurrentTheme(): 'light' | 'dark' {\n    return document.body.classList.contains('dark-mode') ? 'dark' : 'light';\n  }\n\n  /**\n   * 动态设置CSS变量\n   */\n  public setCSSVariable(name: string, value: string): void {\n    document.documentElement.style.setProperty(name, value);\n  }\n\n  /**\n   * 获取CSS变量值\n   */\n  public getCSSVariable(name: string): string {\n    return getComputedStyle(document.documentElement).getPropertyValue(name).trim();\n  }\n\n  /**\n   * 批量设置CSS变量\n   */\n  public setCSSVariables(variables: Record<string, string>): void {\n    Object.entries(variables).forEach(([name, value]) => {\n      this.setCSSVariable(name, value);\n    });\n  }\n\n  /**\n   * 重置所有自定义CSS变量\n   */\n  public resetCSSVariables(): void {\n    // 移除所有自定义设置的CSS变量\n    const style = document.documentElement.style;\n    const propertiesToRemove: string[] = [];\n\n    for (let i = 0; i < style.length; i++) {\n      const property = style[i];\n      if (property.startsWith('--')) {\n        propertiesToRemove.push(property);\n      }\n    }\n\n    propertiesToRemove.forEach(property => {\n      style.removeProperty(property);\n    });\n  }\n\n  /**\n   * 添加自定义样式类\n   */\n  public addStyleClass(element: HTMLElement, className: string): void {\n    element.classList.add(className);\n  }\n\n  /**\n   * 移除样式类\n   */\n  public removeStyleClass(element: HTMLElement, className: string): void {\n    element.classList.remove(className);\n  }\n\n  /**\n   * 切换样式类\n   */\n  public toggleStyleClass(element: HTMLElement, className: string): boolean {\n    return element.classList.toggle(className);\n  }\n\n  /**\n   * 检查元素是否包含指定样式类\n   */\n  public hasStyleClass(element: HTMLElement, className: string): boolean {\n    return element.classList.contains(className);\n  }\n\n  /**\n   * 获取样式管理器状态信息\n   */\n  public getStatus(): {\n    loadedStyles: string[];\n    currentTheme: string;\n    stylesLoaded: boolean;\n  } {\n    return {\n      loadedStyles: Array.from(this.loadedStyles),\n      currentTheme: this.getCurrentTheme(),\n      stylesLoaded: document.body.classList.contains('styles-loaded'),\n    };\n  }\n}\n\n// 导出单例实例\nexport const styleManager = StyleManager.getInstance();\n\n// 在模块加载时自动初始化\nconsole.log('[StyleManager] 样式管理器已初始化');\n","import { AppController } from './app-controller';\nimport { DialogManager } from './dialog-manager';\nimport { EventHandler } from './event-handler';\nimport { styleManager } from './style-manager';\n\n// 开发模式标志 - 发布前将此值设置为false\n// 使用window全局变量存储，避免循环依赖\n(window as any).BLMX_DEV_MODE = false;\n\n// 解决循环依赖问题，将EventHandler类存储在全局变量中\n(window as any).EventHandlerClass = EventHandler;\n\n// 添加全局标志来防止重复处理AI响应\n(window as any).BLMX_PROCESSING_AI_RESPONSE = false;\n\n// 使用jQuery的$(async () => {})语法\n$(async () => {\n  try {\n    // 重置全局标志，确保页面刷新时不会保留旧的状态\n    (window as any).BLMX_PROCESSING_AI_RESPONSE = false;\n\n    // 创建并初始化应用控制器\n    const appController = new AppController();\n    await appController.initialize();\n\n    // 将控制器实例存储在全局变量中，以便调试\n    (window as any).blmxApp = appController;\n    (window as any).blmxStyleManager = styleManager;\n    (window as any).dialogManager = DialogManager.getInstance();\n\n    if ((window as any).BLMX_DEV_MODE) {\n      console.log('[BLMX] 开发模式已启用，已加载测试数据');\n      console.log('[BLMX] 可用的调试命令:');\n      console.log('  window.blmxApp.showTestEntryTypes() - 显示可用的测试数据类型');\n      console.log('  window.blmxApp.addTestEntry(类型) - 添加指定类型的测试数据');\n      console.log('  window.blmxApp.clearDebugData() - 清除所有数据');\n    }\n  } catch (error) {\n    console.error('[BLMX] 初始化失败:', error);\n\n    // 使用自定义对话框替代alert\n    // 确保手机屏幕元素已经存在\n    setTimeout(() => {\n      const dialogManager = DialogManager.getInstance();\n      dialogManager.alert('初始化失败，请查看控制台获取详细信息。', '错误');\n    }, 500); // 延迟显示对话框，确保DOM已经加载\n  }\n});\n","import { DialogManager } from './dialog-manager';\nimport { BLMX_Protocol, ChatEntry, LogEntry } from './script';\nimport { IAppController, IEventHandler } from './types';\nimport { UIRenderer } from './ui-renderer';\nimport { safeJsonStringify, SafeStorage } from './utils';\n\n// 类型定义\ninterface EventHandlerOptions {\n  getDisplayName: (type: 'user' | 'char') => string;\n  stageAndDisplayEntry: (entry: LogEntry) => void;\n  triggerAiResponse: (immediate?: boolean) => Promise<void>;\n  updateFooterButtonsState: () => void;\n  renderChatHistory: () => void;\n  renderMomentsFeed: () => void;\n  togglePanel: (panelName: string | null) => void;\n  findStickerUrlByName: (name: string) => string | undefined;\n}\n\n// 事件处理器类\nexport class EventHandler implements IEventHandler {\n  private wechatInput: HTMLInputElement;\n  private sendBtn: HTMLElement;\n  private plusBtn: HTMLElement;\n  private uiRenderer: UIRenderer | null;\n  private options: EventHandlerOptions;\n  private blmxManager: BLMX_Protocol;\n  private appController: IAppController;\n  private hasPendingNotifications: boolean = false;\n  private dialogManager: DialogManager = DialogManager.getInstance();\n\n  // 添加getter方法\n  get hasNotifications(): boolean {\n    return this.hasPendingNotifications;\n  }\n\n  // 设置UIRenderer引用\n  setUIRenderer(uiRenderer: UIRenderer): void {\n    this.uiRenderer = uiRenderer;\n  }\n\n  constructor(\n    inputSelector: string,\n    sendBtnSelector: string,\n    plusBtnSelector: string,\n    blmxManager: BLMX_Protocol,\n    appController: IAppController,\n    uiRenderer: UIRenderer | null,\n    options: EventHandlerOptions,\n  ) {\n    this.wechatInput = $(inputSelector)[0] as HTMLInputElement;\n    this.sendBtn = $(sendBtnSelector)[0] as HTMLElement;\n    this.plusBtn = $(plusBtnSelector)[0] as HTMLElement;\n\n    if (!this.wechatInput || !this.sendBtn || !this.plusBtn) {\n      throw new Error('One or more required elements not found');\n    }\n\n    this.blmxManager = blmxManager;\n    this.options = options;\n    this.appController = appController;\n    this.uiRenderer = uiRenderer;\n\n    this.setupEventListeners();\n  }\n\n  // 设置是否有待处理的通知\n  setHasPendingNotifications(value: boolean): void {\n    this.hasPendingNotifications = value;\n    this.options.updateFooterButtonsState();\n  }\n\n  // 添加长按监听器\n  addLongPressListener(\n    element: HTMLElement,\n    callback: () => void,\n    options: { duration: number; preventDefault: boolean } = { duration: 600, preventDefault: true },\n  ): void {\n    let timer: number;\n    let startX: number, startY: number;\n\n    const onStart = (e: PointerEvent) => {\n      if (e.type === 'mousedown' && e.button !== 0) return;\n      startX = e.clientX;\n      startY = e.clientY;\n      if (options.preventDefault) e.preventDefault();\n      clearTimeout(timer);\n      timer = window.setTimeout(() => {\n        timer = 0;\n        callback();\n      }, options.duration);\n    };\n\n    const onMove = (e: PointerEvent) => {\n      if (!timer) return;\n      const moveX = e.clientX;\n      const moveY = e.clientY;\n      if (Math.abs(moveX - startX) > 10 || Math.abs(moveY - startY) > 10) {\n        clearTimeout(timer);\n      }\n    };\n\n    const onEnd = () => clearTimeout(timer);\n\n    element.addEventListener('pointerdown', onStart);\n    element.addEventListener('pointermove', onMove);\n    element.addEventListener('pointerup', onEnd);\n    element.addEventListener('pointerleave', onEnd);\n\n    if (options.preventDefault) {\n      element.addEventListener('contextmenu', e => e.preventDefault());\n    }\n  }\n\n  // 提示用户输入日期和时间\n  async promptForDateTime(defaultText: string): Promise<[string, string] | null> {\n    const dateTimeInput = await this.dialogManager.prompt(\n      '请输入日期和时间',\n      defaultText,\n      '日期时间设置',\n      '确定',\n      '取消',\n      'text',\n      '格式YYYY-MM-DD HH:mm',\n    );\n\n    if (!dateTimeInput || !/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/.test(dateTimeInput)) {\n      if (dateTimeInput) await this.dialogManager.alert('格式错误，请输入YYYY-MM-DD HH:mm 格式。', '格式错误');\n      return null;\n    }\n\n    const [newDate, newTime] = dateTimeInput.split(' ');\n    const parsedDate = new Date(dateTimeInput.replace(' ', 'T'));\n\n    if (isNaN(parsedDate.getTime())) {\n      await this.dialogManager.alert('无效的日期时间格式。', '格式错误');\n      return null;\n    }\n\n    // 更新系统当前日期\n    window.currentGameDate = parsedDate;\n\n    // 更新状态栏时间\n    const $timeElement = $('#current-time');\n    if ($timeElement.length) {\n      const formattedTime = `${window.currentGameDate.getHours().toString().padStart(2, '0')}:${window.currentGameDate\n        .getMinutes()\n        .toString()\n        .padStart(2, '0')}`;\n      $timeElement.text(formattedTime);\n    }\n\n    // 刷新所有时间戳的显示\n    if (this.uiRenderer) {\n      this.uiRenderer.refreshAllTimestamps();\n    }\n\n    return [newDate, newTime] as [string, string];\n  }\n\n  // 处理消息撤回\n  async handleMessageRecall(messageId: string): Promise<void> {\n    const entryToRecall = this.blmxManager.logEntries.find(e => 'id' in e && e.id === messageId) as\n      | ChatEntry\n      | undefined;\n\n    if (entryToRecall) {\n      const currentDate = window.currentGameDate || new Date();\n      const timeString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate\n        .getHours()\n        .toString()\n        .padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n\n      const dateTimeResult = await this.promptForDateTime(timeString);\n\n      if (dateTimeResult === null) {\n        return;\n      }\n\n      const confirmed = await this.dialogManager.confirm('是否要撤回这条消息？', '确认撤回');\n\n      if (confirmed) {\n        const [newDate, newTime] = dateTimeResult;\n        // 标记消息为已撤回\n        entryToRecall.recalled = true;\n        entryToRecall.recalled_timestamp = `${newDate} ${newTime}`;\n        entryToRecall.recalled_content = entryToRecall.content;\n\n        // 立即保存更新后的日志\n        this.blmxManager.persistLogToStorage().then(() => {\n          // 保存成功后，立即用最新的数据重绘整个聊天界面\n          this.options.renderChatHistory();\n        });\n\n        // 更新底部按钮状态\n        this.options.updateFooterButtonsState();\n\n        // 如果是用户撤回的消息，询问是否通过朋友圈通知AI\n        if (entryToRecall.sender === 'me') {\n          // 获取消息内容\n          const messageContent =\n            typeof entryToRecall.content === 'string'\n              ? entryToRecall.content\n              : safeJsonStringify(entryToRecall.content);\n\n          // 调用AppController的通知方法\n          this.appController.notifyRecallViaMoments('USER', messageContent);\n        }\n      }\n    } else {\n      await this.dialogManager.alert('找不到该消息，无法撤回。', '错误');\n    }\n  }\n\n  // 设置事件监听器\n  private setupEventListeners(): void {\n    // 发送按钮点击事件 - 使用jQuery\n    $(this.sendBtn).on('click', () => {\n      const text = this.wechatInput.value.trim();\n      if (text) {\n        this.options.stageAndDisplayEntry({\n          id: `msg-${Date.now()}${Math.random()}`,\n          type: 'message',\n          sender: 'me',\n          content: text,\n        });\n        this.wechatInput.value = '';\n        this.options.updateFooterButtonsState();\n      } else {\n        // 无论是否有通知，都强制触发AI响应\n        this.hasPendingNotifications = false;\n        this.options.triggerAiResponse(true); // 明确传递immediate=true\n      }\n    });\n\n    $('#smile-btn').on('click', () => {\n      this.options.togglePanel('sticker');\n      this.renderStickerFeatures();\n    });\n\n    // Plus按钮点击事件 - 使用jQuery\n    $(this.plusBtn).on('click', () => {\n      this.options.togglePanel('plus');\n      this.renderPlusFeatures();\n    });\n\n    $('#microphone-btn').on('click', async () => {\n      const result = await this.dialogManager.showVoiceDialog();\n      if (result) {\n        this.options.stageAndDisplayEntry({\n          id: `msg-${Date.now()}${Math.random()}`,\n          type: 'voice',\n          sender: 'me',\n          content: { text: result.text, duration: result.duration },\n        });\n      }\n    });\n\n    // 输入框事件 - 使用jQuery\n    $(this.wechatInput).on('keydown', (e: JQuery.KeyDownEvent) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        $(this.sendBtn).trigger('click');\n      }\n    });\n\n    $(this.wechatInput).on('input', () => {\n      this.options.updateFooterButtonsState();\n    });\n\n    $(this.wechatInput).on('focus', () => {\n      this.options.togglePanel(null);\n    });\n\n    // 导航事件\n    $('#app-wechat').on('click', () => this.appController.navigateTo('wechat'));\n    $('#app-settings').on('click', () => this.appController.navigateTo('settings'));\n    $('#wechat-back-btn-dummy').on('click', () => this.appController.navigateTo('home'));\n    $('#settings-back-btn').on('click', () => this.appController.navigateTo('home'));\n    $('#wechat-options-btn').on('click', () => this.appController.navigateTo('moments'));\n    $('#moments-back-btn').on('click', () => this.appController.navigateTo('wechat'));\n\n    // 渲染功能面板\n    this.renderPlusFeatures();\n    this.renderStickerFeatures();\n\n    // 各种点击事件监听\n    this.setupClickListeners();\n\n    // 输入框长按事件 - 使用jQuery获取元素\n    this.addLongPressListener(\n      $('#wechat-input-field')[0] as HTMLElement,\n      async () => {\n        // 使用自定义对话框来更新输入框提示文字\n        const currentPlaceholder = $('#wechat-input-field').attr('placeholder') || '';\n        const newPlaceholder = await this.dialogManager.prompt(\n          '修改输入框提示文字:',\n          currentPlaceholder,\n          '修改提示文字',\n        );\n        if (newPlaceholder !== null) {\n          $('#wechat-input-field').attr('placeholder', newPlaceholder);\n          localStorage.setItem(`blmx_input_placeholder_${this.blmxManager.getCharId()}`, newPlaceholder);\n        }\n      },\n      { duration: 5000, preventDefault: false },\n    );\n  }\n\n  private async setupClickListeners(): Promise<void> {\n    $('#hidden-send-trigger').on('click', async () => {\n      const confirmed = await this.dialogManager.confirm('是否要立即触发AI响应（即使没有新消息）？', '触发AI响应');\n      if (confirmed) {\n        this.options.triggerAiResponse(true);\n      }\n    });\n\n    // 添加微信选项按钮点击事件 - 导航到朋友圈\n    $('#wechat-options-btn').on('click', () => {\n      this.appController.navigateTo('moments');\n    });\n\n    $('#delete-mode-trigger').on('click', async () => {\n      const wechatView = $('#wechat-view');\n      wechatView?.toggleClass('delete-mode');\n      if (wechatView?.hasClass('delete-mode')) {\n        await this.dialogManager.alert(\n          '已进入删除模式。点击任意消息或时间戳可将其删除。再次点击左上角可退出。',\n          '删除模式',\n        );\n      } else {\n        await this.dialogManager.alert('已退出删除模式。', '删除模式');\n      }\n    });\n\n    $('#post-moment-btn').on('click', async () => {\n      const currentDate = window.currentGameDate || new Date();\n      const timeString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)\n        .toString()\n        .padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate\n        .getHours()\n        .toString()\n        .padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n\n      // 使用综合对话框获取所有朋友圈信息\n      const momentData = await this.dialogManager.showMomentDialog(timeString);\n      if (!momentData) return; // 用户取消了发布\n\n      // 为朋友圈生成唯一ID\n      const momentId = `moment-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n      const momentEntry = {\n        key: 'USER_MOMENT',\n        id: momentId,\n        data: {\n          text: momentData.text,\n          image: momentData.image,\n          image_type: momentData.image_type,\n          image_desc: momentData.image_desc,\n          date: momentData.date,\n          time: momentData.time,\n        },\n      } as import('./script').MomentEntry;\n\n      // 添加到日志\n      this.blmxManager.addEntry(momentEntry);\n\n      // 检查是否需要推进时间\n      const momentDateTime = `${momentData.date} ${momentData.time}`;\n      const momentDate = new Date(momentDateTime.replace(' ', 'T'));\n      const currentGameDate = window.currentGameDate || new Date();\n\n      // 如果朋友圈时间晚于当前游戏时间，延迟询问用户是否要推进时间（避免对话框冲突）\n      if (momentDate > currentGameDate) {\n        // 延迟300ms避免与朋友圈发布对话框冲突\n        setTimeout(async () => {\n          const shouldAdvanceTime = await this.dialogManager.confirm(\n            `朋友圈发布时间（${momentData.date} ${momentData.time}）晚于当前游戏时间。\\n是否要将游戏时间推进到朋友圈发布时间？`,\n            '时间推进确认',\n          );\n\n          if (shouldAdvanceTime) {\n            // 推进时间到朋友圈发布时间\n            const parsedDate = new Date(momentDateTime.replace(' ', 'T'));\n            if (!isNaN(parsedDate.getTime())) {\n              // 更新系统当前日期\n              window.currentGameDate = parsedDate;\n\n              // 更新状态栏时间\n              const $timeElement = $('#current-time');\n              if ($timeElement.length) {\n                const formattedTime = `${window.currentGameDate\n                  .getHours()\n                  .toString()\n                  .padStart(2, '0')}:${window.currentGameDate.getMinutes().toString().padStart(2, '0')}`;\n                $timeElement.text(formattedTime);\n              }\n\n              // 刷新所有时间戳的显示\n              if (this.uiRenderer) {\n                this.uiRenderer.refreshAllTimestamps();\n              }\n\n              // 创建时间推进事件记录\n              const timeAdvanceEvent: import('./script').EventLogEntry = {\n                type: 'event',\n                content: {\n                  date: momentData.date,\n                  time: momentData.time,\n                  description: `时间来到了 ${momentData.date} ${momentData.time}`,\n                },\n                id: `event-${Date.now()}`,\n              };\n              this.blmxManager.addEntry(timeAdvanceEvent);\n\n              // 重新渲染朋友圈以反映时间变化\n              this.options.renderMomentsFeed();\n            }\n          }\n        }, 300);\n      }\n\n      // 关键修改：先渲染朋友圈，再异步持久化数据\n      this.options.renderMomentsFeed();\n\n      // 设置通知状态\n      this.setHasPendingNotifications(true);\n      this.options.updateFooterButtonsState();\n\n      // 在后台进行数据持久化，不阻塞UI更新\n      this.blmxManager.persistLogToStorage().then(() => {});\n    });\n\n    const momentsFeedList = $('#moments-feed-list');\n    momentsFeedList?.on('click', async e => {\n      const target = $(e.target)[0] as HTMLElement;\n      const postEl = target.closest('.moment-post') as HTMLElement;\n      if (!postEl) return;\n\n      // 获取朋友圈的唯一ID\n      const momentId = postEl.dataset.momentId;\n      if (!momentId) {\n        console.error('[BLMX] 无法获取朋友圈ID，data-moment-id属性缺失');\n        return;\n      }\n      // 朋友圈操作\n\n      if (target.closest('.delete-moment-btn')) {\n        const confirmed = await this.dialogManager.confirm(\n          '确定要删除这条朋友圈吗？\\n此操作也会删除相关的点赞和评论。',\n          '删除朋友圈',\n        );\n        if (confirmed) {\n          // momentId是序列ID，需要找到对应的实际朋友圈条目\n          const momentPostLogIndices: number[] = [];\n          this.blmxManager.logEntries.forEach((entry, index) => {\n            if ('key' in entry && entry.key.includes('_MOMENT')) {\n              momentPostLogIndices.push(index);\n            }\n          });\n\n          const momentSequenceId = parseInt(momentId, 10);\n          const actualMomentIndex = momentPostLogIndices[momentSequenceId];\n\n          // 删除朋友圈\n\n          if (actualMomentIndex !== undefined && actualMomentIndex >= 0) {\n            // 先收集所有需要删除的条目索引（从后往前删除避免索引变化）\n            const indicesToDelete: number[] = [actualMomentIndex];\n\n            // 找到相关的点赞和评论索引\n            this.blmxManager.logEntries.forEach((entry, index) => {\n              if (\n                'key' in entry &&\n                (entry.key === 'USER_LIKE' || entry.key === 'USER_COMMENT') &&\n                'data' in entry &&\n                'target_post_id' in entry.data &&\n                entry.data.target_post_id === momentSequenceId\n              ) {\n                indicesToDelete.push(index);\n              }\n            });\n\n            // 按索引从大到小排序，从后往前删除\n            indicesToDelete.sort((a, b) => b - a);\n            for (const index of indicesToDelete) {\n              this.blmxManager.logEntries.splice(index, 1);\n            }\n\n            // 保存更新后的日志\n            this.blmxManager.persistLogToStorage().then(() => {\n              // 重绘朋友圈界面\n              this.options.renderMomentsFeed();\n            });\n          }\n        }\n      } else if (target.closest('.comment-button')) {\n        // 处理评论/点赞按钮\n        const result = await this.dialogManager.showCommentDialog();\n        if (result) {\n          if (result.type === 'like') {\n            // 添加点赞\n            const likeId = `like-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n            const likeEntry = {\n              key: 'USER_LIKE',\n              id: likeId,\n              data: { target_post_id: parseInt(momentId, 10) },\n            } as import('./script').LikeEntry;\n\n            this.blmxManager.addEntry(likeEntry);\n            // 用户点赞朋友圈\n          } else if (result.type === 'comment' && result.content) {\n            // 添加评论\n            const commentId = `comment-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n            const commentEntry = {\n              key: 'USER_COMMENT',\n              id: commentId,\n              data: { text: result.content, target_post_id: parseInt(momentId, 10) },\n            } as import('./script').CommentEntry;\n\n            this.blmxManager.addEntry(commentEntry);\n            // 用户评论朋友圈\n          }\n\n          // 更新界面和状态\n          this.options.renderMomentsFeed();\n          this.setHasPendingNotifications(true);\n          this.options.updateFooterButtonsState();\n\n          // 持久化数据\n          this.blmxManager.persistLogToStorage();\n        }\n      }\n    });\n\n    $(document.body).on('click', e => {\n      const target = $(e.target)[0] as HTMLElement;\n      if (target.matches('.message-avatar')) {\n        const row = target.closest('.message-row');\n        if (row) {\n          const avatarType = row.classList.contains('me') ? 'user' : 'char';\n          this.appController.updateAvatar(avatarType);\n        }\n      }\n    });\n\n    $('#contact-name-header').on('click', () => {\n      this.appController.updateCharRemark();\n    });\n    $('#moments-user-name').on('click', () => {\n      this.appController.updateUserName();\n    });\n    $('#moments-user-avatar').on('click', () => {\n      this.appController.updateAvatar('user');\n    });\n    // 个性签名设置已整合到用户头像设置对话框中，无需单独点击事件\n    $('#moments-cover-photo').on('click', () => {\n      this.appController.updateCoverPhoto();\n    });\n\n    const $wechatBody = $('.wechat-body');\n    // 使用jQuery的on方法，不使用capture参数\n    $wechatBody.on('click', async (e: JQuery.ClickEvent) => {\n      const $wechatView = $('#wechat-view');\n      if (!$wechatView.hasClass('delete-mode')) {\n        return;\n      }\n\n      // 首先检查是否有data-log-index属性\n      const $targetRow = $(e.target).closest('[data-log-index]');\n      if ($targetRow.length) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const indexToDelete = parseInt($targetRow.data('logIndex'), 10);\n        const previewText = $targetRow.text().trim().replace(/\\s+/g, ' ').substring(0, 50);\n\n        const confirmed = await this.dialogManager.confirm(\n          `确定要删除这条记录吗？\\n\\n预览: \"${previewText}...\"`,\n          '删除记录',\n        );\n        if (confirmed) {\n          const mainLogLength = this.blmxManager.logEntries.length;\n\n          if (indexToDelete < mainLogLength) {\n            // 删除主日志中的消息\n            this.blmxManager.logEntries.splice(indexToDelete, 1);\n            await this.blmxManager.persistLogToStorage();\n          } else {\n            // 删除队列中的消息\n            const queueIndex = indexToDelete - mainLogLength;\n            this.appController.removeFromUserMessageQueue(queueIndex);\n          }\n\n          this.options.renderChatHistory();\n          this.options.renderMomentsFeed();\n        }\n        return;\n      }\n\n      // 如果没有data-log-index属性，检查是否有data-message-id属性\n      const $messageRow = $(e.target).closest('[data-message-id]');\n      if ($messageRow.length) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const messageId = $messageRow.data('messageId');\n        const previewText = $messageRow.text().trim().replace(/\\s+/g, ' ').substring(0, 50);\n\n        const confirmed = await this.dialogManager.confirm(\n          `确定要删除这条消息吗？\\n\\n预览: \"${previewText}...\"`,\n          '删除消息',\n        );\n        if (confirmed) {\n          // 通过messageId查找对应的日志条目索引\n          const indexToDelete = this.blmxManager.logEntries.findIndex(entry => 'id' in entry && entry.id === messageId);\n\n          if (indexToDelete !== -1) {\n            this.blmxManager.logEntries.splice(indexToDelete, 1);\n            this.blmxManager.persistLogToStorage().then(() => {\n              this.options.renderChatHistory();\n              this.options.renderMomentsFeed();\n            });\n          } else {\n            // 如果找不到对应的日志条目，直接从DOM中移除该元素\n            $messageRow.remove();\n            await this.dialogManager.alert('无法找到对应的日志条目，已从界面移除该消息', '错误');\n          }\n        }\n      }\n    });\n\n    $('#change-chat-wallpaper-btn').on('click', e => {\n      e.preventDefault();\n      this.appController.changeWallpaper('chat');\n    });\n    $('#change-home-wallpaper-btn').on('click', e => {\n      e.preventDefault();\n      this.appController.changeWallpaper('home');\n    });\n    $('#change-settings-wallpaper-btn').on('click', e => {\n      e.preventDefault();\n      this.appController.changeWallpaper('settings');\n    });\n\n    $('#show-last-ai-response-btn').on('click', async e => {\n      e.preventDefault();\n      const response = this.appController.getLatestAiRawResponse();\n      await this.dialogManager.showScrollableText(response || '暂无AI回复内容', 'AI原始回复', '关闭');\n    });\n\n    $('#show-last-sent-prompt-btn').on('click', async e => {\n      e.preventDefault();\n      const prompt = this.appController.getLatestSentPrompt();\n      await this.dialogManager.showScrollableText(prompt || '暂无发送的提示内容', '发送的提示', '关闭');\n    });\n\n    // 灵动岛全屏功能\n    $('.dynamic-island').on('click', async () => {\n      try {\n        // 使用jQuery检查全屏状态，但仍需要使用原生API进行全屏操作\n        if (!document.fullscreenElement) {\n          // 进入全屏\n          await document.documentElement.requestFullscreen();\n        } else {\n          // 退出全屏\n          await document.exitFullscreen();\n        }\n      } catch (error) {\n        console.warn('[BLMX] 全屏功能不支持或被阻止:', error);\n        await this.dialogManager.alert('您的浏览器不支持全屏功能或被阻止', '全屏功能');\n      }\n    });\n  }\n\n  private renderPlusFeatures(): void {\n    const $plusGrid = $('#plus-grid');\n    if (!$plusGrid.length) return;\n\n    const PLUS_FEATURES = [\n      {\n        label: '相册',\n        icon: 'fas fa-images',\n        action: async () => {\n          const desc = await this.dialogManager.prompt('请输入图片描述:', '', '添加图片');\n          if (desc) {\n            this.options.stageAndDisplayEntry({\n              type: 'image',\n              sender: 'me',\n              content: { type: 'desc', value: desc },\n              id: `msg-${Date.now()}`,\n            });\n            this.options.togglePanel(null);\n          }\n        },\n      },\n      {\n        label: '拍摄',\n        icon: 'fas fa-camera',\n        action: async () => {\n          const currentDate = window.currentGameDate || new Date();\n          const dateString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1)\n            .toString()\n            .padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')}`;\n          const timeString = `${currentDate.getHours().toString().padStart(2, '0')}:${currentDate\n            .getMinutes()\n            .toString()\n            .padStart(2, '0')}`;\n\n          // 使用综合时间跳跃对话框\n          const timeJumpData = await this.dialogManager.showTimeJumpDialog(`${dateString} ${timeString}`);\n          if (!timeJumpData) return;\n\n          const eventData = {\n            date: timeJumpData.date,\n            time: timeJumpData.time,\n            description: timeJumpData.description,\n          };\n\n          // 按照原版逻辑：发送eventlog时立即更新游戏时间\n          const [newDate, newTime] = [timeJumpData.date, timeJumpData.time];\n          window.currentGameDate = new Date(`${newDate} ${newTime}`.replace(' ', 'T'));\n\n          // 更新状态栏时间显示\n          const $timeElement = $('#current-time');\n          if ($timeElement.length) {\n            const formattedTime = `${window.currentGameDate\n              .getHours()\n              .toString()\n              .padStart(2, '0')}:${window.currentGameDate.getMinutes().toString().padStart(2, '0')}`;\n            $timeElement.text(formattedTime);\n          }\n\n          this.options.stageAndDisplayEntry({\n            type: 'event',\n            content: eventData,\n            id: `event-${Date.now()}`,\n          } as import('./script').EventLogEntry);\n          this.options.togglePanel(null);\n        },\n      },\n      {\n        label: '视频通话',\n        icon: 'fas fa-video',\n        action: async () =>\n          await this.dialogManager.alert(\n            '本同层手机只【免费发布于discord的尾巴镇社区和旅程社区，作者暴力美学，点击链接即可免费获取https://discord.com/channels/1379304008157499423/1388180976873766973。https://discord.com/channels/1291925535324110879/1388182155707814009',\n            '关于作者',\n          ),\n      },\n      {\n        label: '位置',\n        icon: 'fas fa-map-marker-alt',\n        action: async () => {\n          const loc = await this.dialogManager.prompt('请输入位置:', '', '发送位置');\n          if (loc)\n            this.options.stageAndDisplayEntry({\n              type: 'location',\n              sender: 'me',\n              content: loc,\n              id: `msg-${Date.now()}`,\n            });\n          this.options.togglePanel(null);\n        },\n      },\n      {\n        label: '红包',\n        icon: 'fas fa-envelope',\n        action: async () => {\n          const result = await this.dialogManager.showRedPacketDialog();\n          if (result) {\n            const giftData = {\n              name: '红包',\n              price: result.amount,\n              note: result.note,\n              status: 'sent' as const,\n            };\n            this.options.stageAndDisplayEntry({\n              type: 'gift',\n              sender: 'me',\n              content: safeJsonStringify(giftData),\n              data: giftData,\n              id: `msg-${Date.now()}`,\n            });\n            this.options.togglePanel(null);\n          }\n        },\n      },\n      {\n        label: '转账',\n        icon: 'fas fa-money-bill-wave',\n        action: async () => {\n          const result = await this.dialogManager.showTransferDialog();\n          if (result) {\n            const transferData = {\n              amount: result.amount,\n              note: result.note || ' ',\n              status: 'sent' as const,\n            };\n            this.options.stageAndDisplayEntry({\n              type: 'transfer',\n              sender: 'me',\n              content: safeJsonStringify(transferData),\n              data: transferData,\n              id: `msg-${Date.now()}`,\n            });\n            this.options.togglePanel(null);\n          }\n        },\n      },\n      {\n        label: '文件',\n        icon: 'fas fa-file-alt',\n        action: async () => {\n          const fileName = await this.dialogManager.prompt('请输入文件名:', '', '发送文件');\n          if (fileName)\n            this.options.stageAndDisplayEntry({\n              type: 'file',\n              sender: 'me',\n              content: fileName,\n              id: `msg-${Date.now()}`,\n            });\n          this.options.togglePanel(null);\n        },\n      },\n      {\n        label: '礼物',\n        icon: 'fas fa-gift',\n        action: async () => {\n          const result = await this.dialogManager.showGiftDialog();\n          if (result) {\n            const giftData = {\n              name: result.name,\n              price: result.price,\n              status: 'sent' as const,\n            };\n            this.options.stageAndDisplayEntry({\n              type: 'gift',\n              sender: 'me',\n              content: safeJsonStringify(giftData),\n              data: giftData,\n              id: `msg-${Date.now()}`,\n            });\n            this.options.togglePanel(null);\n          }\n        },\n      },\n    ];\n\n    // 确保uiRenderer存在且已经初始化\n    if (this.uiRenderer) {\n      // 直接使用DOM元素而不是jQuery对象\n      this.uiRenderer.renderFeatureGrid($plusGrid[0], PLUS_FEATURES, {\n        onToggleDeleteMode: () => {},\n        onAddStickers: () => {},\n      });\n    } else {\n      console.error('[BLMX] UIRenderer is not initialized');\n    }\n  }\n\n  private renderStickerFeatures(): void {\n    const $stickerGrid = $('#sticker-grid');\n    if (!$stickerGrid.length) return;\n\n    // 定义默认表情包\n    const defaultGlobalStickers = [{ label: '好的', url: 'https://files.catbox.moe/3j0tpc.jpeg' }];\n\n    // 读取全局表情包 - 使用与原版一致的存储键\n    const GLOBAL_STICKER_STORAGE_KEY = 'blmx_wechat_stickers_global_blmx';\n    const customStickers = SafeStorage.getItem(GLOBAL_STICKER_STORAGE_KEY, []) || [];\n    const allStickers = [...defaultGlobalStickers, ...customStickers];\n\n    // 创建表情包功能\n    const features = allStickers.map(s => ({\n      label: s.label,\n      icon: s.url,\n      isDefault: defaultGlobalStickers.some(ds => ds.label === s.label),\n      action: () => {\n        this.options.stageAndDisplayEntry({\n          type: 'sticker',\n          sender: 'me',\n          content: s.label,\n          id: `msg-${Date.now()}`,\n        });\n        this.options.togglePanel(null);\n      },\n    }));\n\n    // 添加\"表情管理\"按钮\n    features.unshift({\n      label: '表情管理',\n      icon: 'fas fa-cog', // 将图标改为齿轮图标\n      isAddBtn: true,\n      isDefault: false, // 添加isDefault属性\n      action: () => {\n        this.showStickerManager();\n      },\n    } as {\n      label: string;\n      icon: string;\n      isAddBtn: boolean;\n      isDefault: boolean;\n      action: () => void;\n    });\n\n    // 确保uiRenderer存在且已经初始化\n    if (this.uiRenderer) {\n      // 直接使用DOM元素而不是jQuery对象\n      this.uiRenderer.renderFeatureGrid($stickerGrid[0], features, {\n        onToggleDeleteMode: () => this.showStickerManager(),\n        onAddStickers: () => this.showStickerManager(),\n      });\n    } else {\n      console.error('[BLMX] UIRenderer is not initialized');\n    }\n  }\n\n  // 表情包管理界面\n  private showStickerManager(): void {\n    // 创建模态框\n    const modal = document.createElement('div');\n    modal.className = 'sticker-manager-modal';\n\n    // 创建内容容器\n    const container = document.createElement('div');\n    container.className = 'sticker-manager-container';\n\n    // 使用innerHTML创建完整结构，包含多标签页\n    container.innerHTML = `\n      <h2>表情包管理</h2>\n      <div class=\"sticker-manager-tabs\">\n        <div class=\"tab-button active\" data-tab=\"add-sticker\">添加表情</div>\n        <div class=\"tab-button\" data-tab=\"batch-add\">批量添加</div>\n        <div class=\"tab-button\" data-tab=\"delete-manage\">删除管理</div>\n      </div>\n      <div class=\"sticker-manager-content\">\n        <!-- 添加单个表情标签页 -->\n        <div class=\"tab-content active\" data-tab=\"add-sticker\">\n          <div class=\"add-sticker-section\">\n            <div class=\"add-sticker-form\">\n              <div class=\"form-group\">\n                <label for=\"sticker-label\">表情包名称</label>\n                <input type=\"text\" id=\"sticker-label\" placeholder=\"表情描述/名称\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"sticker-url\">表情包URL</label>\n                <input type=\"url\" id=\"sticker-url\" placeholder=\"表情图片URL链接\">\n              </div>\n              <div class=\"preview-container\">\n                <div class=\"preview-label\">预览</div>\n                <img id=\"preview-img\" class=\"preview-img\" style=\"display: none;\">\n              </div>\n              <button class=\"add-sticker-btn\">添加表情包</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- 批量添加标签页 -->\n        <div class=\"tab-content\" data-tab=\"batch-add\">\n          <div class=\"batch-add-section\">\n            <div class=\"batch-instructions\">\n              <p>批量添加格式说明：</p>\n              <ul>\n                <li>每个表情包格式：<strong>表情名称http://图片链接</strong></li>\n                <li>多个表情包用<strong>英文逗号</strong>分隔</li>\n                <li>也支持 <strong>表情名称=http://图片链接</strong> 格式</li>\n                <li>示例：<code>笑脸https://example.com/smile.jpg,哭脸https://example.com/cry.jpg</code></li>\n              </ul>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"batch-textarea\">批量表情包数据</label>\n              <textarea id=\"batch-textarea\" placeholder=\"请按照上述格式输入多个表情包...\"></textarea>\n            </div>\n            <button class=\"batch-add-btn\">批量添加表情包</button>\n          </div>\n        </div>\n\n        <!-- 删除管理标签页 -->\n        <div class=\"tab-content\" data-tab=\"delete-manage\">\n          <div class=\"delete-manage-section\">\n            <div class=\"control-bar\">\n              <div class=\"selection-controls\">\n                <button class=\"select-all-btn\">全选</button>\n                <button class=\"deselect-all-btn\">取消选择</button>\n              </div>\n              <button class=\"delete-selected-btn\">删除选中</button>\n            </div>\n            <div class=\"sticker-list-container\">\n              <div class=\"sticker-grid\" id=\"delete-sticker-grid\">\n                <!-- 表情包列表将在这里动态生成 -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"sticker-manager-footer\">\n        <button class=\"dialog-button\">关闭</button>\n      </div>\n    `;\n\n    // 获取DOM元素\n    const tabButtons = container.querySelectorAll('.tab-button') as NodeListOf<HTMLElement>;\n    const tabContents = container.querySelectorAll('.tab-content') as NodeListOf<HTMLElement>;\n    const closeBtn = container.querySelector('.dialog-button') as HTMLButtonElement;\n\n    // 添加表情相关元素\n    const labelInput = container.querySelector('#sticker-label') as HTMLInputElement;\n    const urlInput = container.querySelector('#sticker-url') as HTMLInputElement;\n    const previewImg = container.querySelector('#preview-img') as HTMLImageElement;\n    const addStickerBtn = container.querySelector('.add-sticker-btn') as HTMLButtonElement;\n\n    // 批量添加相关元素\n    const batchTextarea = container.querySelector('#batch-textarea') as HTMLTextAreaElement;\n    const batchAddBtn = container.querySelector('.batch-add-btn') as HTMLButtonElement;\n\n    // 删除管理相关元素\n    const selectAllBtn = container.querySelector('.select-all-btn') as HTMLButtonElement;\n    const deselectAllBtn = container.querySelector('.deselect-all-btn') as HTMLButtonElement;\n    const deleteSelectedBtn = container.querySelector('.delete-selected-btn') as HTMLButtonElement;\n    const deleteStickerGrid = container.querySelector('#delete-sticker-grid') as HTMLElement;\n\n    // 标签页切换功能\n    tabButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        const targetTab = button.dataset.tab;\n\n        // 移除所有活动状态\n        tabButtons.forEach(btn => btn.classList.remove('active'));\n        tabContents.forEach(content => content.classList.remove('active'));\n\n        // 设置当前标签为活动状态\n        button.classList.add('active');\n        const targetContent = container.querySelector(`.tab-content[data-tab=\"${targetTab}\"]`);\n        if (targetContent) {\n          targetContent.classList.add('active');\n        }\n\n        // 如果切换到删除管理标签页，渲染表情包列表\n        if (targetTab === 'delete-manage') {\n          renderDeleteStickerList();\n        }\n      });\n    });\n\n    // URL输入预览功能\n    urlInput.addEventListener('input', () => {\n      if (urlInput.value.trim()) {\n        previewImg.src = urlInput.value.trim();\n        previewImg.style.display = 'block';\n      } else {\n        previewImg.style.display = 'none';\n      }\n    });\n\n    // 添加单个表情包\n    addStickerBtn.addEventListener('click', () => {\n      const label = labelInput.value.trim();\n      const url = urlInput.value.trim();\n\n      if (!label || !url) {\n        alert('请输入表情名称和URL');\n        return;\n      }\n\n      const GLOBAL_STICKER_STORAGE_KEY = 'blmx_wechat_stickers_global_blmx';\n      const existingStickers = SafeStorage.getItem<any[]>(GLOBAL_STICKER_STORAGE_KEY, []) || [];\n\n      const newSticker = { label, url };\n      existingStickers.push(newSticker);\n\n      SafeStorage.setItem(GLOBAL_STICKER_STORAGE_KEY, existingStickers);\n      alert('表情包添加成功！');\n\n      // 清空输入框\n      labelInput.value = '';\n      urlInput.value = '';\n      previewImg.style.display = 'none';\n\n      // 刷新表情包菜单\n      this.renderStickerFeatures();\n    });\n\n    // 批量添加表情包\n    batchAddBtn.addEventListener('click', () => {\n      const input = batchTextarea.value.trim();\n      if (!input) {\n        alert('请输入表情包数据');\n        return;\n      }\n\n      const GLOBAL_STICKER_STORAGE_KEY = 'blmx_wechat_stickers_global_blmx';\n      const pairs = input.split(',');\n      const newStickers = [];\n\n      for (const pair of pairs) {\n        // 查找URL部分的起始位置 - 通常是http或https开头\n        const urlStartIndex = pair.indexOf('http');\n\n        if (urlStartIndex > 0) {\n          const label = pair.substring(0, urlStartIndex).trim();\n          const url = pair.substring(urlStartIndex).trim();\n\n          if (label && url) {\n            newStickers.push({ label, url });\n          }\n        } else if (pair.includes('=')) {\n          // 支持label=url格式\n          const [label, url] = pair.split('=').map(part => part.trim());\n          if (label && url) {\n            newStickers.push({ label, url });\n          }\n        }\n      }\n\n      if (newStickers.length > 0) {\n        const existingStickers = SafeStorage.getItem<any[]>(GLOBAL_STICKER_STORAGE_KEY, []) || [];\n        const updatedStickers = [...existingStickers, ...newStickers];\n        SafeStorage.setItem(GLOBAL_STICKER_STORAGE_KEY, updatedStickers);\n        alert(`${newStickers.length} 个表情包已添加！`);\n        batchTextarea.value = '';\n\n        // 刷新表情包菜单\n        this.renderStickerFeatures();\n      } else {\n        alert('未找到有效的表情包格式。请按照上方的格式说明输入。');\n      }\n    });\n\n    // 渲染删除管理的表情包列表\n    const renderDeleteStickerList = () => {\n      const GLOBAL_STICKER_STORAGE_KEY = 'blmx_wechat_stickers_global_blmx';\n      const stickers = SafeStorage.getItem<any[]>(GLOBAL_STICKER_STORAGE_KEY, []) || [];\n\n      deleteStickerGrid.innerHTML = '';\n\n      if (stickers.length === 0) {\n        const noStickersMsg = document.createElement('div');\n        noStickersMsg.textContent = '没有表情包，请点击\"添加表情\"标签添加。';\n        noStickersMsg.className = 'no-stickers-msg';\n        deleteStickerGrid.appendChild(noStickersMsg);\n        return;\n      }\n\n      stickers.forEach((sticker: any, index: number) => {\n        const stickerItem = document.createElement('div');\n        stickerItem.className = 'sticker-item';\n\n        // 创建隐藏的原生checkbox\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.className = 'sticker-checkbox';\n        checkbox.dataset.index = index.toString();\n\n        // 创建可见的checkbox按钮\n        const checkboxButton = document.createElement('div');\n        checkboxButton.className = 'sticker-checkbox-button';\n\n        // 创建其他元素\n        const stickerImg = document.createElement('img');\n        stickerImg.src = sticker.url;\n        stickerImg.alt = sticker.label;\n        stickerImg.className = 'sticker-preview';\n\n        const stickerLabel = document.createElement('div');\n        stickerLabel.className = 'sticker-label';\n        stickerLabel.textContent = sticker.label;\n\n        // 更新checkbox按钮状态\n        const updateCheckboxState = (checked: boolean) => {\n          if (checked) {\n            checkboxButton.classList.add('checked');\n          } else {\n            checkboxButton.classList.remove('checked');\n          }\n        };\n\n        // 点击事件\n        const handleClick = (e: Event) => {\n          e.preventDefault();\n          e.stopPropagation();\n          checkbox.checked = !checkbox.checked;\n          updateCheckboxState(checkbox.checked);\n        };\n\n        stickerItem.addEventListener('click', handleClick);\n        checkboxButton.addEventListener('click', handleClick);\n\n        // 组装元素\n        stickerItem.appendChild(checkbox);\n        stickerItem.appendChild(checkboxButton);\n        stickerItem.appendChild(stickerImg);\n        stickerItem.appendChild(stickerLabel);\n\n        deleteStickerGrid.appendChild(stickerItem);\n\n        // 设置初始状态\n        updateCheckboxState(checkbox.checked);\n      });\n    };\n\n    // 全选功能\n    selectAllBtn.addEventListener('click', () => {\n      const checkboxes = deleteStickerGrid.querySelectorAll('.sticker-checkbox') as NodeListOf<HTMLInputElement>;\n      const checkboxButtons = deleteStickerGrid.querySelectorAll('.sticker-checkbox-button');\n\n      checkboxes.forEach((checkbox, index) => {\n        checkbox.checked = true;\n        checkboxButtons[index]?.classList.add('checked');\n      });\n    });\n\n    // 取消选择功能\n    deselectAllBtn.addEventListener('click', () => {\n      const checkboxes = deleteStickerGrid.querySelectorAll('.sticker-checkbox') as NodeListOf<HTMLInputElement>;\n      const checkboxButtons = deleteStickerGrid.querySelectorAll('.sticker-checkbox-button');\n\n      checkboxes.forEach((checkbox, index) => {\n        checkbox.checked = false;\n        checkboxButtons[index]?.classList.remove('checked');\n      });\n    });\n\n    // 删除选中功能\n    deleteSelectedBtn.addEventListener('click', () => {\n      const checkboxes = deleteStickerGrid.querySelectorAll(\n        '.sticker-checkbox:checked',\n      ) as NodeListOf<HTMLInputElement>;\n\n      if (checkboxes.length === 0) {\n        alert('请选择要删除的表情包');\n        return;\n      }\n\n      if (confirm(`确定要删除选中的 ${checkboxes.length} 个表情包吗？`)) {\n        const GLOBAL_STICKER_STORAGE_KEY = 'blmx_wechat_stickers_global_blmx';\n        const stickers = SafeStorage.getItem<any[]>(GLOBAL_STICKER_STORAGE_KEY, []) || [];\n\n        // 获取要删除的索引（从大到小排序，避免删除时索引变化）\n        const indicesToDelete = (window as any)._.chain(checkboxes)\n          .map((checkbox: HTMLInputElement) => parseInt(checkbox.dataset.index!))\n          .sortBy()\n          .reverse()\n          .value();\n\n        // 删除选中的表情包\n        indicesToDelete.forEach((index: number) => {\n          stickers.splice(index, 1);\n        });\n\n        SafeStorage.setItem(GLOBAL_STICKER_STORAGE_KEY, stickers);\n        alert(`已删除 ${checkboxes.length} 个表情包`);\n\n        // 重新渲染列表\n        renderDeleteStickerList();\n\n        // 刷新表情包菜单\n        this.renderStickerFeatures();\n      }\n    });\n\n    // 关闭按钮事件\n    closeBtn.addEventListener('click', () => {\n      document.body.removeChild(modal);\n    });\n\n    // 点击遮罩层关闭\n    modal.addEventListener('click', e => {\n      if (e.target === modal) {\n        document.body.removeChild(modal);\n      }\n    });\n\n    modal.appendChild(container);\n    document.body.appendChild(modal);\n  }\n}\n"],"names":["LogLevel","DialogManager","static","activeDialog","activeOverlay","getInstance","instance","escapeHtml","text","$","html","safeShowDialog","dialogFunction","this","forceCleanupDialogs","createBaseDialogElements","dialogClass","addClass","appendDialogToPage","$phoneScreen","length","append","initializeCheckboxButtons","find","each","_","button","$button","$checkbox","checkbox","updateCheckboxButtonState","checked","on","e","preventDefault","stopPropagation","disabled","changeEvent","Event","bubbles","dispatchEvent","attr","role","tabindex","toString","toggleClass","alert","message","title","confirmText","showDialog","type","confirm","cancelText","prompt","defaultValue","inputType","placeholder","inputValue","inputPlaceholder","showScrollableText","content","Promise","resolve","innerHTML","$copyBtn","$confirmBtn","handleCancel","closeDialog","async","navigator","clipboard","writeText","originalText","setTimeout","error","console","$textElement","range","document","createRange","selectNodeContents","selection","window","getSelection","removeAllRanges","addRange","key","off","options","overlay","dialog","createDialogElements","$inputEl","trigger","confirmButton","querySelector","addEventListener","inputEl","value","undefined","cancelButton","target","handleKeyDown","removeEventListener","$overlay","$dialog","className","$header","$title","$body","$message","$inputContainer","$input","val","$footer","$cancelButton","$confirmButton","showCommentDialog","$cancelBtn","$likeBtn","$commentText","handleComment","css","ctrlKey","appendChild","showTransferDialog","$amountInput","$noteInput","handleConfirm","amount","note","parseFloat","toFixed","showRedPacketDialog","showGiftDialog","cancelBtn","confirmBtn","nameInput","priceInput","name","trim","price","showInputDialog","label","$inputField","showVoiceDialog","textArea","durationInput","durationStr","duration","parseInt","isNaN","showReceiveDialog","data","isGift","icon","rejectBtn","acceptBtn","handleAccept","showMomentDialog","defaultTime","currentDate","currentGameDate","Date","defaultDateTime","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","imageTypeRadios","querySelectorAll","imageContentLabel","imageContentInput","urlDescGroup","forEach","radio","isDesc","textContent","style","display","imageTypeInput","imageContentField","imageDescField","datetimeInput","imageContent","imageType","imageDesc","datetime","datetimeMatch","match","image","image_type","image_desc","date","time","$textArea","showTimeJumpDialog","descriptionInput","description","$timeInput","$container","selector","element","remove","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DebugLogger","isDevelopment","logLevel","logHistory","maxHistorySize","checkDevelopmentMode","DEBUG","ERROR","BLMX_DEV_MODE","localStorage","getItem","location","hostname","search","includes","setLogLevel","level","setDevelopmentMode","enabled","setItem","removeItem","addToHistory","push","timestamp","shift","formatMessage","toISOString","substr","debug","log","info","INFO","WARN","timeStart","timeEnd","groupStart","group","groupEnd","getHistory","filterModule","filterLevel","filtered","filter","clearHistory","exportHistory","JSON","stringify","showDebugPanel","slice","levelIcon","getStatus","historyCount","blmxLogger","EventManager","listeners","timers","Set","intervals","isDestroyed","addGlobalListener","event","handler","cleanup","eventOn","addDOMListener","callback","delay","timerId","delete","add","setInterval","interval","intervalId","clearTimeout","has","clearInterval","clear","listenersCount","timersCount","size","intervalsCount","isDestroyed_","globalEventManager","getTavernHelper","parent","TavernHelper","BLMX_Protocol","logEntries","messageId","charId","LOG_START_TAG","LOG_END_TAG","constructor","getCharId","initialize","lastMessageId","getLastMessageId","persistLogToStorage","latestUiMessage","previousUiMessages","i","msg","getChatMessages","id","consolidatedLogParts","latestLogStartIndex","indexOf","latestLogEndIndex","logPart","prevMsg","prevLogStartIndex","prevLogEndIndex","unshift","cleanedContent","substring","setChatMessage","refresh","finalLogString","join","_parseLogFromString","logString","_renderLogToString","existingMessage","existingContent","logStartIndex","logEndIndex","newLogBlock","fullText","split","line","separatorIndex","parse","now","String","newEntry","timeDate","getTime","timeElement","getElementById","timeString","recallData","senderToFind","sender","targetText","target_text","entryToRecall","reverse","normalizeText","replace","toLowerCase","voiceText","err","recalled","recalled_content","recalled_timestamp","recall_data","Math","random","voiceMatch","voiceData","stickerMatch","imageMatch","imgData","locationMatch","transferMatch","fileMatch","giftMatch","recallCommands","map","prefix","Boolean","addEntry","entry","some","existingEntry","entryData","existingData","target_post_id","isEqual","getContextForAI","safeJsonParse","jsonString","safeJsonStringify","SafeStorage","item","serialized","AiResponseManager","blmxManager","uiRenderer","eventHandler","momentsManager","eventManager","isGenerating","latestAiRawResponse","latestSentPrompt","rawAiResponse","fullPrompt","event_data","chat","promptLength","getIsGenerating","triggerAiResponse","_immediate","BLMX_PROCESSING_AI_RESPONSE","contextForAI","isNewForAI","setHasPendingNotifications","MAX_RETRIES","attempt","success","maxRetries","showGeneratingIndicator","stream","generate","user_input","should_stream","finalAiResponse","chunk","hideGeneratingIndicator","processedResponse","len","firstHalf","lines","uniqueLines","uniq","processAiResponse","showErrorMessage","refreshAllTimestamps","response","entriesForAnimation","hasNewCharMoments","responseLines","lineCount","valuePreview","valueLength","renderMomentsFeed","parsedMessageContent","parsedImageData","url","parsedStickerContent","originalEntry","recallTimestamp","displayAiEntriesSequentially","hasClass","setLastMomentViewTimestamp","setMomentNotification","$errorDiv","entries","messageLikeTypes","entryIndex","findIndex","entryType","showTypingIndicator","messageText","calculateTypingDelay","hideTypingIndicator","renderEntry","entryToUpdate","recallEntryIndex","$elementToReplace","renderRecallNotice","getLatestAiRawResponse","getLatestSentPrompt","getRawAiResponse","getFullPrompt","STORAGE_KEYS","ConfigManager","config","defaultGlobalStickers","avatars","user","char","names","charRemark","currentCharId","getConfig","setConfig","getDisplayName","updateAvatar","avatarType","newUrl","storageKey","updateCharRemark","newRemark","updateUserName","newName","findStickerUrlByName","customGlobalStickers","charStickers","oldGlobalStickers","oldCharStickers","globalStickers","s","loadFromStorage","charData","savedCharAvatar","getMomentNotificationState","setMomentNotificationState","getLastMomentViewTimestamp","lastView","getSavedCoverPhoto","setCoverPhoto","getSavedSignature","setSignature","signature","getSavedInputPlaceholder","setInputPlaceholder","getPhoneSize","savedSize","setPhoneSize","getFullscreenSize","max","min","setFullscreenSize","clampedSize","getStickerSize","setStickerSize","getLastNotifiedVersion","setLastNotifiedVersion","version","getCurrentDate","getCurrentTime","floor","debugData","status","InputHandler","configManager","onStageAndDisplayEntry","onUpdateFooterButtonsState","dialogManager","handleTransferAccept","result","acceptData","rejectData","handleGiftAction","receiptData","sendTextMessage","messageEntry","sendSticker","stickerName","stickerEntry","sendImage","imageData","imageEntry","sendVoiceMessage","voiceEntry","sendLocation","locationData","locationEntry","sendFile","fileData","fileEntry","sendTransfer","transferData","transferEntry","sendGift","giftData","giftEntry","handleFileUpload","file","startsWith","reader","FileReader","onload","readAsDataURL","handleImageUrl","URL","handleVoiceRecording","mediaDevices","getUserMedia","audio","getTracks","track","stop","handleLocationShare","geolocation","getCurrentPosition","position","latitude","longitude","coords","locationName","address","handleTransferSend","amountStr","handleGiftSend","giftName","giftImage","getStickerList","searchStickers","query","stickers","searchTerm","sticker","clearInput","inputElement","focusInput","focus","getInputText","setInputText","MomentsManager","hasMomentNotification","$momentsFeedList","isInMomentsView","empty","posts","momentPostLogIndices","reduce","index","logIndex","likes","comments","lastViewTimestamp","userInMomentsView","targetPostAbsoluteIndex","targetPost","likerName","l","originalLogIndex","keys","chain","values","post","fromUser","authorName","authorAvatar","$li","momentSequenceId","mediaHtml","interactionsHtml","c","displayTime","formatMomentTime","savedCoverPhoto","dateString","diffMs","diffMins","diffHours","diffDays","month","hasMomentNotifications","updateMomentNotificationIndicator","$optionsBtn","currentLogLength","onEnterMomentsView","savedSignature","createUserMoment","notifyMomentChange","_oldValue","newValue","momentEntry","notifyRecallViaMoments","recallEntry","ThemeEditor","themeManager","onThemeChanged","$modal","checkboxHandlers","Map","setupThemeSelector","themes","getThemes","theme","$themeButton","width","colors","primary","cursor","overflow","$previewEl","top","left","height","background","gradientStart","gradientEnd","$bubblePreview","$themBubble","bubbleThemBg","$meBubble","bubbleMeBg","$nameEl","displayName","color","switchTheme","addCustomThemeSelector","addCustomThemeEditButton","$settingsPanel","$editButton","padding","margin","transition","gap","$icon","$text","openThemeEditor","$themeOptions","after","customThemeData","getCustomThemeData","$customButton","gradient","$iconEl","customThemeJson","customTheme","primaryColor","updateCustomThemeButton","children","eq","last","currentTheme","getCurrentThemeWithAppliedValues","fillThemeEditor","setupCheckboxes","show","closeThemeEditor","hide","cleanupCheckboxes","$nameInput","$darkModeToggle","$singleColorIconsToggle","themeName","colorMappings","phoneFrame","light","ultraLight","deep","textPrimary","textSecondary","bubbleMeText","bubbleThemText","statusBarColor","dynamicIslandColor","borderColor","shadowColor","colorValue","convertToHex","isDarkMode","useSingleColorIcons","setupSingleCheckboxWithJQuery","checkboxId","buttonId","updateCheckboxState","handleClick","set","resetThemeEditor","blueTheme","blue","exportThemeAsJSON","getCurrentThemeFromEditor","wallpaperManager","getWallpaperManager","currentWallpapers","getCurrentWallpaper","home","settings","themeData","exportDate","wallpapers","blob","Blob","createObjectURL","fileName","$a","href","download","click","revokeObjectURL","importTheme","input","createElement","accept","files","endsWith","Error","validateThemeData","applyImportedTheme","readAsText","getValue","getChecked","createCustomTheme","appBgColor","settingsBgColor","settingsCardBgColor","statusBar","dynamicIsland","border","shadow","saveCustomTheme","params","r","g","b","shadowColorRgba","bubbleShadow","lightenDarkenColor","soft","headerBg","phoneFrameGradient","textColor","defaultWallpapers","col","amt","usePound","num","rgbMatch","rgbaMatch","requiredFields","field","requiredColors","applyImportedWallpapers","viewType","wallpaper","setWallpaper","APP_VERSION","THEMES","pink","white","dark","ThemeManager","checkVersion","savedThemeName","THEME_STORAGE_KEY","CUSTOM_THEME_STORAGE_KEY","WallpaperManager","applyTheme","savedVersion","VERSION_STORAGE_KEY","cleanOutdatedData","keysToPreserve","preservedData","getCurrentTheme","root","documentElement","computedStyle","getComputedStyle","actualValues","getPropertyValue","setCurrentThemeName","applyThemeDefaultWallpapers","setProperty","body","classList","lighterColor","darkerColor","shadowRGB","extractRgbComponents","gradientColors","phoneFrameStyle","head","statusLeft","statusRight","settingsView","backgroundColor","card","boxShadow","hexToRgba","oldDynamicStyles","hex","alpha","currentThemeName","builtInWallpapers","customWallpapers","loadCustomWallpapers","migrateOldWallpaperSettings","getAllWallpapers","getBuiltInWallpapers","getCustomWallpapers","addCustomWallpaper","newWallpaper","saveCustomWallpapers","deleteCustomWallpaper","initialLength","w","THEME_WALLPAPER_KEY_PREFIX","themeStorageKey","savedThemeWallpaper","oldStorageKey","WALLPAPER_STORAGE_KEY_PREFIX","savedOldWallpaper","applyWallpaperToElement","defaultThemeWallpaper","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","createWallpaperFromUrl","toLocaleString","createWallpaperFromFile","onerror","createSolidColorWallpaper","normalizedColor","savedWallpapers","CUSTOM_WALLPAPERS_KEY","UIManager","onAddEntry","onRenderEntry","displayAppVersion","checkVersionUpdateNotification","showVersionUpdateNotification","updateEntry","isSystemMessage","updateFooterButtonsState","hasNotifications","$wechatInput","$sendBtn","$plusBtn","hasText","shouldShowSendBtn","togglePanel","panelToShow","$panelContainer","$currentActivePanel","isActive","removeClass","navigateTo","viewName","wechat","moments","setupInputPlaceholder","charDisplayName","savedPlaceholder","$inputElement","setupPhoneSizeAdjustment","defaultBtn","mediumBtn","smallBtn","phoneScreen","applyPhoneSize","setupStickerSizeControl","sizeSlider","sizeInput","smallSizeBtn","mediumSizeBtn","applyStickerSize","newSize","updateStickerSizeButtonState","newSizeStr","buttons","default","medium","small","btn","scrollToBottom","wechatBody","scrollTop","scrollHeight","setupFontSelection","$customFontBtn","$systemFontBtn","savedFont","applyFontSetting","fontType","$customBtn","$systemBtn","applyCustomFont","applySystemFont","isIOSWebView","test","userAgent","isHuaweiWebView","fontStack","checkFontLoaded","then","loaded","loadCustomFont","catch","fontFamily","fonts","ready","fontFace","Array","from","font","family","reject","testElement","fontSize","visibility","appendTo","FontFace","load","loadedFace","setupFullscreenSizeAdjustment","$defaultBtn","$largeBtn","$xlargeBtn","$slider","initializeFullscreenSizeControls","applyFullscreenSize","updateFullscreenSizeButtonState","setupFullscreenListener","handleFullscreenChange","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","currentSize","applyBrowserLikeZoom","resetBrowserZoom","transform","transformOrigin","scale","UIRenderer","lastDisplayedTimeInMinutes","Infinity","renderQueue","isRendering","renderThrottle","wechatBodySelector","$wechatBody","startRenderLoop","processQueue","splice","queueRender","clearChat","animate","renderSystemMessage","addMessageToWeChat","addTimestampToWeChat","addEventLogToWeChat","elementToReplace","who","noticeRow","dataset","recalledText","noticeTextEl","contentEl","toggle","replaceWith","momentsFeedList","li","postId","momentId","formatMomentTimestamp","deleteBtnHtml","indicator","avatarSrc","loadingContainer","messageContent","totalDelay","isNewMessage","messageRow","senderClass","avatarImgHtml","renderVoiceMessage","bubbleContent","renderStickerContent","renderImageContent","renderLocationContent","renderTransferContent","renderFileContent","renderRedEnvelopeContent","renderGiftContent","bubbleClass","bubble","applyBubbleStyles","setupBubbleInteractions","setupUserMessageLongPress","contentContainer","textRevealBox","insertAdjacentHTML","longPressFired","pressTimer","pointerType","contains","stickerUrl","imageUrl","storedImage","sessionStorage","descText","isReceipt","detailsHtml","detailsClass","detailsContent","cardClass","bubbleTypeMap","transfer","gift","transferCard","onTransferAccept","once","giftBubble","giftCard","onGiftAction","isSystemTime","timeText","timeInMinutes","parseTimeToMinutes","t","originalDate","originalTime","eventData","row","timeEl","descEl","chatContainer","systemRow","systemContainer","systemText","postDate","postYear","postMonth","postDay","nowYear","nowMonth","nowDay","yesterday","setDate","yesterdayYear","yesterdayMonth","yesterdayDay","timestampRows","eventLogRows","$row","$timestampText","$eventTimeText","renderFeatureGrid","gridElement","features","callbacks","isDeleteMode","feature","iconHtml","isAddBtn","iconContainer","isDefault","onAddStickers","onToggleDeleteMode","action","stickerLabel","checkboxButton","$messageRow","$messageBubble","$targetElement","addLongPressListener","handleLongPressRecall","setupDoubleClickRecall","timer","startX","startY","onEnd","clientX","clientY","moveX","moveY","abs","isMessageInQueue","handleUserMessageRecall","effect","times","distance","onRecallMessage","clickTimer","clickCount","vibrate","handleDoubleClickRecall","WallpaperSelector","showWallpaperSelector","onApplyWallpaper","modal","cssText","container","tabs","createTabs","createBuiltinWallpaperTab","createSolidColorTab","createCustomWallpaperTab","createUploadTab","createBottomButtons","createTab","tab","tabId","fontWeight","borderBottom","builtinContent","builtinWallpapers","builtinGrid","wallpaperItem","createWallpaperItem","solidContent","solidWallpapers","solidGrid","addColorPicker","customContent","noCustomWallpapers","customGrid","uploadContent","createLocalUploadSection","createUrlUploadSection","colorPickerContainer","colorPickerLabel","colorPicker","colorNameInput","addColorBtn","removeChild","localUploadSection","localUploadTitle","fileInput","uploadBtn","urlUploadSection","urlUploadTitle","urlInput","addUrlBtn","showDeleteButton","preview","deleteBtn","currentWallpaper","parentElement","buttonsContainer","resetBtn","closeBtn","WallpaperController","wallpaperSelector","applyWallpapers","$chatView","$homeScreen","$settingsView","chatWallpaper","homeWallpaper","settingsWallpaper","changeWallpaper","initializeWallpapers","AppController","wallpaperController","aiResponseManager","themeEditor","inputHandler","uiManager","userMessageQueue","getCharData","charAvatarPath","getCharAvatarPath","addBatch","requestAnimationFrame","loadDebugData","EventHandler","EventHandlerClass","bind","stageAndDisplayEntry","renderChatHistory","handleMessageRecall","setUIRenderer","queueIndex","actualIndex","globalIndex","immediate","hasQueuedMessages","views","jQuery","$targetView","currentUrl","showUserProfileDialog","currentAvatarUrl","currentSignature","dialogHtml","newAvatarUrl","newSignature","hasChanges","oldDisplayName","newDisplayName","oldName","updateCoverPhoto","currentCover","newCover","removeFromUserMessageQueue","queueEntry","targetEntry","setupThemeEditorEvents","addTestEntry","clearDebugData","showTestEntryTypes","showDebugInfo","appController","StyleManager","loadedStyles","initializeStyles","isStyleLoaded","styleName","toggleTheme","setCSSVariable","getCSSVariable","setCSSVariables","variables","resetCSSVariables","propertiesToRemove","property","removeProperty","addStyleClass","removeStyleClass","toggleStyleClass","hasStyleClass","stylesLoaded","styleManager","wechatInput","sendBtn","plusBtn","hasPendingNotifications","inputSelector","sendBtnSelector","plusBtnSelector","setupEventListeners","promptForDateTime","defaultText","dateTimeInput","newDate","newTime","parsedDate","$timeElement","formattedTime","dateTimeResult","renderStickerFeatures","renderPlusFeatures","shiftKey","setupClickListeners","currentPlaceholder","newPlaceholder","wechatView","momentData","momentDateTime","timeAdvanceEvent","postEl","closest","actualMomentIndex","indicesToDelete","sort","a","likeEntry","commentEntry","matches","$targetRow","indexToDelete","previewText","mainLogLength","exitFullscreen","requestFullscreen","$plusGrid","PLUS_FEATURES","desc","timeJumpData","loc","$stickerGrid","customStickers","ds","showStickerManager","tabButtons","tabContents","labelInput","previewImg","addStickerBtn","batchTextarea","batchAddBtn","selectAllBtn","deselectAllBtn","deleteSelectedBtn","deleteStickerGrid","targetTab","targetContent","renderDeleteStickerList","src","GLOBAL_STICKER_STORAGE_KEY","existingStickers","newSticker","pairs","newStickers","pair","urlStartIndex","part","updatedStickers","noStickersMsg","stickerItem","stickerImg","alt","checkboxes","checkboxButtons","sortBy","blmxApp","blmxStyleManager"],"sourceRoot":""}