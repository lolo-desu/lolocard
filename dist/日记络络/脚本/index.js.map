{"version":3,"file":"index.js","mappings":"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","sources":["src://tavern_helper_template/src/日记络络/脚本/按钮.ts","src://tavern_helper_template/src/日记络络/脚本/调整世界书全局设置.ts","src://tavern_helper_template/src/日记络络/脚本/提示词模板设置.ts","src://tavern_helper_template/src/日记络络/脚本/性别设置.ts","src://tavern_helper_template/src/日记络络/脚本/选择框.ts","src://tavern_helper_template/src/日记络络/脚本/样式加载.ts","src://tavern_helper_template/src/日记络络/脚本/资源预载.ts","src://tavern_helper_template/src/日记络络/脚本/自动安装插件.ts","src://tavern_helper_template/src/日记络络/脚本/最大化预设上下文长度.ts"],"sourcesContent":["export {};\n\nasync function delete_qr() {\n  const qrs: string[] = JSON.parse(await triggerSlash('/qr-set-list'));\n  const expected_qr = '纯白色的回响';\n  if (qrs.includes(expected_qr)) {\n    triggerSlash(`/qr-set-delete ${expected_qr}`);\n  }\n}\n\nasync function handle_度过() {\n  const data = {\n    晨间: \"先描写结束当前场景的剧情再快速将时间调整到下个晨间\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 1);\\n</UpdateVariable>\",\n    课上: \"先描写结束当前场景的剧情再快速将时间调整到下个课上\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 18);\\n</UpdateVariable>\",\n    午休: \"先描写结束当前场景的剧情再快速将时间调整到下个午休\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 32);\\n</UpdateVariable>\",\n    放学后:\n      \"先描写结束当前场景的剧情再快速将时间调整到下个放学后\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 49);\\n</UpdateVariable>\",\n    夜间: \"先描写结束当前场景的剧情再快速将时间调整到下个夜间\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 66);\\n</UpdateVariable>\",\n    假日: \"先描写结束当前场景的剧情再快速将时间调整到下个假日\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 83);\\n</UpdateVariable>\",\n    第二天:\n      \"先描写结束当前场景的剧情再快速将时间调整到第二天，并调整当前时间阶段变量到接下来故事情节最有意义的时间，下一次响应的时间阶段变量调整没有任何限制\\n<UpdateVariable>\\n_.set('世界.当前时间阶段', 1);\\n</UpdateVariable>\",\n  };\n\n  const time = await triggerSlash(`/buttons labels=${JSON.stringify(Object.keys(data))} 时间来到了...`);\n  if (!_.has(data, time)) {\n    return;\n  }\n\n  await triggerSlash(`/send ${data[time as keyof typeof data]} || /trigger`);\n}\n\nasync function handle_地点() {\n  const data: Record<string, { 旁白: string; 地点: string[] }> = {\n    住宅: { 旁白: '回家！', 地点: ['住所玄关', '住所客厅', '房间'] },\n    学校: {\n      旁白: '去学校吗...',\n      地点: ['上学路上', '学校教学楼正门前', '教室', '学校中庭', '学校外侧楼梯', '学校屋顶'],\n    },\n    城镇与街道: {\n      旁白: '去逛逛呢...',\n      地点: ['城镇街道上', '住宅街', '商店街', '拱廊商店街', '繁华商业街', '城市中的铁路道口'],\n    },\n    商业设施: {\n      旁白: '去约会吗w...',\n      地点: [\n        '便利店内',\n        '书店内',\n        '咖啡厅',\n        '家庭餐厅',\n        '购物中心',\n        '购物中心二层',\n        '美术馆',\n        '地铁站内',\n        '地铁内',\n        '庙会小吃街',\n      ],\n    },\n    户外: {\n      旁白: '锻炼身体...?',\n      地点: ['公园', '公园凉亭', '公园商店亭', '河旁', '海滩'],\n    },\n  };\n\n  const place = await triggerSlash(`/buttons labels=${JSON.stringify(Object.keys(data))} {{user}}将动身前往...`);\n  if (!_.has(data, place)) {\n    return;\n  }\n\n  const { 旁白, 地点 } = data[place];\n  const subplace = await triggerSlash(`/buttons labels=${JSON.stringify(地点)} <small>${旁白}<small>`);\n  if (!地点.includes(subplace)) {\n    return;\n  }\n\n  triggerSlash(\n    `/send <!--于本次响应需要描写结束当前场景的剧情再写出理由前往下一个地点-->[移动] {{user}}前往了${subplace}\\n<UpdateVariable>\\n_.set('世界.下次响应界面选择判断', 0);\\n</UpdateVariable> || /trigger`,\n  );\n}\n\nfunction handle_计数() {\n  console.log('📊计数');\n  triggerSlash(\n    `/ejs 上次发送了：<%- variables.LAST_SEND_TOKENS %> 词符(tokens), 共计 <%- variables.LAST_SEND_CHARS %> 字符。<br/>收到的消息处理后：<%- variables.LAST_RECEIVE_TOKENS %> 词符(tokens), 共计 <%- variables.LAST_RECEIVE_CHARS %> 字符。 | /popup <h4>提示词计数</h4><br>{{pipe}}`,\n  );\n}\n\n$(() => {\n  delete_qr();\n  eventOnButton('🕛度过', handle_度过);\n  eventOnButton('🗺️地点', handle_地点);\n  eventOnButton('📊计数', handle_计数);\n});\n","export {};\n\n$(() => {\n  sync_lorebook_settings();\n});\n\nasync function sync_lorebook_settings() {\n  const EXPECTED_SETTINGS: Partial<LorebookSettings> = {\n    scan_depth: 2,\n    context_percentage: 100,\n    budget_cap: 0,\n    min_activations: 0,\n    max_depth: 0,\n    max_recursion_steps: 0,\n\n    insertion_strategy: 'character_first',\n\n    include_names: false,\n    recursive: true,\n    case_sensitive: false,\n    match_whole_words: false,\n    use_group_scoring: false,\n    overflow_alert: false,\n  };\n  const settings = getLorebookSettings();\n  if (!_.isEqual(_.merge({}, settings, EXPECTED_SETTINGS), settings)) {\n    setLorebookSettings(EXPECTED_SETTINGS);\n  }\n}\n","export {};\n\n$(() => {\n  EjsTemplate.setFeatures({\n    enabled: true,\n    generate_enabled: true,\n    generate_loader_enabled: false,\n    render_enabled: false,\n    render_loader_enabled: false,\n    code_blocks_enabled: false,\n    raw_message_evaluation_enabled: false,\n    filter_message_enabled: false,\n    world_active_enabled: false,\n    autosave_enabled: false,\n    preload_worldinfo_enabled: false,\n    debug_enabled: false,\n    cache_enabled: true,\n  });\n});\n","export {};\n\nconst lorebook_name = '上锁的日记本' as const;\n\nasync function get_gender_option(): Promise<'男' | '女'> {\n  const options = (await getLorebookEntries(lorebook_name))\n    .filter(entry => entry.comment.startsWith('性别设置-') && entry.enabled)\n    .map(entry => entry.comment.replace('性别设置-', ''));\n  if (options.length === 0) {\n    return '男';\n  }\n  return options[0] as '男' | '女';\n}\n\nasync function set_gender_on_message(gender: '男' | '女', message_id: number) {\n  const variables = getVariables({ type: 'message', message_id });\n  _.set(variables, substitudeMacros('stat_data.<user>.性别'), gender);\n  await replaceVariables(variables, { type: 'message', message_id });\n}\n\n$(async () => {\n  eventOn(tavern_events.MESSAGE_SENT, async message_id => {\n    if (message_id === 1) {\n      const gender = await get_gender_option();\n      await set_gender_on_message(gender, 0);\n      await set_gender_on_message(gender, 1);\n    }\n  });\n});\n","export {};\n\nimport default_css from './选择框默认样式.css?raw';\n\nconst lorebook_name = '上锁的日记本' as const;\nconst roleplay_options_tag = '<roleplay_options>' as const;\nconst roleplay_options_regex = /<roleplay_options>\\s*(?:```.*\\n)?([\\s\\S]*?)(?:\\n```)?\\s*<\\/roleplay_options>/im;\n\n//----------------------------------------------------------------------------------------------------------------------\nnamespace option_section {\n  interface Option {\n    input_mode: '直接发送' | '覆盖输入' | '尾附输入' | '自动推进';\n  }\n  const default_option: Option = {\n    input_mode: '直接发送',\n  };\n\n  export let option: Option;\n\n  async function parse_option(): Promise<Option> {\n    const options: Record<string, string> = _.merge(\n      {},\n      ...(await getLorebookEntries(lorebook_name))\n        .filter(entry => entry.comment.startsWith('选择框设置-') && entry.enabled)\n        .map(entry => {\n          const value = entry.comment.replace('选择框设置-', '');\n          return { [value]: entry.content };\n        }),\n    );\n\n    const result = default_option;\n    if (_.has(options, '直接发送')) {\n      result.input_mode = '直接发送';\n    } else if (_.has(options, '覆盖输入')) {\n      result.input_mode = '覆盖输入';\n    } else if (_.has(options, '尾附输入')) {\n      result.input_mode = '尾附输入';\n    }\n    return result;\n  }\n\n  export async function update(): Promise<boolean> {\n    const old_option = option;\n    option = await parse_option();\n    return !_.isEqual(option, old_option);\n  }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\nnamespace render_section {\n  async function divclick($element: JQuery<HTMLDivElement>) {\n    if ($element.parents('.last_mes').length > 0) {\n      const content = $element.find('.roleplay_options_content').text().trim();\n      if (option_section.option.input_mode === '直接发送') {\n        triggerSlash(`/send ${content} || /trigger`);\n      } else if (option_section.option.input_mode === '覆盖输入') {\n        triggerSlash(`/setinput ${content}`);\n      } else if (option_section.option.input_mode === '尾附输入') {\n        const old_content = $('#send_textarea').val();\n        $('#send_textarea')\n          .val([old_content, content].join('\\n') || '')[0]\n          .dispatchEvent(new Event('input', { bubbles: true }));\n      }\n    }\n  }\n\n  let style: string;\n\n  async function extract_style(): Promise<string> {\n    const entries = (await getLorebookEntries(lorebook_name)).filter(\n      entry => entry.comment.startsWith('选择框样式-') && entry.enabled,\n    );\n    if (entries.length === 0) {\n      return `<style>${default_css}</style>`;\n    }\n    return entries[0].content;\n  }\n\n  export async function update(): Promise<boolean> {\n    const old_style = style;\n    style = await extract_style();\n    return !_.isEqual(style, old_style);\n  }\n\n  export function extract_options_element(text: string): JQuery<HTMLDivElement> {\n    const $div = $('<div class=\"roleplay_options\">') as JQuery<HTMLDivElement>;\n    $div.append(style);\n    $div.append(\n      ($('<div class=\"roleplay_options_back\">') as JQuery<HTMLDivElement>).append(\n        [...text.matchAll(/(.+?)[:：]\\s*(.+)/gm)]\n          .map(match => ({\n            title: match[1],\n            content: match[2].replace(/^\\$\\{(.+)\\}$/, '$1').replace(/^「(.+)」$/, '$1'),\n          }))\n          .map(({ title, content }) =>\n            $('<div class=\"roleplay_options_item\" tabindex=\"1\">')\n              .on('click', function (this: HTMLDivElement) {\n                divclick($(this));\n              })\n              .append(`<span class=\"roleplay_options_title\"><strong>${title}</strong></span>`)\n              .append('<hr class=\"roleplay_options_hr\">')\n              .append(`<span class=\"roleplay_options_content\">${content}</span>`),\n          ),\n      ),\n    );\n    return $div;\n  }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\nasync function renderOneMessage(message_id: number) {\n  const message: string = getChatMessages(message_id)[0].message;\n  const match = message.match(roleplay_options_regex);\n  if (!match) {\n    return;\n  }\n  const $roleplay_options_element = render_section.extract_options_element(match[1]);\n\n  const $mes_text = retrieveDisplayedMessage(message_id);\n  const to_render = $mes_text.find(`.roleplay_options, pre:contains(\"${roleplay_options_tag}\")`);\n  if (to_render.length > 0) {\n    to_render.remove();\n    $mes_text.append($roleplay_options_element);\n  }\n}\n\nasync function renderAllMessage() {\n  $('#chat')\n    .children(\".mes[is_user='false'][is_system='false']\")\n    .each((_index, node) => {\n      renderOneMessage(Number(node.getAttribute('mesid')));\n    });\n}\n\n$(async () => {\n  await errorCatched(option_section.update)();\n  await errorCatched(render_section.update)();\n  await renderAllMessage();\n  eventOn(tavern_events.CHAT_CHANGED, errorCatched(renderAllMessage));\n  eventOn(tavern_events.CHARACTER_MESSAGE_RENDERED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_UPDATED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_SWIPED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_DELETED, () => setTimeout(errorCatched(renderAllMessage), 1000));\n  eventOn(\n    tavern_events.WORLDINFO_UPDATED,\n    errorCatched(async lorebook => {\n      if (lorebook !== lorebook_name) {\n        return;\n      }\n      if (!(await option_section.update()) && !(await render_section.update())) {\n        return;\n      }\n      await renderAllMessage();\n    }),\n  );\n});\n","export {};\n\nfunction get_style(): string {\n  return _.get(getVariables({ type: 'script', script_id: getScriptId() }), '样式加载', '');\n}\n\nfunction extract_style_node(style: string) {\n  return $('<style>').attr('id', `script_custom_style-${getScriptId()}`).text(style);\n}\n\nfunction reappend_styles(node: JQuery) {\n  const $head = $('head');\n  $head.find(`#script_custom_style-${getScriptId()}`).remove();\n  $head.append(node);\n}\n\n$(() => {\n  const style = get_style();\n  const style_node = extract_style_node(style);\n  reappend_styles(style_node);\n});\n","export {};\n\nfunction get_preloads(): string[] {\n  return _.get(getVariables({ type: 'script', script_id: getScriptId() }), '资源预载', []);\n}\n\nfunction extract_preloads_node(preloads: string[]) {\n  return $('<div>')\n    .attr('id', `script_preload-${getScriptId()}`)\n    .append(preloads.map(preload => $('<link>').attr('rel', 'preload').attr('href', preload).attr('as', 'image')));\n}\n\nfunction reappend_preloads(node: JQuery) {\n  const $head = $('head');\n  $head.find(`#script_preload-${getScriptId()}`).remove();\n  $head.append(node);\n}\n\n$(() => {\n  const preloads = get_preloads();\n  const preloads_node = extract_preloads_node(preloads);\n  reappend_preloads(preloads_node);\n});\n","export {};\n\nasync function get_third_party_extension_names(): Promise<string[]> {\n  try {\n    const response = await fetch('/api/extensions/discover');\n\n    if (response.ok) {\n      const extensions: Array<{ type: 'lcoal' | 'global' | 'system'; name: string }> = await response.json();\n      return extensions\n        .filter(extension => extension.type !== 'system')\n        .map(extension => extension.name.replace('third-party/', ''));\n    } else {\n      return [];\n    }\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n}\n\nasync function install_extension(url: string): Promise<boolean> {\n  const request = await fetch('/api/extensions/install', {\n    method: 'POST',\n    headers: SillyTavern.getRequestHeaders(),\n    body: JSON.stringify({\n      url,\n    }),\n  });\n  if (!request.ok) {\n    const text = await request.text();\n    toastr.warning(`${text || request.statusText}`, '扩展安装失败');\n    console.error('扩展安装失败', request.status, request.statusText, text);\n    return false;\n  }\n\n  const response = await request.json();\n  toastr.success(\n    `已成功安装由 '${response.author}' 编写的 '${response.display_name}' (版本 ${response.version})!`,\n    '扩展安装成功',\n  );\n  console.debug(`已成功将 '${response.display_name}' 安装到 ${response.extensionPath}`);\n  return true;\n}\n\n$(() => {\n  setTimeout(async () => {\n    const extensions = Object.entries<string>(\n      _.get(getVariables({ type: 'script', script_id: getScriptId() }), '自动安装插件', {}) as Record<string, string>,\n    )\n      .map(([name, url]) => {\n        let tag = url.replace(/(\\.git|\\/)$/, '');\n        tag = tag.substring(tag.lastIndexOf('/') + 1);\n        return {\n          [tag]: {\n            name,\n            url,\n          },\n        };\n      })\n      .reduce((previous, current) => _.defaults(previous, current), {});\n\n    const current_extensions = await get_third_party_extension_names();\n    const uninstall_extension_tags = _.difference(Object.keys(extensions), current_extensions);\n    if (uninstall_extension_tags.length === 0) {\n      return;\n    }\n\n    if (\n      !(await SillyTavern.callGenericPopup(\n        '以下需要的插件尚未安装, 是否安装?<br>' +\n          uninstall_extension_tags.map(tag => `- ${extensions[tag].name}`).join('<br>'),\n        SillyTavern.POPUP_TYPE.CONFIRM,\n        '',\n        { leftAlign: true },\n      ))\n    ) {\n      return;\n    }\n\n    await Promise.allSettled(uninstall_extension_tags.map(tag => install_extension(extensions[tag].url)));\n    setTimeout(() => triggerSlash('/reload-page'), 3000);\n  }, 10000);\n});\n","export {};\n\nfunction unlock_token_length() {\n  const MAX_CONTEXT = 2000000;\n  const settings = SillyTavern.chatCompletionSettings;\n  if (settings.max_context_unlocked === true && settings.openai_max_context === MAX_CONTEXT) {\n    return;\n  }\n\n  $('#oai_max_context_unlocked').prop('checked', true).trigger('input');\n  $('#openai_max_context_counter').val(MAX_CONTEXT);\n  $('#openai_max_context').val(MAX_CONTEXT).trigger('input');\n}\nconst unlock_token_length_debounced = _.debounce(unlock_token_length, 1000);\n\n$(() => {\n  eventOn(tavern_events.SETTINGS_UPDATED, unlock_token_length_debounced);\n});\n"],"names":["async","data","time","triggerSlash","JSON","stringify","Object","keys","_","has","place","subplace","includes","console","log","$","expected_qr","parse","delete_qr","eventOnButton","EXPECTED_SETTINGS","scan_depth","context_percentage","budget_cap","min_activations","max_depth","max_recursion_steps","insertion_strategy","include_names","recursive","case_sensitive","match_whole_words","use_group_scoring","overflow_alert","settings","getLorebookSettings","isEqual","merge","setLorebookSettings","sync_lorebook_settings","EjsTemplate","setFeatures","enabled","generate_enabled","generate_loader_enabled","render_enabled","render_loader_enabled","code_blocks_enabled","raw_message_evaluation_enabled","filter_message_enabled","world_active_enabled","autosave_enabled","preload_worldinfo_enabled","debug_enabled","cache_enabled","set_gender_on_message","gender","message_id","variables","getVariables","type","set","substitudeMacros","replaceVariables","eventOn","tavern_events","MESSAGE_SENT","options","getLorebookEntries","filter","entry","comment","startsWith","map","replace","length","get_gender_option","roleplay_options_regex","option_section","render_section","renderOneMessage","match","getChatMessages","message","$roleplay_options_element","extract_options_element","$mes_text","retrieveDisplayedMessage","to_render","find","remove","append","renderAllMessage","children","each","_index","node","Number","getAttribute","default_option","input_mode","update","old_option","option","value","content","result","parse_option","style","old_style","entries","extract_style","text","$div","matchAll","title","on","$element","parents","trim","old_content","val","join","dispatchEvent","Event","bubbles","divclick","this","errorCatched","CHAT_CHANGED","CHARACTER_MESSAGE_RENDERED","MESSAGE_UPDATED","MESSAGE_SWIPED","MESSAGE_DELETED","setTimeout","WORLDINFO_UPDATED","lorebook","style_node","attr","getScriptId","extract_style_node","get","script_id","$head","reappend_styles","preloads_node","preloads","preload","extract_preloads_node","reappend_preloads","extensions","name","url","tag","substring","lastIndexOf","reduce","previous","current","defaults","current_extensions","response","fetch","ok","json","extension","err","error","get_third_party_extension_names","uninstall_extension_tags","difference","SillyTavern","callGenericPopup","POPUP_TYPE","CONFIRM","leftAlign","Promise","allSettled","request","method","headers","getRequestHeaders","body","toastr","warning","statusText","status","success","author","display_name","version","debug","extensionPath","install_extension","unlock_token_length_debounced","debounce","MAX_CONTEXT","chatCompletionSettings","max_context_unlocked","openai_max_context","prop","trigger","SETTINGS_UPDATED"],"sourceRoot":""}