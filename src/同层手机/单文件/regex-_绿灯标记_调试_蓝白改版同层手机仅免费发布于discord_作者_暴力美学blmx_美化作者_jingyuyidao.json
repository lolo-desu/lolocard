{
    "id": "32414a65-2087-490f-9738-5fa25d210ead",
    "scriptName": "（绿灯标记/调试）蓝白改版同层手机仅免费发布于discord。作者：暴力美学BLMX 美化：jingyuyidao",
    "findRegex": "===BLMX_LOG_BEGIN===\\s*([\\s\\S]*?)\\s*===BLMX_LOG_END===",
    "replaceString": "```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<!-- 此同层手机免费发布于discord的尾巴镇社区和旅程社区，链接https://discord.com/channels/1379304008157499423/1388180976873766973，https://discord.com/channels/1291925535324110879/1388182155707814009 -->\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <title>暴力美学BLMX同层手机</title>\n    <!-- 此同层手机免费发布于discord的尾巴镇社区和旅程社区，链接https://discord.com/channels/1379304008157499423/1388180976873766973，https://discord.com/channels/1291925535324110879/1388182155707814009 -->\n    <style>\n        /* CSS样式从这里开始，用于定义页面的外观 */\n        \n        /* --- 外部资源引入 --- */\n        /* @import: 引入外部的CSS文件 */\n        @font-face {\n            font-family: 'MyCustomFont';\n            src: url('https://files.catbox.moe/er4wsg.ttf');\n        }\n        /* 自定义字体 */\n        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&display=swap');\n        /* 上面这行：从谷歌字体库引入\"思源黑体\"，让页面的中文字体更好看。wght后面的数字代表不同的字重（粗细）。 */\n        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css');\n        /* 上面这行：引入Font Awesome图标库，这样我们就可以在页面上使用各种图标（比如返回箭头、加号等）。 */\n        /* --- 响应式根字体大小设置 --- */\n        /* 这个设置是为了让页面在不同尺寸的手机屏幕上看起来比例一致 */\n        html {\n        \tfont-size: 16px;\n            /* 为大屏幕设备（比如电脑或大屏手机）设置一个基础字体大小，16像素。 */\n        }\n        \n        @media (max-width: 360px) {\n            /* @media: 这是一个媒体查询，当满足条件时（这里是屏幕宽度小于或等于360px），应用内部的样式。 */\n        \thtml {\n        \t\tfont-size: calc(100vw / 360 * 16);\n                /* 在小屏幕上，根据屏幕宽度动态计算字体大小，确保布局不会乱。 */\n        \t}\n        }\n        \n        /* --- 全局颜色和尺寸变量定义 --- */\n        /* :root 选择器匹配文档的根元素，在这里定义全局变量，方便统一修改和维护。 */\n        /* 修改这里的数值，可以改变整个页面中所有使用到这个变量的地方。 */\n        :root {\n        \t--text-color: #ffffff;\n                     /* 应用名称白色 */\n        \t--primary-blue: #72adf3;\n                   /* 主蓝色 - 用于按钮、图标 */\n        \t--light-blue: #A8CBEB;\n                     /* 浅蓝色 - 用于我的气泡 */\n        \t--ultra-light-blue: #E8F4FD;\n               /* 极浅蓝 - 用于背景 */\n        \t--blue-gradient-start: #accef2;\n            /* 渐变起始色 */\n        \t--blue-gradient-end: #98c2f5;\n              /* 渐变结束色 */\n        \t--soft-blue: #B8D4F0;\n                      /* 柔和蓝 - 用于输入框等 */\n        \t--deep-blue: #2C5282;\n                      /* 深蓝 - 用于重要元素 */\n            /* 原有变量重新定义为蓝色主题 */\n        \t--wechat-green-icon: var(--primary-blue);\n        \t--wechat-green-bubble: var(--light-blue);\n        \t--wechat-bg: var(--ultra-light-blue);\n        \t--link-color: var(--primary-blue);\n        \t--footer-height: 2.8125rem;\n        \t--panel-height: 14.0625rem;\n            /* 新增蓝白主题专用变量 */\n        \t--bubble-shadow: 0 2px 8px rgba(74, 144, 226, 0.15);\n        \t--text-primary: rgb(139, 162, 186);\n          /* 主文字颜色 */\n        \t--text-secondary: #64748B;\n                 /* 次要文字颜色 */\n        \t--border-color: #CBD5E1;\n                   /* 边框颜色 */\n        \t--header-bg: linear-gradient(135deg, #F8FAFF 0%, #EEF4FF 100%);\n            /* 新增：气泡背景变量（用于小三角颜色） */\n            --wechat-bubble-them-bg: #FFFFFF;  /* 对方气泡背景色 */\n            --wechat-bubble-me-bg: var(--light-blue);  /* 我的气泡背景色 */\n        }\n        /* --- 基础与主屏幕样式 --- */\n        /* 这里定义了整个页面的基础样式和模拟手机的框架 */\n        body {\n        \tmargin: 0;\n        \tpadding: 0.25rem;\n        \tmin-height: 100vh;\n        \tdisplay: flex;\n        \tjustify-content: center;\n        \talign-items: center;\n        \tbox-sizing: border-box;\n        \tbackground: transparent;\n        \tfont-family: 'MyCustomFont', sans-serif;\n        }\n        \n        .phone-frame {\n            /* 这个类定义了手机外壳的样式 */\n        \tmax-width: 360px;\n        \twidth: 100%;\n        \tpadding: 0.6rem;\n        \tbackground: #b4d0fa;\n        \tborder-radius: 3.125rem;\n        \tposition: relative;\n        \tbox-shadow: /* 主要深度阴影 - 模拟手机厚度 */0 15px 20px rgba(74, 144, 226, 0.25),\n            \n            /* 中层阴影 - 增加层次感 */\n            0 8px 20px rgba(74, 144, 226, 0.15),\n            \n            /* 贴近阴影 - 清晰边缘 */\n            0 3px 8px rgba(0, 0, 0, 0.1),\n            \n            /* 手机边缘高光 - 模拟金属质感 */\n            inset 0 1px 0 rgba(255, 255, 255, 0.5),\n            inset 0 -1px 0 rgba(255, 255, 255, 0.2),\n            \n            /* 底部柔和反射 */\n            0 5px rgba(152, 194, 245, 0.08);\n        /* 平滑过渡 */\n        \ttransition: box-shadow 0.3s ease;\n        }\n        .phone-frame::before {\n            content: '';\n            position: absolute;\n            top: -2px;\n            left: -2px;\n            right: -2px;\n            bottom: -2px;\n            border-radius: 3.125rem;\n            background: linear-gradient(45deg, #4a95ed, #98c2f5, #accef2, #4a95ed);\n            background-size: 400% 400%;\n            animation: gradientFlow 3s ease infinite;\n            z-index: -1;\n        }\n        \n        @keyframes gradientFlow {\n            0% { background-position: 0% 50%; }\n            50% { background-position: 100% 50%; }\n            100% { background-position: 0% 50%; }\n        }\n\n        .phone-screen {\n            /* 这个类定义了手机屏幕的样式 */\n        \theight: 48.75rem; /* Adjusted height from new version */\n        \tborder-radius: 2.8rem;\n        \toverflow: hidden;\n        \tposition: relative;\n        \tdisplay: flex;\n        \tflex-direction: column;\n        \tbackground-color: var(--wechat-bg);\n        \tbox-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.08),\n            inset 0 0 15px rgba(0, 0, 0, 0.03);\n        }\n        \n        .phone-screen::before {\n        \tcontent: '';\n        \tposition: absolute;\n        \ttop: 0;\n        \tleft: 0;\n        \tright: 0;\n        \tbottom: 0;\n        \tborder-radius: 2.25rem;\n        \tbox-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),\n                inset 0 -1px 0 rgba(0, 0, 0, 0.1),\n                inset 1px 0 0 rgba(255, 255, 255, 0.1),\n                inset -1px 0 0 rgba(0, 0, 0, 0.1);\n        \tpointer-events: none;\n        \tz-index: 1000;\n        }\n        \n        .dynamic-island {\n            /* 这个类定义了屏幕顶部的\"灵动岛\"样式 */\n        \tposition: absolute;\n        \ttop: 0.625rem;\n        \tleft: 50%;\n        \ttransform: translateX(-50%);\n        \twidth: 8.4375rem;\n        \theight: 2rem;\n        \tbackground: #a0c4f4;\n        \tborder-radius: 1rem;\n        \tz-index: 100;\n        }\n        /* 添加到 CSS 部分 */\n        .phone-status-bar {\n            position: absolute;\n            top: 0.625rem;\n            left: 0;\n            right: 0;\n            height: 2rem;\n            z-index: 102;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 0 1.5rem;\n            pointer-events: none;\n        }\n        \n        .status-left {\n            display: flex;\n            align-items: center;\n            gap: 0.4rem;\n            color: #428af2;\n            font-size: 0.95em;\n            font-weight: 600;\n        }\n        \n        .status-right {\n            display: flex;\n            align-items: center;\n            gap: 0.35rem;\n            color: #428af2;\n            font-size: 0.9em;\n            font-weight: 600;\n        }\n        \n        .moon-icon {\n            font-size: 0.8em;\n            opacity: 0.9;\n        }\n        \n        .signal-bars, .wifi-icon, .battery-icon {\n            font-size: 0.85em;\n        }\n        \n        /* 修改现有的隐藏发送触发器位置 */\n        #hidden-send-trigger {\n            position: absolute;\n            top: 0.625rem; /* 与状态栏对齐 */\n            right: 1rem;   /* 在信号图标下方，不贴边 */\n            width: 80px;   /* 覆盖信号、wifi、电量区域 */\n            height: 2rem;\n            z-index: 103;  /* 在状态栏之上 */\n            cursor: pointer;\n        }\n        \n        /* 修改现有的删除模式触发器位置 */\n        #delete-mode-trigger {\n            position: absolute;\n            top: 0.625rem; /* 与状态栏对齐 */\n            left: 1rem;    /* 在时间月亮图标下方，不贴边 */\n            width: 60px;   /* 覆盖时间和月亮区域 */\n            height: 2rem;\n            z-index: 103;  /* 在状态栏之上 */\n            cursor: pointer;\n        }\n        \n        /* --- 删除模式样式（适配蓝白主题） --- */\n        #wechat-view.delete-mode .wechat-body {\n            padding-left: 25px;  /* 为删除按钮留出空间 */\n            padding-right: 25px;\n        }\n        \n        #wechat-view.delete-mode .message-row,\n        #wechat-view.delete-mode .timestamp-row,\n        #wechat-view.delete-mode .event-log-row {\n            cursor: pointer;\n            position: relative;\n        }\n        \n        /* 删除按钮样式 - 适配蓝白主题 */\n        #wechat-view.delete-mode [data-log-index]::before {\n            content: '×'; /* 使用数学乘号，更圆润 */\n            position: absolute;\n            left: -22px;\n            top: 50%;\n            transform: translateY(-50%);\n            background: linear-gradient(135deg, #96c5fa 0%, #70acff 100%);\n            color: white;\n            border-radius: 50%;\n            width: 16px;\n            height: 16px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 12px;\n            font-weight: normal;\n            box-shadow: 0 2px 6px rgba(71, 145, 255, 0.3);\n            transition: all 0.2s ease;\n            line-height: 1;\n            text-align: center;\n            font-family: Arial, sans-serif;\n        }\n        \n        /* 我的消息删除按钮在右侧 */\n        #wechat-view.delete-mode .message-row.me[data-log-index]::before {\n            left: auto;\n            right: -22px;\n        }\n        \n        /* 鼠标悬停效果 */\n        #wechat-view.delete-mode [data-log-index]:hover::before {\n            transform: translateY(-50%) scale(1.1);\n            box-shadow: 0 4px 8px rgba(71, 145, 255, 0.4);\n        }\n        /* --- 表情包批量删除功能（适配蓝白主题） --- */\n        .feature-item .sticker-checkbox {\n            position: absolute;\n            top: 2px;\n            right: 2px;\n            width: 1rem;\n            height: 1rem;\n            accent-color: var(--primary-blue);\n            cursor: pointer;\n            border-radius: 3px;\n            transition: all 0.2s ease;\n            display: none; /* Only show in delete mode via JS */\n        }\n        \n        /* 增强表情包删除模式的视觉效果 */\n        .feature-item:has(.sticker-checkbox:checked) .feature-icon {\n            border: 2px solid var(--primary-blue);\n            box-shadow: 0 0 0 2px rgba(74, 149, 237, 0.2);\n            transform: scale(0.95);\n        }\n        .message-row .message-bubble.sticker-bubble img {\n        \tborder-radius: 1.2rem;\n        }\n        \n        /* --- APP视图相关样式 --- */\n        .app-view {\n        \tposition: absolute;\n        \ttop: 0;\n        \tleft: 0;\n        \tright: 0;\n        \tbottom: 0;\n        \tz-index: 60;\n            border-radius: 2.25rem;\n        \tvisibility: hidden;\n        \topacity: 0;\n        \ttransition: opacity 0.3s ease, visibility 0.3s ease;\n        \tdisplay: flex;\n        \tflex-direction: column;\n            backface-visibility: hidden;\n        }\n        \n        .app-view.active {\n        \tvisibility: visible;\n        \topacity: 1;\n        \tz-index: 80;\n        }\n        \n        .app-screen {\n        \tpadding: 3.75rem 1rem 1.375rem 1rem;\n        \tflex-grow: 1;\n        \tbackground-image: url('https://files.catbox.moe/bxym1j.png');\n        \tbackground-size: cover;\n        \tbackground-position: center;\n        }\n        \n        .app-grid {\n        \tdisplay: grid;\n        \tgrid-template-columns: repeat(4, 1fr);\n        \tgap: 1rem;\n        }\n        \n        .app-icon {\n        \tdisplay: flex;\n        \tflex-direction: column;\n        \talign-items: center;\n        \ttext-align: center;\n        \ttext-decoration: none;\n        \tcursor: pointer;\n        }\n        \n        .app-icon .icon-image {\n        \twidth: 4.0625rem;\n        \theight: 4.0625rem;\n        \tbackground-color: var(--primary-blue);\n        \tborder-radius: 22.5%;\n        \tmargin-bottom: 0.4375rem;\n        \tbackground-size: cover;\n        \tbackground-position: center;\n        \tdisplay: flex;\n        \talign-items: center;\n        \tjustify-content: center;\n        \tfont-size: 2.2em;\n        \ttransition: transform 0.2s ease;\n        }\n        \n        .app-icon:hover .icon-image {\n        \ttransform: scale(1.05);\n        }\n        \n        .app-icon .app-name {\n        \tcolor: var(--text-color);\n        \tfont-size: 0.75em;\n        \tfont-weight: 400;\n        \ttext-shadow: 0 0.0625rem 0.125rem rgba(0,0,0,0.5);\n        }\n        \n        .icon-wechat, .icon-settings {\n        \tbackground: linear-gradient(135deg, var(--blue-gradient-start) 0%, var(--blue-gradient-end) 100%);\n        \tcolor: white;\n        \tbox-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);\n        }\n        \n        /* --- 设置页面样式 --- */\n        #settings-view {\n        \tbackground-color: #F2F2F7;\n        }\n        \n        .settings-header {\n        \tflex-shrink: 0;\n        \tdisplay: flex;\n        \tjustify-content: space-between;\n        \talign-items: center;\n        \tpadding: 0.5rem 0.75rem;\n        \tbackground: var(--header-bg);\n        \tborder-bottom: 1px solid var(--border-color);\n        \tpadding-top: 2.8125rem;\n        \tposition: relative;\n        \tz-index: 10;\n        }\n        \n        .settings-header .back-btn {\n        \tfont-size: 1.2em;\n        \tcolor: var(--primary-blue);\n        \tcursor: pointer;\n        }\n        \n        .settings-header .title {\n        \tfont-weight: 600;\n        \tcolor: var(--text-primary);\n        \tfont-size: 1em;\n        \tposition: absolute;\n        \tleft: 50%;\n        \ttransform: translateX(-50%);\n        }\n        \n        .settings-body {\n        \tflex-grow: 1;\n        \tpadding: 1.25rem;\n        \toverflow-y: auto;\n        }\n        \n        .settings-card {\n        \tbackground-color: #fff;\n        \tborder-radius: 0.75rem;\n        \tpadding: 1rem;\n        \tbox-shadow: 0 2px 8px rgba(0,0,0,0.05);\n        }\n        \n        .settings-card p {\n        \tfont-size: 0.9em;\n        \tline-height: 1.6;\n        \tcolor: var(--text-primary);\n        \tmargin: 0 0 1rem 0;\n        }\n        \n        .settings-card p:last-child {\n        \tmargin-bottom: 0;\n        }\n        \n        .settings-card .highlight {\n        \tcolor: #E6A23C;\n        \tfont-weight: bold;\n        }\n        \n        .settings-card a {\n        \tcolor: var(--primary-blue);\n        }\n        \n        .settings-card a:hover {\n        \ttext-decoration: underline;\n        }\n        \n        /* --- 聊天界面样式 --- */\n        #wechat-view {\n            /* 使用新的背景图 */\n        \tbackground-image: url('https://files.catbox.moe/bxym1j.png');\n        \tbackground-size: cover;\n        \tbackground-position: center;\n        \tbackground-repeat: no-repeat;\n        }\n        \n        /* --- 标题栏美化 --- */\n        .wechat-header {\n        \tflex-shrink: 0;\n        \tdisplay: flex;\n        \tjustify-content: space-between;\n        \talign-items: center;\n        \tpadding: 0.5rem 0.75rem;\n        \tbackground: var(--header-bg);\n        \tborder-bottom: 1px solid var(--border-color);\n        \tpadding-top: 2.8125rem;\n        \tposition: relative;\n        \tz-index: 10;\n        }\n        \n        .wechat-header .back-btn,\n        .wechat-header .options-btn,\n        .moments-header .header-action {\n        \tfont-size: 1.2em;\n        \tcolor: var(--primary-blue);\n        \tcursor: pointer;\n        \ttransition: color 0.2s ease;\n        }\n        \n        .wechat-header .back-btn:hover,\n        .wechat-header .options-btn:hover {\n        \tcolor: var(--deep-blue);\n        }\n        \n        /* 角色名称 */\n        .wechat-header .contact-name {\n        \tfont-weight: 600;\n        \tbackground: #66a4fb;\n        \t-webkit-background-clip: text;\n        \t-webkit-text-fill-color: transparent;\n        \tbackground-clip: text;\n        \tfont-size: 1em;\n        \tcursor: pointer;\n        \tleft: 50%;\n        }\n        \n        .wechat-body {\n        \tflex: 1 1 auto;\n        \toverflow-y: auto;\n        \tpadding: 0.9375rem 0.5rem;\n\t\t\toverflow-x: hidden;\n        }\n\n        .message-row.new-message {\n            animation: messageSlideIn 0.5s cubic-bezier(0.22, 0.61, 0.36, 1);\n        }\n\n        .message-row {\n            display: flex;\n            margin-bottom: 1.125rem;\n            align-items: flex-start;\n        }\n\n        @keyframes messageSlideIn {\n            from {\n                opacity: 0;\n                transform: translateY(25px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n        \n        /* --- 新增：“正在输入”指示器样式 --- */\n        .typing-indicator {\n            display: flex;\n            margin-bottom: 1.125rem;\n            align-items: flex-start;\n        }\n\n        .typing-indicator .message-avatar {\n            margin-right: 0.625rem;\n            width: 2.25rem;\n            height: 2.25rem;\n            border-radius: 50%;\n            flex-shrink: 0;\n        }\n\n        .typing-indicator .message-bubble {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 0.75rem 1rem;\n            background: linear-gradient(135deg, #FFFFFF 0%, #F8FAFF 100%);\n            color: var(--text-primary);\n            border: 1px solid var(--border-color);\n            border-bottom-left-radius: 0.4rem;\n            box-shadow: var(--bubble-shadow);\n        }\n\n        .typing-dot {\n            display: inline-block;\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background-color: var(--text-secondary);\n            margin: 0 2px;\n            animation: typing-bounce 1.4s infinite ease-in-out both;\n        }\n        .typing-dot:nth-child(1) { animation-delay: -0.32s; }\n        .typing-dot:nth-child(2) { animation-delay: -0.16s; }\n        .typing-dot:nth-child(3) { animation-delay: 0s; }\n\n        @keyframes typing-bounce {\n            0%, 80%, 100% {\n                transform: scale(0);\n            }\n            40% {\n                transform: scale(1.0);\n            }\n        }\n        /* --- “正在输入”样式结束 --- */\n\n\n        .message-row.me {\n        \tjustify-content: flex-end;\n        }\n        \n        .timestamp-row {\n        \ttext-align: center;\n        \tmargin: 0.5rem 0;\n        }\n        \n        /* --- 时间戳美化 --- */\n        .timestamp-text {\n        \tdisplay: inline-block;\n        \tbackground: linear-gradient(135deg, var(--soft-blue) 0%, var(--light-blue) 100%);\n        \tcolor: #FFFFFF;\n        \tfont-size: 0.7em;\n        \tpadding: 0.3rem 0.8rem;\n        \tborder-radius: 1rem;\n        \tfont-weight: 500;\n        \tbox-shadow: 0 2px 6px rgba(74, 144, 226, 0.2);\n        }\n        \n        /* --- 消息撤回提示样式 --- */\n        .recall-notice-container {\n        \tdisplay: inline-flex;\n        \tflex-direction: column;\n        \talign-items: center;\n        }\n        \n        .recall-notice-text {\n        \tbackground: linear-gradient(135deg, var(--soft-blue) 0%, var(--light-blue) 100%);\n        \tcolor: #FFFFFF;\n        \tfont-size: 0.7em;\n        \tpadding: 0.3rem 0.8rem;\n        \tborder-radius: 1rem;\n        \tcursor: pointer;\n        \ttransition: all 0.2s ease;\n        }\n        \n        .recall-notice-text:hover {\n        \ttransform: translateY(-1px);\n        \tbox-shadow: 0 4px 8px rgba(74, 144, 226, 0.3);\n        }\n        \n        .recall-content {\n        \tcolor: #888;\n        \tfont-size: 0.75em;\n        \tpadding: 0;\n        \tmax-height: 0;\n        \toverflow: hidden;\n        \ttransition: max-height 0.3s ease-out, padding 0.3s ease-out;\n        }\n        \n        .recall-content.expanded {\n        \tmax-height: 6.25rem;\n        \tpadding: 0.3125rem 0 0 0;\n        }\n        \n        .message-avatar {\n        \twidth: 2.25rem;\n        \theight: 2.25rem;\n        \tborder-radius: 50%; /* 圆形头像 */\n        \tflex-shrink: 0;\n        \tobject-fit: cover;\n        \tbackground-color: #ccc;\n        \tcursor: pointer;\n        }\n        \n        .message-row.them .message-avatar {\n        \tmargin-right: 0.625rem;\n        }\n        \n        .message-row.me .message-avatar {\n        \tmargin-left: 0.625rem;\n        }\n        \n        /* --- 消息气泡完全重新设计 --- */\n        .message-bubble {\n        \tposition: relative;\n        \tpadding: 0.75rem 1rem;\n        \tborder-radius: 1.2rem;\n        \tmax-width: 65%;\n        \tfont-size: 0.9em;\n        \tline-height: 1.4;\n        \tword-wrap: break-word;\n        \tuser-select: none;\n        \tbox-shadow: var(--bubble-shadow);\n        \ttransition: all 0.2s ease;\n        }\n        .message-bubble img {\n            max-width: 10rem;\n            max-height: 10rem;\n            display: block;\n            border-radius: 0.5rem;\n        }\n        \n        /* 对方的气泡 - 白色主题 */\n        .message-row.them .message-bubble {\n        \tbackground: linear-gradient(135deg, #FFFFFF 0%, #F8FAFF 100%);\n        \tcolor: var(--text-primary);\n        \tborder: 1px solid var(--border-color);\n        \tborder-bottom-left-radius: 0.4rem;\n        }\n        \n        /* 我的气泡 - 蓝色渐变 */\n        .message-row.me .message-bubble {\n        \tbackground: linear-gradient(135deg, var(--blue-gradient-start) 0%, var(--blue-gradient-end) 100%);\n        \tcolor: #FFFFFF;\n        \tborder-bottom-right-radius: 0.4rem;\n        \tbox-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);\n        }\n        \n        /* 移除原有小三角 */\n        .message-bubble::after {\n        \tdisplay: none;\n        }\n        \n        /* --- 特殊消息样式（隐藏默认气泡背景） --- */\n        .message-row .message-bubble.sticker-bubble,\n        .message-row .message-bubble.image-desc-bubble,\n        .message-row .message-bubble.image-url-bubble,\n        .message-row .message-bubble.location-bubble,\n        .message-row .message-bubble.transfer-bubble,\n        .message-row .message-bubble.file-bubble,\n        .message-row .message-bubble.gift-bubble {\n        \tcontent: none;\n        \tbackground: transparent !important;\n        \tpadding: 0;\n        \tborder: none;\n        \tbox-shadow: none;\n        }\n        \n        .message-row .message-bubble.location-bubble,\n        .message-row .message-bubble.transfer-bubble,\n        .message-row .message-bubble.file-bubble {\n        \twidth: 12.5rem;\n        \tmax-width: 12.5rem;\n        }\n        \n        /* --- 剧情时间日志样式 --- */\n        .event-log-row {\n        \ttext-align: center;\n        \tmargin: 0.5rem 0;\n        }\n        \n        .event-log-container {\n        \tdisplay: inline-flex;\n        \tflex-direction: column;\n        \talign-items: center;\n        }\n        \n        .event-time-text {\n        \tbackground: linear-gradient(135deg, var(--soft-blue) 0%, var(--light-blue) 100%);\n        \tcolor: #FFFFFF;\n        \tfont-weight: 500;\n        \tbox-shadow: 0 2px 6px rgba(74, 144, 226, 0.2);\n        \tdisplay: inline-flex;\n        \talign-items: center;\n        \tjustify-content: center;\n        \tfont-size: 0.75em;\n        \tpadding: 0.1875rem 0.4375rem;\n        \tborder-radius: 0.25rem;\n        }\n        \n        .event-time-text.has-desc {\n        \tcursor: pointer;\n        }\n        \n        .event-description {\n        \tcolor: #888;\n        \tfont-size: 0.75em;\n        \tpadding: 0;\n        \tmax-height: 0;\n        \toverflow: hidden;\n        \ttransition: max-height 0.3s ease-out, padding 0.3s ease-out;\n        }\n        \n        .event-description.expanded {\n        \tmax-height: 6.25rem;\n        \tpadding: 0.3125rem 0 0 0;\n        }\n        \n        /* --- 语音消息样式 --- */\n        .message-bubble.voice-bubble {\n        \tdisplay: flex;\n        \talign-items: center;\n        \tcursor: pointer;\n        \tmin-width: 5rem;\n        \tpadding: 0.75rem 1rem;\n        }\n        \n        .message-row.them .message-bubble.voice-bubble {\n        \tbackground: linear-gradient(135deg, #FFFFFF 0%, #F8FAFF 100%) !important;\n        \tborder: 1px solid var(--border-color) !important;\n        }\n        \n        .message-row.me .message-bubble.voice-bubble {\n        \tbackground: linear-gradient(135deg, var(--blue-gradient-start) 0%, var(--blue-gradient-end) 100%) !important;\n        }\n        \n        .voice-bubble .voice-icon {\n        \tfont-size: 1.1em;\n        \tmargin: 0 0.5rem;\n        }\n        \n        .message-row.them .voice-bubble .voice-icon {\n        \tcolor: var(--primary-blue);\n        \ttransform: rotate(90deg);\n        }\n        \n        .message-row.me .voice-bubble .voice-icon {\n        \tcolor: #FFFFFF;\n        \ttransform: rotate(270deg);\n        }\n        \n        .voice-text-content {\n        \tdisplay: none;\n        \tbackground-color: white;\n        \tpadding: 0.5rem 0.625rem;\n        \tborder-radius: 0.3125rem;\n        \tborder: 0.0625rem solid #E5E5E5;\n        \tmax-width: 65%;\n        \tfont-size: 0.9em;\n        \tline-height: 1.4;\n        \tcolor: var(--text-primary);\n        \tword-wrap: break-word;\n        \tuser-select: text;\n        \tmargin-top: 0.3125rem;\n        \tbox-shadow: 0 0.0625rem 0.125rem rgba(0,0,0,0.1);\n        }\n        \n        .message-row.voice-text-visible .voice-text-content {\n        \tdisplay: block;\n        }\n        \n        .message-content-container {\n        \tdisplay: flex;\n        \tflex-direction: column;\n        }\n        \n        .message-row.me .message-content-container {\n        \talign-items: flex-end;\n        }\n        \n        .message-row.them .message-content-container {\n        \talign-items: flex-start;\n        }\n        \n        /* --- 图片描述卡片样式 --- */\n        .image-desc-content {\n            width: 8.4375rem;\n            height: 8.4375rem;\n            backdrop-filter: blur(10px);\n            background-color: rgba(255, 255, 255, 0.5);\n            border: 0.0625rem solid rgba(255, 255, 255, 0.2);\n            border-radius: 1.2rem;\n            padding: 0.5rem;\n            color: var(--text-primary);\n            font-weight: normal; \n            overflow-y: auto;\n            box-sizing: border-box;\n            font-size: 0.9em;\n            display: flex;\n            flex-direction: column;\n            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.1),\n                0 2px 6px rgba(74, 144, 226, 0.2);\n            transition: all 0.2s ease;\n        }\n\n        .text-wrapper {\n            margin: auto;\n            text-align: center;\n            line-height: 1.4;\n            word-wrap: break-word;\n            max-height: 100%;\n        }\n        \n        /* --- 位置消息样式 --- */\n        .location-bubble .location-card {\n        \tbackground-color: #fff;\n        \tborder-radius: 1.2rem;\n        \toverflow: hidden;\n            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.15),\n                        0 2px 6px rgba(74, 144, 226, 0.1);\n            transition: all 0.2s ease;\n        }\n        \n        .location-content {\n        \tpadding: 0.5rem;\n        }\n        \n        .location-content .location-title {\n        \tfont-size: 1em;\n        \tcolor: var(--text-primary);\n        \tfont-weight: 500;\n        \toverflow: hidden;\n        \ttext-overflow: ellipsis;\n        \twhite-space: nowrap;\n        }\n        \n        .location-content .location-subtitle {\n        \tfont-size: 0.75em;\n        \tcolor: #888;\n        }\n        \n        .location-map-placeholder {\n            height: 5.625rem;\n            position: relative;\n            background-color: #f0f8ff;\n            overflow: hidden;\n        }\n\n        .location-map-placeholder::before {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-image: repeating-linear-gradient(45deg, #d2e1f2 0, #d2e1f2 4px, transparent 4px, transparent 8px),\n                              repeating-linear-gradient(135deg, #9bdaf7 0, #9bdaf7 3px, transparent 3px, transparent 7px),\n                              linear-gradient(to bottom, #bad8fb 0%, #bad8fb 100%),\n                              linear-gradient(to bottom, #d0daf4 0%, #d0daf4 100%),\n                              linear-gradient(to right, #bad8fb 0%, #bad8fb 100%),\n                              linear-gradient(to right, #d0daf4 0%, #dbe8f3 100%),\n                              radial-gradient(ellipse at 20% 85%, #daf9f3 30%, transparent 31%),\n                              radial-gradient(ellipse at 80% 30%, #d0ecf4 40%, transparent 41%);\n            background-size: 40% 35%, 30% 30%, 10px 100%, 6px 100%, 100% 10px, 100% 6px, 100% 100%, 100% 100%;\n            background-position: -5% 110%, 100% 0%, 70% center, 70% center, center 35%, center 35%, 0 0, 0 0;\n            background-repeat: no-repeat;\n        }\n\n        .location-map-placeholder::after {\n            content: '\\f3c5';\n            font-family: 'Font Awesome 6 Free';\n            font-weight: 900;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 1.8em;\n            color: var(--primary-blue);\n            filter: \n                drop-shadow(0 0 8px rgba(114, 173, 243, 0.6))\n                drop-shadow(0 0 4px rgba(114, 173, 243, 0.4))\n                drop-shadow(0 2px 4px rgba(255, 255, 255, 0.8));\n            z-index: 10;\n            animation: pinPulse 2s ease-in-out infinite;\n        }\n        \n        @keyframes pinPulse {\n            0%, 100% {\n                transform: translate(-50%, -50%) scale(1);\n                filter: \n                    drop-shadow(0 0 8px rgba(114, 173, 243, 0.6))\n                    drop-shadow(0 0 4px rgba(114, 173, 243, 0.4))\n                    drop-shadow(0 2px 4px rgba(255, 255, 255, 0.8));\n            }\n            50% {\n                transform: translate(-50%, -50%) scale(1.1);\n                filter: \n                    drop-shadow(0 0 12px rgba(114, 173, 243, 0.8))\n                    drop-shadow(0 0 6px rgba(114, 173, 243, 0.6))\n                    drop-shadow(0 3px 6px rgba(255, 255, 255, 0.9));\n            }\n        }\n        \n        .location-map-placeholder:hover::before {\n            opacity: 0.9;\n            transition: opacity 0.3s ease;\n        }\n\n        /* --- 转账消息样式 --- */\n        .transfer-bubble .transfer-card {\n        \tborder-radius: 1.2rem;\n        \toverflow: hidden;\n        \twidth: 100%;\n        }\n        \n        .transfer-card.transfer-initial {\n            background: linear-gradient(135deg, #7dbafd 0%, #91c8fe 50%, #b5d9f6 100%);\n            box-shadow: 0 4px 15px rgba(123, 179, 240, 0.3),\n                        0 2px 8px rgba(152, 198, 243, 0.2),\n                        inset 0 1px 0 rgba(255, 255, 255, 0.2);\n            color: #fff;\n        }\n        \n        .transfer-card.them {\n            cursor: pointer;\n            transition: all 0.2s ease;\n        }\n        \n        .transfer-card.them:hover {\n            transform: translateY(-1px);\n            box-shadow: 0 6px 12px rgba(80, 144, 235, 0.4);\n        }\n        \n        .transfer-card.transfer-receipt {\n            background: linear-gradient(135deg, #d0e0fc 0%, #c9e0fc 30%, #c9e0fc 45%, #d4e1fc 100%);\n            color: #ffffff;\n            box-shadow: 0 4px 16px rgba(120, 160, 240, 0.25),\n                      0 2px 6px rgba(170, 210, 255, 0.15),\n                      inset 0 1px 1px rgba(255, 255, 255, 0.2);\n        }\n\n        .transfer-initial .transfer-footer {\n            color: rgba(255, 255, 255, 0.85);\n            border-top: 1px solid rgba(255, 255, 255, 0.2);\n            background: rgba(255, 255, 255, 0.05);\n        }\n        \n        .transfer-receipt .transfer-footer {\n            color: #f5faff;\n            border-top: 1px solid rgba(255, 255, 255, 0.2);\n            background: rgba(255, 255, 255, 0.05);\n        }\n        \n        .transfer-content {\n        \tdisplay: flex;\n        \talign-items: center;\n        \tpadding: 0.75rem;\n        }\n        \n        .transfer-icon-image {\n        \twidth: 2.25rem;\n        \theight: 2.25rem;\n        \tflex-shrink: 0;\n        }\n        \n        .transfer-details {\n        \tmargin-left: 0.75rem;\n        \tflex-grow: 1;\n        }\n        \n        .transfer-details .amount {\n        \tfont-size: 1.1em;\n        \tfont-weight: bold;\n        }\n        \n        .transfer-details .note, .transfer-details .status-text {\n        \tfont-size: 0.8em;\n        \topacity: 0.9;\n        }\n        \n        .transfer-footer {\n        \tfont-size: 0.75em;\n        \tpadding: 0.1875rem 0.75rem;\n        }\n        \n        \n        /* --- 文件消息样式 --- */\n        .file-bubble .file-card {\n        \tbackground-color: #fff;\n        \tborder-radius: 1.2rem;\n        \toverflow: hidden;\n        \twidth: 100%;\n            box-shadow: 0 4px 12px rgba(74, 144, 226, 0.15),\n                        0 2px 6px rgba(74, 144, 226, 0.1);\n            transition: all 0.2s ease;\n        }\n        \n        .file-content {\n        \tdisplay: flex;\n        \talign-items: center;\n        \tpadding: 0.75rem;\n        \tgap: 0.75rem;\n        }\n        \n        .file-icon {\n        \tfont-size: 2.5em;\n        \tcolor: var(--primary-blue);\n        \tflex-shrink: 0;\n        }\n        \n        .file-details .file-name {\n        \tfont-size: 0.9em;\n        \tcolor: var(--text-primary);\n        \tfont-weight: 500;\n        \tword-break: break-all;\n        }\n        \n        .file-footer {\n        \tbackground-color: #f7fafc;\n        \tcolor: #888;\n        \tfont-size: 0.75em;\n        \tpadding: 0.1875rem 0.75rem;\n        \tborder-top: 0.0625rem solid #EAEAEA;\n        }\n        \n        /* --- 底部输入区域样式 --- */\n        .wechat-input-area {\n        \tflex-shrink: 0;\n        \tbackground: var(--header-bg);\n        \tposition: relative;\n        \tz-index: 10;\n        }\n        .wechat-footer .footer-icon {\n        \tfont-size: 1.4em;\n        \tcolor: #72adf3!important;\n        \tcursor: pointer;\n        \ttransition: all 0.2s ease;\n        \tpadding: 0.3rem;\n        \tborder-radius: 0.5rem;\n        \tflex-shrink: 0;\n        }\n\n        .wechat-footer .footer-icon:hover {\n        \tbackground: var(--ultra-light-blue);\n        \ttransform: scale(1.1);\n        }\n        .wechat-footer {\n        \tdisplay: flex;\n        \talign-items: center;\n        \tgap: 0.5rem;\n        \tpadding: 0.75rem;\n        \tborder-top: 1px solid var(--border-color);\n        \tbox-sizing: border-box;\n        }\n        \n        .wechat-footer .text-input {\n        \tflex-grow: 1;\n        \tborder: 1px solid var(--border-color);\n        \tbackground: #FFFFFF;\n        \tpadding: 0.75rem 1rem;\n        \tborder-radius: 1.5rem;\n        \tfont-size: 0.9em;\n        \ttransition: all 0.2s ease;\n        \tcolor: var(--text-primary);\n        \tmin-width: 0;\n        }\n        \n        .wechat-footer .text-input:focus {\n        \toutline: none;\n        \tborder-color: var(--primary-blue);\n        \tbox-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);\n        }\n        \n        .wechat-footer .text-input::placeholder {\n        \tcolor: var(--text-secondary);\n        }\n        \n        .wechat-footer .send-btn {\n        \tbackground: var(--primary-blue);\n        \tcolor: white;\n        \tborder: none;\n        \twidth: 2rem;\n        \theight: 2rem;\n        \tborder-radius: 50%;\n        \tfont-size: 1em;\n        \tcursor: pointer;\n        \tbox-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);\n        \ttransition: all 0.2s ease;\n        \tdisplay: flex;\n        \talign-items: center;\n        \tjustify-content: center;\n        \tpadding: 0;\n        \tline-height: 1;\n            flex-shrink: 0; /* 新增：防止按钮被压缩 */\n        }\n        \n        .wechat-footer .send-btn:hover {\n        \ttransform: translateY(-2px);\n        \tbox-shadow: 0 6px 16px rgba(74, 144, 226, 0.4);\n        }\n        /* --- \"+\"号面板样式 --- */\n        .panel-container {\n        \theight: 0;\n        \toverflow: hidden;\n        \ttransition: height 0.3s ease;\n        }\n        \n        .panel-container.active {\n        \theight: var(--panel-height);\n        }\n        \n        .panel-view {\n        \tdisplay: none;\n        \theight: 100%;\n        \toverflow-y: auto;\n        \tpadding: 1.125rem 0.75rem;\n        \tbox-sizing: border-box;\n            position: relative;\n        }\n        \n        .panel-view.active {\n        \tdisplay: block;\n        }\n        \n        .features-grid {\n        \tdisplay: grid;\n        \tgrid-template-columns: repeat(4, 1fr);\n        \tgap: 1.125rem;\n        }\n        \n        .feature-item {\n        \tdisplay: flex;\n        \tflex-direction: column;\n        \talign-items: center;\n        \tcursor: pointer;\n            position: relative;\n        }\n        \n        .feature-icon {\n        \twidth: 3.375rem;\n        \theight: 3.375rem;\n        \tbackground-color: #fff;\n        \tborder-radius: 0.5rem;\n        \tdisplay: flex;\n        \talign-items: center;\n        \tjustify-content: center;\n        \tborder: 1px solid var(--border-color);\n        \tbox-shadow: 0 2px 8px rgba(74, 144, 226, 0.1);\n        \ttransition: all 0.2s ease;\n        \tmargin-bottom: 0.4375rem;\n        }\n        \n        .feature-item:hover .feature-icon {\n        \ttransform: translateY(-2px);\n        \tbox-shadow: 0 4px 12px rgba(74, 144, 226, 0.2);\n        \tborder-color: var(--primary-blue);\n        }\n        \n        .feature-icon img,\n        .feature-icon .fas {\n        \tmax-width: 100%;\n        \tmax-height: 100%;\n        \tborder-radius: 0.5rem;\n        \tobject-fit: cover;\n        \tfont-size: 1.8em;\n        }\n\n        .feature-icon .fa-plus,\n        .feature-icon .fa-trash-alt {\n            color: #72adf3 !important;\n        }\n        \n        .feature-label {\n        \tfont-size: 0.75em;\n        \tcolor: #888;\n        }\n        \n        .message-row .message-bubble.gift-bubble {\n            padding: 0;\n            width: 12.5rem;\n            max-width: 12.5rem;\n            overflow: hidden;\n            background: linear-gradient(135deg, #8691f8 0%, #8babfa 50%, #8bcef8 100%);\n            box-shadow: 0 4px 15px rgba(176, 166, 220, 0.4), \n                        0 2px 8px rgba(143, 168, 230, 0.3),  \n                        inset 0 1px 0 rgba(255, 255, 255, 0.2);\n            border-radius: 1.2rem;\n            animation: giftGlow 3s ease-in-out infinite alternate;\n        }\n        \n        @keyframes giftGlow {\n            from { box-shadow: 0 4px 15px rgba(176, 166, 220, 0.3), 0 2px 8px rgba(143, 168, 230, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.2); }\n            to { box-shadow: 0 6px 20px rgba(176, 166, 220, 0.5), 0 3px 12px rgba(143, 168, 230, 0.4), inset 0 1px 0 rgba(255, 255, 255, 0.3); }\n        }\n        \n        .gift-content {\n            padding: 0.75rem;\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            color: #FFFFFF;\n        }\n        \n        .gift-icon {\n            font-size: 2.2em;\n            color: #F0F8FF;\n            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));\n        }\n        \n        .gift-footer {\n            color: rgba(255, 255, 255, 0.9);\n            font-size: 0.75em;\n            padding: 0.1875rem 0.75rem;\n            border-top: 1px solid rgba(255, 255, 255, 0.15);\n            background: rgba(255, 255, 255, 0.05);\n        }\n        .gift-details .gift-price, .gift-details .gift-status-text { font-size: 0.8em; opacity: 0.9; }\n        \n        /* --- 朋友圈界面样式 --- */\n        #moments-view {\n        \tbackground: linear-gradient(180deg, #FFFFFF 0%, var(--ultra-light-blue) 100%);\n        \tcolor: var(--text-primary);\n        }\n        \n        .moments-header {\n        \tdisplay: flex;\n        \tjustify-content: space-between;\n        \talign-items: center;\n        \tpadding: 0.5rem 0.75rem;\n        \tbackground: var(--header-bg);\n        \tborder-bottom: 1px solid var(--border-color);\n        \tpadding-top: 2.8125rem;\n        \tflex-shrink: 0;\n        \tposition: relative;\n        }\n        \n        .moments-header .title {\n        \tfont-weight: 600;\n        \tfont-size: 1em;\n        \tcolor: var(--primary-blue);\n        \tposition: absolute;\n        \tleft: 50%;\n        \ttransform: translateX(-50%);\n        }\n        \n        .moments-header .back-btn {\n        \tcolor: var(--primary-blue);\n        \tfont-size: 1.2em;\n        \tcursor: pointer;\n        \tz-index: 1;\n        }\n        \n        .moments-header .header-action {\n        \tcolor: var(--primary-blue);\n        \tfont-size: 1.2em;\n        \tcursor: pointer;\n        \tz-index: 1;\n        }\n        \n        .moments-body {\n        \tflex-grow: 1;\n        \toverflow-y: auto;\n        \tbackground-color: #fff;\n        }\n        \n        .moments-feed-header {\n        \tposition: relative;\n        \tmargin-bottom: 1.5625rem;\n        }\n        \n        .moments-cover-photo {\n        \twidth: 100%;\n        \theight: 14.0625rem;\n        \tobject-fit: cover;\n        \tdisplay: block;\n        \tcursor: pointer;\n        }\n        \n        .moments-user-info {\n        \tposition: absolute;\n        \tbottom: -0.75rem;\n        \tright: 0.75rem;\n        \tdisplay: flex;\n        \talign-items: flex-end;\n        \tgap: 0.75rem;\n        }\n        \n        .moments-user-name {\n        \tcolor: white;\n        \tfont-size: 1.1em;\n        \tfont-weight: bold;\n        \ttext-shadow: 0 0.0625rem 0.1875rem rgba(0,0,0,0.5);\n        \tposition: relative;\n        \tbottom: 1.375rem;\n        \tcursor: pointer;\n        }\n        \n        .moments-user-avatar {\n        \twidth: 3.9375rem;\n        \theight: 3.9375rem;\n        \tborder-radius: 0.5rem;\n        \tobject-fit: cover;\n        \tcursor: pointer;\n        }\n        \n        .user-signature {\n        \tposition: absolute;\n        \ttop: 4.25rem;\n        \tright: 0;\n        \twidth: 14.0625rem;\n        \ttext-align: right;\n        \tword-wrap: break-word;\n        \tline-height: 1.4;\n        \tcolor: #8a8a8a;\n        \tfont-size: 0.8em;\n        }\n        \n        .moments-feed-list {\n        \tpadding: 0 0.75rem;\n        \tlist-style: none;\n        }\n        \n        .moment-post {\n        \tdisplay: flex;\n        \tgap: 0.625rem;\n        \tpadding: 1.125rem 0;\n        \tborder-bottom: 0.0625rem solid #F0F0F0;\n        }\n        \n        .moment-post:last-child {\n        \tborder-bottom: none;\n        }\n        \n        .post-author-avatar {\n        \twidth: 2.375rem;\n        \theight: 2.375rem;\n        \tborder-radius: 50%;\n        \tflex-shrink: 0;\n        \tobject-fit: cover;\n        \tcursor: pointer;\n        }\n        \n        .post-details {\n        \tdisplay: flex;\n        \tflex-direction: column;\n        \tgap: 0.4375rem;\n        \tflex-grow: 1;\n        }\n        \n        .post-author-name,\n        .likes-section .liker-name,\n        .comment-author,\n        .delete-moment-btn,\n        .post-meta .comment-button {\n        \tcolor: var(--primary-blue);\n        }\n        \n        .post-content {\n        \tfont-size: 0.9em;\n        \tline-height: 1.5;\n        \twhite-space: pre-wrap;\n        \tword-wrap: break-word;\n        \tcolor: var(--text-primary);\n        }\n        \n        .post-media {\n        \tmargin-top: 0.25rem;\n        }\n        \n        .post-media-image {\n        \twidth: 10rem;\n        \theight: 10rem;\n        \tobject-fit: cover;\n        \tborder-radius: 0.25rem;\n        }\n        \n        .post-media .image-desc-content {\n            background-color: rgba(240, 250, 255, 0.8);\n            border: 1px solid rgba(74, 149, 237, 0.1);\n            width: 10rem;\n            height: 10rem;\n            font-size: 0.9em;\n            color: var(--text-primary);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            text-align: center;\n            font-weight: normal;\n            padding: 0.8rem;\n            box-sizing: border-box;\n        }\n        \n        .post-meta {\n        \tdisplay: flex;\n        \tjustify-content: space-between;\n        \talign-items: center;\n        \tcolor: #888;\n        \tfont-size: 0.8em;\n        }\n        \n        .post-meta-left {\n        \tdisplay: flex;\n        \talign-items: center;\n        }\n        \n        .post-actions {\n        \tdisplay: flex;\n        \talign-items: center;\n        \tgap: 0.75rem;\n        }\n        \n        .post-meta .comment-button {\n        \tbackground: #F7F7F7;\n        \tborder-radius: 0.1875rem;\n        \tpadding: 0.125rem 0.4375rem;\n        \tcursor: pointer;\n        \tfont-size: 1.1em;\n        }\n        \n        .post-interactions {\n            background: #F8FAFF;\n            border-radius: 0.5rem;\n            margin-top: 0.5rem;\n            font-size: 0.85em;\n            position: relative;\n            border: 1px solid rgba(74, 149, 237, 0.08);\n        }\n        \n        .post-interactions::before {\n            content: '';\n            position: absolute;\n            top: -0.375rem;\n            left: 0.9375rem;\n            width: 0;\n            height: 0;\n            border-left: 0.375rem solid transparent;\n            border-right: 0.375rem solid transparent;\n            border-bottom: 0.375rem solid #F8FAFF;\n        }\n        \n        .likes-section {\n        \tpadding: 0.4375rem 0.625rem;\n            background: rgba(248, 250, 255, 0.6);\n        \tdisplay: flex;\n        \talign-items: center;\n        \tgap: 0.4375rem;\n        \tflex-wrap: wrap;\n        }\n        \n        .likes-section .fa-heart {\n        \tcolor: var(--primary-blue);\n        }\n        \n        .comments-section {\n        \tpadding: 0 0.625rem 0.4375rem;\n        \tlist-style: none;\n        \tborder-top: 0.0625rem solid #EAEAEA;\n        }\n        \n        .likes-section + .comments-section {\n        \tmargin-top: -0.0625rem;\n        }\n        \n        .comments-section li {\n        \tpadding: 0.1875rem 0;\n        }\n        \n        /* =====================================================\n          滚动条隐藏 - 保持滚动功能但隐藏滚动条\n          ===================================================== */\n        \n        .wechat-body, .moments-body, .settings-body, .panel-view, .app-screen,\n        .file-content, .message-bubble, .voice-text-content, .image-desc-content,\n        .event-description, .recall-content {\n        \t-ms-overflow-style: none;  /* IE and Edge */\n        \tscrollbar-width: none;     /* Firefox */\n        }\n        \n        .wechat-body::-webkit-scrollbar,\n        .moments-body::-webkit-scrollbar,\n        .settings-body::-webkit-scrollbar,\n        .panel-view::-webkit-scrollbar,\n        .app-screen::-webkit-scrollbar,\n        .file-content::-webkit-scrollbar,\n        .message-bubble::-webkit-scrollbar,\n        .voice-text-content::-webkit-scrollbar,\n        .image-desc-content::-webkit-scrollbar,\n        .event-description::-webkit-scrollbar,\n        .recall-content::-webkit-scrollbar {\n        \tdisplay: none;\n        }\n    </style>\n</head>\n<body>\n<div class=\"phone-frame\">\n    <div class=\"phone-screen\">\n        <div id=\"delete-mode-trigger\"></div>\n        <div id=\"hidden-send-trigger\"></div>\n        \n        <!-- Status Bar (Added from original theme) -->\n        <div class=\"phone-status-bar\"> \n            <div class=\"status-left\"> \n                <span id=\"current-time\">00:00</span> \n                <i class=\"fas fa-moon moon-icon\"></i> \n            </div> \n            <div class=\"status-right\"> \n                <div class=\"signal-bars\"> \n                    <i class=\"fas fa-signal\"></i> \n                </div> \n                <i class=\"fas fa-wifi wifi-icon\"></i> \n                <i class=\"fas fa-battery-three-quarters battery-icon\"></i> \n            </div> \n        </div>\n\n        <div class=\"dynamic-island\"></div>\n        \n        <!-- 主屏幕 -->\n        <div class=\"app-view app-screen active\" id=\"app-homescreen\">\n            <div class=\"app-grid\">\n                <div class=\"app-icon\" id=\"app-wechat\">\n                    <div class=\"icon-image icon-wechat\"><i class=\"fab fa-weixin\"></i></div>\n                    <span class=\"app-name\">WeChat</span>\n                </div>\n                <div class=\"app-icon\" id=\"app-settings\">\n                    <div class=\"icon-image icon-settings\"><i class=\"fas fa-cog\"></i></div>\n                    <span class=\"app-name\">设置</span>\n                </div>\n            </div>\n        </div>\n\n        <!-- 微信视图 -->\n        <div id=\"wechat-view\" class=\"app-view\">\n            <header class=\"wechat-header\">\n                <i class=\"fas fa-chevron-left back-btn\" id=\"wechat-back-btn-dummy\"></i>\n                <span class=\"contact-name\" id=\"contact-name-header\">Character</span>\n                <i class=\"fas fa-ellipsis-h options-btn\" id=\"wechat-options-btn\"></i>\n            </header>\n            <main class=\"wechat-body\"></main>\n            <div class=\"wechat-input-area\">\n                <footer class=\"wechat-footer\">\n                    <i id=\"microphone-btn\" class=\"fas fa-microphone footer-icon\"></i>\n                    <input type=\"text\" id=\"wechat-input-field\" class=\"text-input\" placeholder=\"发送信息\" autocomplete=\"off\" autocapitalize=\"off\" spellcheck=\"false\">\n                    <i id=\"smile-btn\" class=\"far fa-smile footer-icon\"></i>\n                    <i id=\"plus-btn\" class=\"fas fa-plus-circle footer-icon\"></i>\n                    <button id=\"send-btn\" class=\"send-btn\"><i class=\"fas fa-paper-plane\"></i></button>\n                </footer>\n                <div id=\"panel-container\" class=\"panel-container\">\n                    <div id=\"sticker-panel\" class=\"panel-view\"><div id=\"sticker-grid\" class=\"features-grid\"></div></div>\n                    <div id=\"char-sticker-panel\" class=\"panel-view\"><div id=\"char-sticker-grid\" class=\"features-grid\"></div></div>\n                    <div id=\"plus-panel\" class=\"panel-view\"><div id=\"plus-grid\" class=\"features-grid\"></div></div>\n                </div>\n            </div>\n        </div>\n\n        <!-- 朋友圈视图 -->\n        <div id=\"moments-view\" class=\"app-view\">\n            <header class=\"moments-header\">\n                <i class=\"fas fa-chevron-left header-action\" id=\"moments-back-btn\"></i>\n                <span class=\"title\">朋友圈</span>\n                <i class=\"fas fa-camera header-action\" id=\"post-moment-btn\"></i>\n            </header>\n            <main class=\"moments-body\">\n                <div class=\"moments-feed-header\">\n                    <img src=\"\" id=\"moments-cover-photo\" class=\"moments-cover-photo\" alt=\"Cover Photo\">\n                    <div class=\"moments-user-info\">\n                        <span class=\"moments-user-name\" id=\"moments-user-name\">User</span>\n                        <img src=\"\" id=\"moments-user-avatar\" class=\"moments-user-avatar\" alt=\"User Avatar\">\n                        <div class=\"user-signature\" id=\"user-signature-display\"></div>\n                    </div>\n                </div>\n                <ul class=\"moments-feed-list\" id=\"moments-feed-list\"></ul>\n            </main>\n        </div>\n\n        <!-- 设置视图 -->\n        <div id=\"settings-view\" class=\"app-view\">\n            <header class=\"settings-header\">\n                <i class=\"fas fa-chevron-left back-btn\" id=\"settings-back-btn\"></i>\n                <span class=\"title\">关于</span>\n            </header>\n            <main class=\"settings-body\">\n                <div class=\"settings-card\">\n                    <p>本同层手机<span class=\"highlight\">【免费】</span>发布于discord的尾巴镇社区和旅程社区，作者：<span class=\"highlight\">暴力美学BLMX</span>，点击即可跳转到社区 <a href=\"https://discord.com/channels/1379304008157499423/1388180976873766973\" target=\"_blank\">https://discord.com/...</a>。<a href=\"https://discord.com/channels/1291925535324110879/1388182155707814009\" target=\"_blank\">https://discord.com/...</a>。</p>\n                    <p>如果你是通过任何<span class=\"highlight\">付费途径</span>获取，请带着购买记录来找作者，<span class=\"highlight\">重重有赏</span>。抵制任何窃取创作者劳动成果的商业化行为，从你我做起TvT</p>\n                    <p><span class=\"highlight\">禁止</span>在酒馆以外的平台使用！<span class=\"highlight\">禁止</span>未经授权的二传二改！<span class=\"highlight\">禁止</span>任何行为的倒卖和商业化行为！</p>\n                    <p>后续更新内容也会发在discord的尾巴镇社区和旅程社区，有问题欢迎来提问哦！有想玩的功能、想提出的建议也可以在帖子下评论。</p>\n                </div>\n                <div class=\"settings-card\" style=\"margin-top: 1rem; padding: 0;\">\n                    <ul style=\"list-style: none; margin: 0; padding: 0;\">\n                        <li style=\"border-bottom: 1px solid #EFEFEF;\">\n                            <a href=\"#\" id=\"change-chat-wallpaper-btn\" style=\"text-decoration: none; color: #8ba2ba; display: flex; justify-content: space-between; align-items: center; padding: 1rem;\">\n                                <span>更换聊天壁纸</span>\n                                <i class=\"fas fa-chevron-right\"></i>\n                            </a>\n                        </li>\n                        <li style=\"border-bottom: 1px solid #EFEFEF;\">\n                             <a href=\"#\" id=\"change-home-wallpaper-btn\" style=\"text-decoration: none; color: #8ba2ba; display: flex; justify-content: space-between; align-items: center; padding: 1rem;\">\n                                <span>更换主屏幕壁纸</span>\n                                <i class=\"fas fa-chevron-right\"></i>\n                            </a>\n                        </li>\n                        <li>\n                             <a href=\"#\" id=\"change-settings-wallpaper-btn\" style=\"text-decoration: none; color: #8ba2ba; display: flex; justify-content: space-between; align-items: center; padding: 1rem;\">\n                                <span>更换设置壁纸</span>\n                                <i class=\"fas fa-chevron-right\"></i>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                \n                <div class=\"settings-card\" style=\"margin-top: 1rem; padding: 1rem;\">\n                    <p style=\"font-weight: 500; margin: 0 0 0.75rem 0.25rem; color: var(--text-primary); font-size: 0.9em;\">调试工具</p>\n                    <ul style=\"list-style: none; margin: 0; padding: 0; display: flex; flex-direction: column; gap: 0.5rem;\">\n                        <li>\n                            <a href=\"#\" id=\"show-last-ai-response-btn\" style=\"text-decoration: none; display: block; text-align: center; background-color: #eef4fd; padding: 0.6rem 1rem; border-radius: 0.6rem; color: var(--text-primary); font-weight: 500;\">\n                                <span>显示AI最新原始回复</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"#\" id=\"show-last-sent-prompt-btn\" style=\"text-decoration: none; display: block; text-align: center; background-color: #eef4fd; padding: 0.6rem 1rem; border-radius: 0.6rem; color: var(--text-primary); font-weight: 500;\">\n                                <span>显示发送给AI的提示</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n\n            </main>\n        </div>\n\n    </div>\n</div>\n<input type=\"file\" id=\"image-upload-input\" accept=\"image/*\" style=\"display: none;\">\n<script>\nclass BLMX_Protocol {\n    // --- Unified log for chat and moments, preserving chronological order ---\n    constructor(tavernHelperBridge, charId) {\n        this.logEntries = []; // Unified log for all entries\n        this.messageId = null;\n        this.charId = charId;\n        this.LOG_START_TAG = \"===BLMX_LOG_BEGIN===\";\n        this.LOG_END_TAG = \"===BLMX_LOG_END===\";\n        this.bridge = tavernHelperBridge;\n    }\n\n    async initialize() {\n        console.log(\"[BLMX] Initializing and scanning for chat history...\");\n        const lastMessageId = await this.bridge.getLastMessageId();\n\n        if (lastMessageId === null) {\n            console.warn(\"[BLMX] No messages found. Starting fresh at message ID 0.\");\n            this.messageId = 0;\n            this.logEntries = [];\n            await this.persistLogToStorage();\n            return true;\n        }\n\n        let latestUiMessage = null;\n        const previousUiMessages = [];\n\n        for (let i = lastMessageId; i >= 0; i--) {\n            try {\n                const msg = (await this.bridge.getChatMessages(i))[0];\n                if (msg && msg.message && msg.message.includes(this.LOG_START_TAG)) {\n                    if (!latestUiMessage) {\n                        latestUiMessage = { id: i, content: msg.message };\n                    } else {\n                        previousUiMessages.push({ id: i, content: msg.message });\n                    }\n                }\n            } catch (error) {\n                // Ignore errors, likely message not found\n            }\n        }\n\n        if (!latestUiMessage) {\n            console.log(\"[BLMX] No UI log found. Creating a new one in the latest message.\");\n            this.messageId = lastMessageId;\n            this.logEntries = [];\n            await this.persistLogToStorage();\n            return true;\n        }\n\n        console.log(`[BLMX] Found latest UI log in message ${latestUiMessage.id}. Consolidating...`);\n        this.messageId = latestUiMessage.id;\n        let consolidatedLogParts = [];\n\n        const latestLogStartIndex = latestUiMessage.content.indexOf(this.LOG_START_TAG);\n        const latestLogEndIndex = latestUiMessage.content.indexOf(this.LOG_END_TAG);\n        if (latestLogStartIndex !== -1 && latestLogEndIndex !== -1) {\n            const logPart = latestUiMessage.content.slice(latestLogStartIndex + this.LOG_START_TAG.length, latestLogEndIndex).trim();\n            if(logPart) consolidatedLogParts.push(logPart);\n        }\n\n        for (const prevMsg of previousUiMessages) {\n            const prevLogStartIndex = prevMsg.content.indexOf(this.LOG_START_TAG);\n            const prevLogEndIndex = prevMsg.content.indexOf(this.LOG_END_TAG);\n            if (prevLogStartIndex !== -1 && prevLogEndIndex !== -1) {\n                const logPart = prevMsg.content.slice(prevLogStartIndex + this.LOG_START_TAG.length, prevLogEndIndex).trim();\n                if(logPart) consolidatedLogParts.unshift(logPart);\n\n                const cleanedContent = prevMsg.content.substring(0, prevLogStartIndex) + prevMsg.content.substring(prevLogEndIndex + this.LOG_END_TAG.length);\n                await this.bridge.setChatMessage(cleanedContent.trim(), prevMsg.id, { refresh: \"none\" });\n                console.log(`[BLMX] Cleaned and moved UI log from message ${prevMsg.id}.`);\n            }\n        }\n\n        const finalLogString = consolidatedLogParts.join('\\n');\n        this._parseLogFromString(finalLogString);\n\n        await this.persistLogToStorage();\n        console.log(`[BLMX] Consolidated log saved to message ${this.messageId}.`);\n        \n        return true;\n    }\n\n    async persistLogToStorage() {\n        if (this.messageId === null) {\n             console.warn(\"[BLMX] Cannot save log, message_id not initialized.\");\n             return;\n        }\n        try {\n            const logString = this._renderLogToString();\n            const existingMessage = (await this.bridge.getChatMessages(this.messageId))[0];\n            let existingContent = existingMessage ? existingMessage.message : '';\n            \n            const logStartIndex = existingContent.indexOf(this.LOG_START_TAG);\n            const logEndIndex = existingContent.indexOf(this.LOG_END_TAG);\n\n            const newLogBlock = `${this.LOG_START_TAG}\\n${logString}\\n${this.LOG_END_TAG}`;\n            let fullText;\n\n            if (logStartIndex !== -1 && logEndIndex !== -1) {\n                fullText = existingContent.substring(0, logStartIndex) + newLogBlock + existingContent.substring(logEndIndex + this.LOG_END_TAG.length);\n            } else {\n                fullText = existingContent + '\\n' + newLogBlock;\n            }\n            \n            await this.bridge.setChatMessage(fullText.trim(), this.messageId, { refresh: \"none\" });\n        } catch (error) { console.error(\"[BLMX] Failed to save narrative log to text box:\", error); }\n    }\n    \n    _parseLogFromString(logString) {\n        this.logEntries = [];\n        const lines = logString.split('\\n').filter(line => line.trim() !== '');\n        \n        lines.forEach(line => {\n            const key = line.substring(0, line.indexOf(':')).trim();\n            const value = line.substring(line.indexOf(':') + 1).trim();\n            try {\n                switch (key) {\n                    // --- Unified handling: All entries go into this.logEntries ---\n                    case 'USER_MOMENT': case 'CHAR_MOMENT': case 'USER_COMMENT': case 'CHAR_COMMENT': case 'USER_LIKE': case 'CHAR_LIKE':\n                        this.logEntries.push({ key, data: JSON.parse(value) }); break;\n                    case 'TIME':\n                    case 'EVENT_LOG':\n                        if (value) {\n                            const data = JSON.parse(value);\n                            const entryType = key === 'TIME' ? 'time' : 'event';\n                            this.logEntries.push({ type: entryType, content: data });\n\n                            // 使用我们新的、统一的函数来更新时间\n                            updateGameTime(data.date, data.time); \n                        }\n                        break;\n                    case 'RECALL': {\n                        const recallData = JSON.parse(value);\n                        const senderToFind = recallData.sender === 'USER' ? 'me' : 'them';\n                        const entryToRecall = this.logEntries.slice().reverse().find(e => e.sender === senderToFind && e.content === recallData.target_text);\n                        if(entryToRecall) {\n                            entryToRecall.recalled = true;\n                            entryToRecall.recalled_content = entryToRecall.content;\n                            entryToRecall.recalled_timestamp = recallData.timestamp;\n                        }\n                        break;\n                    }\n                    case 'USER': case 'CHAR': {\n                        const sender = key === 'USER' ? 'me' : 'them';\n                        const voiceMatch = value.match(/^\\[语音:\\s*({.*})\\]/);\n                        const stickerMatch = value.match(/^\\[表情:\\s*(.*)\\]/);\n                        const imageMatch = value.match(/^\\[图片:\\s*(.*)\\]/); const locationMatch = value.match(/^\\[位置:\\s*(.*)\\]/);\n                        const transferMatch = value.match(/^\\[转账:\\s*(.*)\\]/); const fileMatch = value.match(/^\\[文件:\\s*(.*)\\]/);\n                        const giftMatch = value.match(/^\\[礼物:\\s*(.*)\\]/);\n                        const id = 'msg-' + Date.now() + Math.random() + sender;\n\n                        if (voiceMatch) {\n                            try {\n                                this.logEntries.push({ id, type: 'voice', sender, content: JSON.parse(voiceMatch[1]) });\n                            } catch(e) { console.error(\"Failed to parse voice data:\", voiceMatch[1], e); }\n                        }\n                        else if (stickerMatch) this.logEntries.push({ id, type: 'sticker', sender, content: stickerMatch[1] });\n                        else if (imageMatch) {\n                            try {\n                                const imgData = JSON.parse(imageMatch[1]);\n                                this.logEntries.push({ id, type: 'image', sender, content: imgData });\n                            } catch (e) {\n                                this.logEntries.push({ id, type: 'image', sender, content: { type: 'desc', value: imageMatch[1] } });\n                            }\n                        }\n                        else if (locationMatch) this.logEntries.push({ id, type: 'location', sender, content: locationMatch[1] });\n                        else if (transferMatch) this.logEntries.push({ id, type: 'transfer', sender, content: transferMatch[1], data: JSON.parse(transferMatch[1]) });\n                        else if (fileMatch) this.logEntries.push({ id, type: 'file', sender, content: fileMatch[1] });\n                        else if (giftMatch) this.logEntries.push({ id, type: 'gift', sender, content: giftMatch[1], data: JSON.parse(giftMatch[1]) });\n                        else this.logEntries.push({ id, type: 'message', sender, content: value });\n                        break;\n                    }\n                }\n            } catch(e) { console.error(\"Failed to parse log line:\", line, e); }\n        });\n    }\n\n    _renderLogToString() {\n        const recallCommands = [];\n        const allEntriesString = this.logEntries.map(e => {\n            if (e.recalled) {\n                const recallData = {\n                    sender: e.sender === 'me' ? 'USER' : 'CHAR',\n                    target_text: typeof e.recalled_content === 'object' ? e.recalled_content.text : e.recalled_content,\n                    timestamp: e.recalled_timestamp\n                };\n                if (recallData.target_text) {\n                    recallCommands.push(`RECALL: ${JSON.stringify(recallData)}`);\n                }\n            }\n\n            if (e.key && e.data) { // This is a Moment entry\n                return `${e.key}: ${JSON.stringify(e.data)}`;\n            } \n            \n            if (e.type) { // This is a Chat/Event entry\n                if (e.type === 'time' || e.type === 'event') {\n                    const key = e.type === 'time' ? 'TIME' : 'EVENT_LOG';\n                    return `${key}: ${JSON.stringify(e.content)}`;\n                }\n                \n                const prefix = e.sender === 'me' ? 'USER' : 'CHAR';\n                let content = e.content;\n                switch(e.type) {\n                    case 'sticker': content = `[表情: ${e.content}]`; break;\n                    case 'voice': content = `[语音: ${JSON.stringify(e.content)}]`; break;\n                    case 'image': content = `[图片: ${JSON.stringify(e.content)}]`; break;\n                    case 'location': content = `[位置: ${e.content}]`; break;\n                    case 'file': content = `[文件: ${e.content}]`; break;\n                    case 'gift': content = `[礼物: ${e.content}]`; break;\n                    case 'transfer': content = `[转账: ${e.content}]`; break;\n                }\n                return `${prefix}: ${content}`;\n            }\n            return ''; // Should not happen for valid entries\n        }).join('\\n');\n        \n        return [allEntriesString, ...recallCommands].filter(Boolean).join('\\n');\n    }\n    \n    addEntry(entry) { this.logEntries.push(entry); }\n    getContextForAI() { return this._renderLogToString(); }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const Views = {\n        home: document.getElementById('app-homescreen'),\n        wechat: document.getElementById('wechat-view'),\n        moments: document.getElementById('moments-view'),\n        settings: document.getElementById('settings-view')\n    };\n    const wechatBody = document.querySelector('.wechat-body'), wechatInput = document.getElementById('wechat-input-field'), sendBtn = document.getElementById('send-btn'), plusBtn = document.getElementById('plus-btn'), stickerGrid = document.getElementById('sticker-grid'), charStickerGrid = document.getElementById('char-sticker-grid'), plusGrid = document.getElementById('plus-grid'), momentsFeedList = document.getElementById('moments-feed-list');\n    \n    let isGenerating = false, tavernGenerateFunc = null, blmxManager = null, lastDisplayedTimeInMinutes = -Infinity, userMessageQueue = [], hasPendingNotifications = false;\n    let latestAiRawResponse = \"还没有收到AI的回复。\";\n    let latestSentPrompt = \"还没有发送任何内容给AI。\";\n\n    let currentCharId = '';\n    const AVATARS = { user: '', char: '' };\n    const NAMES = { user: 'User', char: 'Character' };\n    let charRemark = '';\n\n    const GLOBAL_STICKER_STORAGE_KEY = \"blmx_wechat_stickers_global\";\n    const defaultGlobalStickers = [{label:\"好的\",url:\"https://files.catbox.moe/3j0tpc.jpeg\"}];\n    \n    const CHAR_STICKER_STORAGE_KEY_PREFIX = \"blmx_char_stickers_\";\n    const getCharStickerStorageKey = () => `${CHAR_STICKER_STORAGE_KEY_PREFIX}${currentCharId}`;\n    \n    const WALLPAPER_KEYS = {\n        chat: 'blmx_wallpaper_chat_url',\n        home: 'blmx_wallpaper_home_url',\n        settings: 'blmx_wallpaper_settings_url'\n    };\n\n    function getDisplayName(type) {\n        if (type === 'char') {\n            return charRemark || NAMES.char;\n        }\n        return NAMES.user;\n    }\n\n    function navigateTo(viewName) { Object.values(Views).forEach(v => v.classList.remove('active')); if (Views[viewName]) Views[viewName].classList.add('active'); }\n\n    function addLongPressListener(element, callback, options = { duration: 600, preventDefault: true }) {\n        let timer;\n        let startX, startY;\n\n        const onStart = (e) => {\n            if (e.type === 'mousedown' && e.button !== 0) return;\n            startX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;\n            startY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;\n            if (options.preventDefault) e.preventDefault();\n            clearTimeout(timer);\n            timer = setTimeout(() => { timer = null; callback(); }, options.duration);\n        };\n\n        const onMove = (e) => {\n            if (!timer) return;\n            const moveX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\n            const moveY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;\n            if (Math.abs(moveX - startX) > 10 || Math.abs(moveY - startY) > 10) {\n                clearTimeout(timer);\n            }\n        };\n\n        const onEnd = () => clearTimeout(timer);\n        \n        element.addEventListener('pointerdown', onStart);\n        element.addEventListener('pointermove', onMove);\n        element.addEventListener('pointerup', onEnd);\n        element.addEventListener('pointerleave', onEnd);\n\n        if (options.preventDefault) {\n            element.addEventListener('contextmenu', e => e.preventDefault());\n        }\n    }\n    \n    // --- \"正在输入\" 动画相关函数 ---\n    function showTypingIndicator() {\n        hideTypingIndicator(); // 确保只有一个\n        const indicator = document.createElement('div');\n        indicator.className = 'typing-indicator';\n        indicator.id = 'typing-indicator-id';\n        const avatarSrc = AVATARS.char;\n\n        indicator.innerHTML = `\n            <img src=\"${avatarSrc}\" class=\"message-avatar\">\n            <div class=\"message-bubble\">\n                <span class=\"typing-dot\"></span>\n                <span class=\"typing-dot\"></span>\n                <span class=\"typing-dot\"></span>\n            </div>\n        `;\n        wechatBody.appendChild(indicator);\n        wechatBody.scrollTop = wechatBody.scrollHeight;\n    }\n\n    function hideTypingIndicator() {\n        const indicator = document.getElementById('typing-indicator-id');\n        if (indicator) {\n            indicator.remove();\n        }\n    }\n    \n    function calculateTypingDelay(messageContent) {\n        // 对于非文本消息（如表情、图片等），使用一个较短的固定延迟\n        if (typeof messageContent !== 'string' || messageContent.trim() === '') {\n            return 800 + Math.random() * 700; // 0.8s to 1.5s\n        }\n\n        const textLength = messageContent.length;\n        const baseDelay = 500; // 基础延迟 0.5s\n        const perCharDelay = 40; // 每个字符增加 40ms\n        const randomComponent = Math.random() * 800; // 增加 0-0.8s 的随机性\n\n        let totalDelay = baseDelay + (textLength * perCharDelay) + randomComponent;\n\n        // 确保总延迟不超过3秒 (3000ms)\n        return Math.min(totalDelay, 3000);\n    }\n    \n    async function displayAiEntriesSequentially(entries, allLogEntries) {\n        // 定义哪些类型是“消息”，需要播放输入动画\n        const messageLikeTypes = ['message', 'sticker', 'voice', 'image', 'location', 'transfer', 'file', 'gift'];\n\n        for (const entry of entries) {\n            // 判断条目类型是否是需要动画的“消息”\n            if (messageLikeTypes.includes(entry.type)) {\n                // 是消息，执行完整的动画流程\n                showTypingIndicator();\n\n                const messageText = (entry.type === 'message') ? entry.content :\n                                  (entry.type === 'voice') ? entry.content.text : '';\n                const delay = calculateTypingDelay(messageText);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                \n                hideTypingIndicator();\n                addEntryToUI(entry, undefined, true);\n            } else if (entry.type === 'recall_instruction') {\n                // 新增：这是一个撤回指令，特殊处理\n                const { originalEntry, recallTimestamp } = entry.content;\n                \n                // 在内存中找到这个条目并标记\n                const entryToUpdate = allLogEntries.find(log => log.id === originalEntry.id);\n                if (entryToUpdate) {\n                    entryToUpdate.recalled = true;\n                    entryToUpdate.recalled_content = originalEntry.content;\n                    entryToUpdate.recalled_timestamp = recallTimestamp;\n\n                    // 在UI上找到对应的DOM元素并替换它\n                    const elementToReplace = document.querySelector(`[data-message-id=\"${originalEntry.id}\"]`);\n                    if (elementToReplace) {\n                        // 使用一个小的延迟，让撤回动作看起来更自然\n                        await new Promise(resolve => setTimeout(resolve, 500)); \n                        addRecallNotice(entryToUpdate, elementToReplace);\n                    }\n                }\n            } else {\n                // 是系统事件 (如 EVENT_LOG, TIME)，直接显示\n                addEntryToUI(entry, undefined, true);\n            }\n            \n            // 在所有条目之间都增加一个短暂的停顿，让节奏更舒适\n            await new Promise(resolve => setTimeout(resolve, 800)); \n        }\n    }\n\n    function updateGameTime(dateStr, timeStr) {\n        if (!dateStr || !timeStr) return;\n        // 使用 'T' 作为分隔符，这比空格更可靠，可以避免潜在的时区问题\n        const newDate = new Date(`${dateStr}T${timeStr}`); \n        if (!isNaN(newDate)) {\n            window.currentGameDate = newDate;\n            const timeElement = document.getElementById('current-time');\n            if (timeElement) {\n                const timeString = `${newDate.getHours().toString().padStart(2, '0')}:${newDate.getMinutes().toString().padStart(2, '0')}`;\n                timeElement.textContent = timeString;\n            }\n        }\n    }\n\n    function addEntryToUI(entry, index, isNewMessage = false) {\n        switch(entry.type) {\n            case 'time':\n                updateGameTime(entry.content.date, entry.content.time); // <-- 添加这一行\n                addTimestampToWeChat(entry.content.date, entry.content.time, true, index);\n                break;\n            case 'event':\n                updateGameTime(entry.content.date, entry.content.time); // <-- 添加这一行\n                addEventLogToWeChat(entry.content, index);\n                break;\n            case undefined:\n                 if (!entry.key) {\n                     console.warn(\"Undefined entry type, skipping UI add:\", entry);\n                 }\n                 break;\n            default:\n                addMessageToWeChat(entry, index, isNewMessage);\n                break;\n        }\n    }\n\n    function addMessageToWeChat(entry, index, isNewMessage = false) {\n        const { id, sender, type, data } = entry; const from = sender;\n        const messageRow = document.createElement('div');\n        messageRow.className = 'message-row';\n        if (index !== undefined) messageRow.dataset.logIndex = index;\n        messageRow.dataset.messageId = id;\n        const senderClass = from;\n        const avatarSrc = from === 'me' ? AVATARS.user : AVATARS.char;\n        messageRow.classList.add(senderClass);\n        \n        const avatarImgHtml = `<img src=\"${avatarSrc}\" class=\"message-avatar\">`;\n\n        if (type === 'voice') {\n            const contentContainer = document.createElement('div');\n            contentContainer.className = 'message-content-container';\n\n            const bubble = document.createElement('div');\n            bubble.className = 'message-bubble voice-bubble';\n            bubble.innerHTML = `<span class=\"duration\">${entry.content.duration}\"</span><i class=\"fas fa-wifi voice-icon\"></i>`;\n\n            const textRevealBox = document.createElement('div');\n            textRevealBox.className = 'voice-text-content';\n            textRevealBox.textContent = entry.content.text;\n\n            contentContainer.appendChild(bubble);\n            contentContainer.appendChild(textRevealBox);\n\n            if (from === 'me') {\n                messageRow.appendChild(contentContainer);\n                messageRow.insertAdjacentHTML('beforeend', avatarImgHtml);\n            } else {\n                messageRow.insertAdjacentHTML('afterbegin', avatarImgHtml);\n                messageRow.appendChild(contentContainer);\n            }\n            let longPressFired = false;\n            const timerDuration = 500;\n            let pressTimer;\n\n            bubble.addEventListener('pointerdown', (e) => {\n                if (e.pointerType === 'mouse' && e.button !== 0) return;\n                longPressFired = false;\n                pressTimer = setTimeout(() => {\n                    messageRow.classList.add('voice-text-visible');\n                    longPressFired = true;\n                }, timerDuration);\n            });\n\n            bubble.addEventListener('pointerup', () => {\n                clearTimeout(pressTimer);\n                if (!longPressFired) {\n                    if (messageRow.classList.contains('voice-text-visible')) {\n                        messageRow.classList.remove('voice-text-visible');\n                    }\n                }\n            });\n\n            bubble.addEventListener('pointerleave', () => clearTimeout(pressTimer));\n            bubble.addEventListener('contextmenu', e => e.preventDefault());\n\n        } else {\n            let bubbleContent = '';\n            switch (type) {\n                case 'sticker': bubbleContent = `<img src=\"${findStickerUrlByName(entry.content) || ''}\" alt=\"${entry.content}\">`; break;\n                case 'image':\n                    if (entry.content && entry.content.type === 'url') {\n                        let imageUrl = entry.content.value;\n                        if (imageUrl.startsWith('blmx-img-')) {\n                            const storedImage = sessionStorage.getItem(imageUrl);\n                            if (storedImage) {\n                                imageUrl = storedImage;\n                            } else {\n                                bubbleContent = `<div class=\"image-desc-content\"><div class=\"text-wrapper\">[图片已过期]</div></div>`;\n                                break; \n                            }\n                        }\n                        bubbleContent = `<img src=\"${imageUrl}\" alt=\"图片\">`;\n                    } else { \n                        const descText = (entry.content && entry.content.value) ? entry.content.value : entry.content;\n                        bubbleContent = `<div class=\"image-desc-content\"><div class=\"text-wrapper\">${String(descText).replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}</div></div>`;\n                    }\n                    break;\n                case 'location': bubbleContent = `<div class=\"location-card\"><div class=\"location-content\"><div class=\"location-title\">${entry.content}</div><div class=\"location-subtitle\">共享实时位置</div></div><div class=\"location-map-placeholder\"></div></div>`; break;\n                case 'transfer': {\n                    const isReceipt = data.status !== 'sent';\n                    const detailsHtml = isReceipt ? `<div class=\"status-text\">${data.status === 'accepted' ? '已接收' : '已退还'}</div>` : `<div class=\"note\">${data.note || ' '}</div>`;\n                    const cardClass = isReceipt ? 'transfer-receipt' : 'transfer-initial';\n                    bubbleContent = `<div class=\"transfer-card ${cardClass}\"><div class=\"transfer-content\"><img src=\"https://files.catbox.moe/7162vh.png\" class=\"transfer-icon-image\"><div class=\"transfer-details\"><div class=\"amount\">¥${data.amount}</div>${detailsHtml}</div></div><div class=\"transfer-footer\">转账</div></div>`;\n                    break;\n                }\n                case 'file': bubbleContent = `<div class=\"file-card\"><div class=\"file-content\"><i class=\"fas fa-file-alt file-icon\"></i><div class=\"file-details\"><div class=\"file-name\">${entry.content.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}</div></div></div><div class=\"file-footer\">文件</div></div>`; break;\n                case 'gift': {\n                    let detailsHtml = '';\n                    if (data.status === 'sent') {\n                        detailsHtml = data.price ? `<div class=\"gift-price\">¥ ${data.price}</div>` : '';\n                    } else {\n                        detailsHtml = `<div class=\"gift-status-text\">${data.status === 'accepted' ? '已收下' : '已拒收'}</div>`;\n                    }\n                    bubbleContent = `<div class=\"gift-content\"><i class=\"fas fa-gift gift-icon\"></i><div class=\"gift-details\"><div class=\"gift-name\">${data.name}</div>${detailsHtml}</div></div><div class=\"gift-footer\">礼物</div>`;\n                    break;\n                }\n                default: bubbleContent = entry.content.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\"); break;\n            }\n            messageRow.innerHTML = from === 'me' ? `<div class=\"message-bubble\">${bubbleContent}</div>${avatarImgHtml}` : `${avatarImgHtml}<div class=\"message-bubble\">${bubbleContent}</div>`;\n            const bubble = messageRow.querySelector('.message-bubble');\n            \n            if (type === 'image') {\n                 if (entry.content && entry.content.type === 'url') {\n                     bubble.classList.add('image-url-bubble');\n                 } else {\n                     bubble.classList.add('image-desc-bubble');\n                 }\n            } else {\n                const bubbleTypeMap = { sticker: 'sticker-bubble', location: 'location-bubble', transfer: 'transfer-bubble', file: 'file-bubble', gift: 'gift-bubble' };\n                if(bubbleTypeMap[type]) bubble.classList.add(bubbleTypeMap[type]);\n            }\n            \n            if (type === 'transfer') {\n                const transferCard = bubble.querySelector('.transfer-card');\n                const isReceipt = data.status !== 'sent';\n                if (!isReceipt && from === 'them') {\n                    transferCard.classList.add('them');\n                    transferCard.addEventListener('click', () => {\n                        const status = confirm(`接收来自 ${getDisplayName('char')} 的转账？\\n(选择“取消”将视为退还)`) ? 'accepted' : 'rejected';\n                        const receiptData = { amount: data.amount, status };\n                        stageAndDisplayEntry({ type: 'transfer', sender: 'me', content: JSON.stringify(receiptData), data: receiptData });\n                    }, { once: true });\n                }\n            }\n            \n            if (type === 'gift') {\n                const giftBubble = messageRow.querySelector('.message-bubble');\n                if (from === 'them' && data.status === 'sent') {\n                    giftBubble.style.cursor = 'pointer';\n                    giftBubble.addEventListener('click', () => {\n                        const action = confirm(`接收来自 ${getDisplayName('char')} 的礼物 \"${data.name}\" 吗？\\n(选择“取消”将视为拒收)`) ? 'accepted' : 'rejected';\n                        const receiptData = { name: data.name, status: action };\n                        stageAndDisplayEntry({ type: 'gift', sender: 'me', content: JSON.stringify(receiptData), data: receiptData });\n                        hasPendingNotifications = true;\n                        updateFooterButtonsState();\n                        giftBubble.style.cursor = 'default';\n                    }, { once: true });\n                }\n                if (from === 'me' && data.status !== 'sent') {\n                    giftBubble.style.backgroundColor = '#355a96';\n                }\n            }\n\n            if (from === 'me' && type === 'message') {\n                addLongPressListener(bubble, () => {\n                    const queueEntry = userMessageQueue.find(e => e.id === id);\n                    if (queueEntry) {\n                        const currentDate = window.currentGameDate || new Date();\n                        const timeString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n                        const dateTimeParts = promptForDateTime(timeString);\n\n                        if (dateTimeParts && confirm('是否要撤回这条消息？')) {\n                            const [newDate, newTime] = dateTimeParts;\n                            // 标记消息为已撤回\n                            queueEntry.recalled = true;\n                            queueEntry.recalled_timestamp = `${newDate} ${newTime}`;\n                            queueEntry.recalled_content = queueEntry.content;\n\n                            // 将待发送队列中的消息立即合并到主日志中\n                            blmxManager.logEntries.push(...userMessageQueue);\n                            // 清空待发送队列\n                            userMessageQueue = [];\n\n                            // 立即保存更新后的日志到SillyTavern\n                            blmxManager.persistLogToStorage().then(() => {\n                                // 保存成功后，立即用最新的数据重绘整个聊天界面\n                                renderChatHistory(); \n                            });\n                            \n                            // 更新底部按钮状态\n                            updateFooterButtonsState();\n                        }\n                    } else { alert(\"消息已合并发送，无法撤回。\"); }\n                });\n            }\n        }\n\n        if (isNewMessage) {\n            messageRow.classList.add('new-message');\n            // Animation is handled by CSS, no need to remove class in JS\n        }\n        wechatBody.appendChild(messageRow); wechatBody.scrollTop = wechatBody.scrollHeight;\n    }\n    \n    function addRecallNotice(entry, elementToReplace = null, index) {\n        const who = getDisplayName(entry.sender === 'me' ? 'user' : 'char');\n        const noticeRow = document.createElement('div');\n        noticeRow.className = 'timestamp-row';\n        if (index !== undefined) noticeRow.dataset.logIndex = index;\n\n        const recalledText = (typeof entry.recalled_content === 'object' && entry.recalled_content !== null) ? entry.recalled_content.text : entry.recalled_content;\n        \n        noticeRow.innerHTML = `\n            <div class=\"recall-notice-container\">\n                <div class=\"recall-notice-text\">\"${who}\" 撤回了一条消息</div>\n                <div class=\"recall-content\">${recalledText || entry.content}</div>\n            </div>\n        `;\n\n        const noticeTextEl = noticeRow.querySelector('.recall-notice-text');\n        const contentEl = noticeRow.querySelector('.recall-content');\n        \n        noticeTextEl.addEventListener('click', () => {\n            contentEl.classList.toggle('expanded');\n        });\n\n        if (elementToReplace) {\n            elementToReplace.replaceWith(noticeRow);\n        } else {\n            wechatBody.appendChild(noticeRow);\n        }\n    }\n\n    function renderChatHistory() {\n        wechatBody.innerHTML = ''; lastDisplayedTimeInMinutes = -Infinity;\n        if (!blmxManager) return;\n        blmxManager.logEntries.forEach((entry, index) => {\n            if (entry.recalled) {\n                addRecallNotice(entry, null, index);\n            } else {\n                addEntryToUI(entry, index, false);\n            }\n        });\n    }\n\n    function addTimestampToWeChat(date, time, isSystemTime, index) {\n        const timeText = formatMomentTimestamp(date, time);\n        const timeInMinutes = parseTimeToMinutes(timeText);\n        \n        if (isSystemTime && timeInMinutes !== null && (timeInMinutes - lastDisplayedTimeInMinutes) < 10) {\n            return;\n        }\n        \n        const t = document.createElement(\"div\");\n        t.className = \"timestamp-row\";\n        if (index !== undefined) t.dataset.logIndex = index;\n        t.innerHTML = `<span class=\"timestamp-text\">${timeText}</span>`;\n        wechatBody.appendChild(t);\n        if (isSystemTime) {\n            lastDisplayedTimeInMinutes = timeInMinutes;\n        }\n    }\n\n    function addEventLogToWeChat(eventData, index) {\n        const timeText = formatMomentTimestamp(eventData.date, eventData.time);\n        const row = document.createElement('div');\n        row.className = 'event-log-row';\n        if (index !== undefined) row.dataset.logIndex = index;\n        \n        row.innerHTML = `\n            <div class=\"event-log-container\">\n                <div class=\"event-time-text\">${timeText}</div>\n                <div class=\"event-description\">${eventData.description || ''}</div>\n            </div>\n        `;\n\n        if (eventData.description) {\n            const timeEl = row.querySelector('.event-time-text');\n            const descEl = row.querySelector('.event-description');\n            timeEl.classList.add('has-desc');\n            timeEl.addEventListener('click', () => {\n                descEl.classList.toggle('expanded');\n            });\n        }\n        \n        wechatBody.appendChild(row);\n    }\n    \n    function parseTimeToMinutes(e){ const t=e.match(/(\\d{1,2}):(\\d{2})/); return t?60*parseInt(t[1],10)+parseInt(t[2],10):null; }\n    \n    function formatMomentTimestamp(dateString, timeString) {\n        if (!dateString || !timeString) return ' ';\n        const postDate = new Date(dateString);\n        const now = new Date(window.currentGameDate);\n        \n        const postYear = postDate.getFullYear();\n        const postMonth = postDate.getMonth();\n        const postDay = postDate.getDate();\n        \n        const nowYear = now.getFullYear();\n        const nowMonth = now.getMonth();\n        const nowDay = now.getDate();\n        \n        if (postYear === nowYear && postMonth === nowMonth && postDay === nowDay) {\n            return timeString;\n        }\n\n        const yesterday = new Date(now);\n        yesterday.setDate(now.getDate() - 1);\n        if (postYear === yesterday.getFullYear() && postMonth === yesterday.getMonth() && postDay === yesterday.getDate()) {\n            return `昨天 ${timeString}`;\n        }\n        \n        if (postYear === nowYear) {\n            return `${postMonth + 1}月${postDay}日 ${timeString}`;\n        }\n        \n        return `${postYear}年${postMonth + 1}月${postDay}日`;\n    }\n\n    function renderMomentsFeed() {\n        if (!blmxManager) return;\n        momentsFeedList.innerHTML = '';\n        const posts = {}; \n        const momentPostLogIndices = [];\n        blmxManager.logEntries.forEach((entry, index) => {\n            if (entry.key && entry.key.includes('_MOMENT')) {\n                momentPostLogIndices.push(index);\n            }\n        });\n\n        momentPostLogIndices.forEach(logIndex => {\n            const entry = blmxManager.logEntries[logIndex];\n            posts[logIndex] = { ...entry, likes: [], comments: [], id: logIndex };\n        });\n\n        blmxManager.logEntries.forEach((entry, index) => {\n            if (entry.key && (entry.key.includes('_LIKE') || entry.key.includes('_COMMENT'))) {\n                const targetPostAbsoluteIndex = momentPostLogIndices[parseInt(entry.data.target_post_id, 10)];\n                const targetPost = posts[targetPostAbsoluteIndex];\n\n                if (targetPost) {\n                    if (entry.key.includes('_LIKE')) {\n                        const likerName = entry.key.startsWith('USER') ? getDisplayName('user') : getDisplayName('char');\n                        if (!targetPost.likes.some(l => l.name === likerName)) {\n                            targetPost.likes.push({ key: entry.key, name: likerName, originalLogIndex: index });\n                        }\n                    } else {\n                        targetPost.comments.push({ ...entry, originalLogIndex: index });\n                    }\n                } else {\n                    console.warn(`[BLMX] Could not find target post for interaction. target_post_id: ${entry.data.target_post_id}`, entry);\n                }\n            }\n        });\n\n        Object.values(posts).reverse().forEach(post => {\n            const fromUser = post.key.startsWith('USER');\n            const authorName = fromUser ? getDisplayName('user') : getDisplayName('char');\n            const authorAvatar = fromUser ? AVATARS.user : AVATARS.char;\n            const li = document.createElement('li'); li.className = 'moment-post'; li.dataset.postId = post.id;\n            const momentSequenceId = momentPostLogIndices.indexOf(post.id);\n            li.dataset.momentSequenceId = momentSequenceId;\n\n            let mediaHtml = '';\n            if (post.data.image_type === 'url' && post.data.image) mediaHtml = `<img src=\"${post.data.image}\" class=\"post-media-image\">`;\n            else if (post.data.image_type === 'desc' && post.data.image) mediaHtml = `<div class=\"image-desc-content\"><div class=\"text-wrapper\">${post.data.image}</div></div>`;\n            let interactionsHtml = '';\n            if (post.likes.length > 0 || post.comments.length > 0) {\n                const likersHtml = post.likes.length > 0 ? `<div class=\"likes-section\"><i class=\"fas fa-heart\"></i> ${post.likes.map(l => `<span class=\"liker-name\">${l.name}</span>`).join(', ')}</div>` : '';\n                const commentsHtml = post.comments.length > 0 ? `<ul class=\"comments-section\">${post.comments.map(c => `<li><span class=\"comment-author\">${c.key.startsWith('USER') ? getDisplayName('user') : getDisplayName('char')}</span>: ${c.data.text}</li>`).join('')}</ul>` : '';\n                interactionsHtml = `<div class=\"post-interactions\">${likersHtml}${commentsHtml}</div>`;\n            }\n            const displayTime = formatMomentTimestamp(post.data.date, post.data.time);\n            const deleteBtnHtml = fromUser ? `<span class=\"delete-moment-btn\" title=\"删除\">删除</span>` : '';\n            li.innerHTML = `<img src=\"${authorAvatar}\" alt=\"Avatar\" class=\"post-author-avatar\">\n                                         <div class=\"post-details\">\n                                             <span class=\"post-author-name\">${authorName}</span>\n                                             <p class=\"post-content\">${post.data.text || ''}</p>\n                                             <div class=\"post-media\">${mediaHtml}</div>\n                                             <div class=\"post-meta\">\n                                                 <div class=\"post-meta-left\">\n                                                     <span class=\"timestamp\">${displayTime}</span>\n                                                     ${deleteBtnHtml}\n                                                 </div>\n                                                 <div class=\"post-actions\">\n                                                     <span class=\"comment-button\" title=\"评论/点赞\"><i class=\"fas fa-comment-dots\"></i></span>\n                                                 </div>\n                                             </div>\n                                             ${interactionsHtml}\n                                         </div>`;\n            momentsFeedList.appendChild(li);\n        });\n    }\n\n    function stageAndDisplayEntry(entry) {\n        if (entry.type !== 'event' && entry.type !== 'time') {\n            entry.id = 'msg-' + Date.now() + Math.random();\n        }\n        if (entry.type === 'image' && entry.content.type === 'url' && entry.content.value.startsWith('data:image')) {\n            entry.content.isNewForAI = true;\n        }\n        userMessageQueue.push(entry);\n        addEntryToUI(entry, undefined, true);\n        updateFooterButtonsState();\n    }\n    \n    async function triggerAiResponse(immediate = false) {\n        if (isGenerating || !blmxManager) return;\n        const messagesToProcess = userMessageQueue;\n        \n        if (!immediate && messagesToProcess.length === 0 && !hasPendingNotifications) return;\n        \n        isGenerating = true;\n        \n        let contextForAI = blmxManager.getContextForAI();\n        const tempContextEntries = [];\n        messagesToProcess.forEach(entry => {\n            const prefix = entry.sender === 'me' ? 'USER' : 'CHAR';\n            if (entry.type === 'image' && entry.content.isNewForAI) {\n                tempContextEntries.push(`${prefix}: [图片: ${entry.content.value}]`);\n            } else {\n                let content = entry.content;\n                switch(entry.type) {\n                    case 'sticker': content = `[表情: ${entry.content}]`; break;\n                    case 'voice': content = `[语音: ${JSON.stringify(entry.content)}]`; break;\n                    case 'image': content = `[图片: ${JSON.stringify(entry.content)}]`; break;\n                    case 'location': content = `[位置: ${entry.content}]`; break;\n                    case 'file': content = `[文件: ${entry.content}]`; break;\n                    case 'gift': content = `[礼物: ${JSON.stringify(entry.data)}]`; break;\n                    case 'transfer': content = `[转账: ${JSON.stringify(entry.data)}]`; break;\n                }\n                 tempContextEntries.push(`${prefix}: ${content}`);\n            }\n        });\n        \n        if (tempContextEntries.length > 0) {\n            contextForAI += '\\n' + tempContextEntries.join('\\n');\n        }\n        contextForAI += \"\\n以上内容为过往聊天记录与最新用户输入(`<user_input>`)\\n【本次响应必须遵循线上规则】\";\n\n        latestSentPrompt = contextForAI;\n\n        messagesToProcess.forEach(entry => {\n            if (entry.type === 'image' && entry.content.isNewForAI) {\n                entry.content.value = `[用户发送的图片]`;\n                delete entry.content.isNewForAI;\n            }\n        });\n        \n        blmxManager.logEntries.push(...messagesToProcess);\n        userMessageQueue = [];\n        \n        updateFooterButtonsState();\n        \n        const MAX_RETRIES = 2;\n        let attempt = 0;\n        let success = false;\n\n        while (attempt <= MAX_RETRIES && !success) {\n            if (attempt > 0) {\n                console.log(`[BLMX] AI response was empty. Retrying, attempt ${attempt + 1}/${MAX_RETRIES + 1}...`);\n                await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n            }\n\n            try {\n                const stream = await tavernGenerateFunc({ user_input: contextForAI, should_stream: true });\n                let finalAiResponse = '';\n                for await (const chunk of stream) { finalAiResponse += chunk; }\n\n                latestAiRawResponse = finalAiResponse.trim();\n\n                let processedResponse = finalAiResponse.trim();\n                const len = processedResponse.length;\n                if (len > 0 && len % 2 === 0) {\n                    const firstHalf = processedResponse.substring(0, len / 2);\n                    const secondHalf = processedResponse.substring(len / 2);\n                    if (firstHalf === secondHalf && firstHalf.trim() !== \"\") {\n                        console.warn('[BLMX] Detected fully duplicated AI response, trimming automatically.');\n                        processedResponse = firstHalf;\n                    }\n                }\n\n                const responseLines = processedResponse.split('\\n').filter(line => line.trim());\n                \n                if (responseLines.length > 0) {\n                    const entriesForAnimation = [];\n                    let momentsDataUpdated = false; // 1. 定义一个标志位\n\n                    responseLines.forEach(line => {\n                        const key = line.substring(0, line.indexOf(':')).trim();\n                        const value = line.substring(line.indexOf(':') + 1).trim();\n                        if (!key || !value) return;\n                        try {\n                            let newEntry = null;\n                            switch (key) {\n                                case 'CHAR_MOMENT':\n                                case 'CHAR_COMMENT':\n                                case 'CHAR_LIKE':\n                                    newEntry = { key, data: JSON.parse(value) };\n                                    // 这里只处理创建 newEntry，添加操作统一在下面处理\n                                    momentsDataUpdated = true; // 2. 设置标志位\n                                    break;\n                                case 'RECALL': {\n                                    const recallData = JSON.parse(value);\n                                    const senderToFind = recallData.sender === 'USER' ? 'me' : 'them';\n                                    const entryToRecall = blmxManager.logEntries.slice().reverse().find(e => e.sender === senderToFind && (e.content === recallData.target_text || e.recalled_content === recallData.target_text));\n                                    \n                                    if (entryToRecall) {\n                                        entriesForAnimation.push({\n                                            type: 'recall_instruction',\n                                            content: {\n                                                originalEntry: entryToRecall,\n                                                recallTimestamp: recallData.timestamp\n                                            }\n                                        });\n                                    }\n                                    // 注意：RECALL本身不创建newEntry，所以这里没有break，让它流到下面\n                                    break;\n                                }\n                                case 'CHAR': {\n                                    const id = 'msg-' + Date.now() + Math.random();\n                                    const voiceMatch = value.match(/^\\[语音:\\s*({.*})\\]/);\n                                    const stickerMatch = value.match(/^\\[表情:\\s*(.*)\\]/);\n                                    const imageMatch = value.match(/^\\[图片:\\s*(.*)\\]/);\n                                    const locationMatch = value.match(/^\\[位置:\\s*(.*)\\]/);\n                                    const transferMatch = value.match(/^\\[转账:\\s*(.*)\\]/);\n                                    const fileMatch = value.match(/^\\[文件:\\s*(.*)\\]/);\n                                    const giftMatch = value.match(/^\\[礼物:\\s*(.*)\\]/);\n                                    \n                                    if (voiceMatch) try { newEntry = { id, type: 'voice', sender: 'them', content: JSON.parse(voiceMatch[1]) }; } catch(e) { console.error(e); }\n                                    else if (stickerMatch) newEntry = { id, type: 'sticker', sender: 'them', content: stickerMatch[1] };\n                                    else if (imageMatch) try { newEntry = { id, type: 'image', sender: 'them', content: JSON.parse(imageMatch[1]) }; } catch (e) { newEntry = { id, type: 'image', sender: 'them', content: { type: 'desc', value: imageMatch[1] } }; }\n                                    else if (locationMatch) newEntry = { id, type: 'location', sender: 'them', content: locationMatch[1] };\n                                    else if (transferMatch) newEntry = { id, type: 'transfer', sender: 'them', content: transferMatch[1], data: JSON.parse(transferMatch[1]) };\n                                    else if (fileMatch) newEntry = { id, type: 'file', sender: 'them', content: fileMatch[1] };\n                                    else if (giftMatch) newEntry = { id, type: 'gift', sender: 'them', content: giftMatch[1], data: JSON.parse(giftMatch[1]) };\n                                    else newEntry = { id, type: 'message', sender: 'them', content: value };\n                                    break;\n                                }\n                                case 'TIME': case 'EVENT_LOG':\n                                    newEntry = { type: key === 'TIME' ? 'time' : 'event', content: JSON.parse(value) };\n                                    break;\n                            }\n                            \n                            // 3. 统一在这里添加日志，确保只添加一次\n                            if (newEntry) {\n                                blmxManager.addEntry(newEntry);\n                                if (newEntry.type) { // 只有带type的才需要动画\n                                     entriesForAnimation.push(newEntry);\n                                }\n                            }\n                        } catch(e) { console.error(\"Failed to parse AI response:\", line, e); }\n                    });\n                    \n                    // 4. 修改UI更新逻辑\n                    if (entriesForAnimation.length > 0) {\n                        await displayAiEntriesSequentially(entriesForAnimation, blmxManager.logEntries);\n                    }\n                    \n                    if (momentsDataUpdated) {\n                        renderMomentsFeed();\n                    }\n                    \n                    success = true;\n                }\n            } catch (error) {\n                console.error(`[BLMX Proxy] Error on attempt ${attempt}:`, error);\n                if (attempt >= MAX_RETRIES) {\n                     addMessageToWeChat({id: 'error', sender: 'them', type:'message', content: 'AI代理出错 (详情见F12控制台)'}, undefined, true);\n                }\n            }\n            attempt++;\n        }\n\n        if (!success && attempt > MAX_RETRIES) {\n            console.error(`[BLMX] AI generation failed after ${MAX_RETRIES + 1} attempts (empty response).`);\n            addMessageToWeChat({id: 'error', sender: 'them', type:'message', content: '(AI响应为空，请稍后再试或手动触发)'}, undefined, true);\n            latestAiRawResponse = \"[AI响应为空]\";\n        }\n\n        await blmxManager.persistLogToStorage();\n        isGenerating = false;\n    }\n\n    function updateFooterButtonsState() {\n        const hasText = wechatInput.value.trim() !== '';\n        const hasQueuedMessages = userMessageQueue.length > 0;\n        sendBtn.style.display = (hasText || hasQueuedMessages || hasPendingNotifications) ? 'flex' : 'none'; // Use flex for centering\n        plusBtn.style.display = hasText ? 'none' : 'inline-block';\n    }\n\n    function findStickerUrlByName(name) {\n        const globalStickers = [...defaultGlobalStickers, ...JSON.parse(localStorage.getItem(GLOBAL_STICKER_STORAGE_KEY) || '[]')];\n        const charStickers = JSON.parse(localStorage.getItem(getCharStickerStorageKey()) || '[]');\n        return [...globalStickers, ...charStickers].find(s => s.label === name)?.url;\n    }\n    \n    function updateAvatar(avatarType) {\n        const currentUrl = AVATARS[avatarType] || '';\n        const newUrl = prompt(`请输入新的${getDisplayName(avatarType)}头像URL:`, currentUrl);\n\n        if (newUrl) {\n            AVATARS[avatarType] = newUrl;\n            const storageKey = avatarType === 'user' ? `blmx_user_avatar_${currentCharId}` : `blmx_char_avatar_${currentCharId}`;\n            localStorage.setItem(storageKey, newUrl);\n            alert('头像已更新！');\n            renderChatHistory();\n            renderMomentsFeed();\n            if (avatarType === 'user') {\n                document.getElementById('moments-user-avatar').src = newUrl;\n            }\n        }\n    }\n\n    function parseAndAddStickers(inputString, storageKey) {\n        if (!inputString) return;\n        const newStickers = [];\n        const parts = inputString.split(',');\n\n        parts.forEach(part => {\n            part = part.trim();\n            if (!part) return;\n\n            const urlMatch = part.match(/https?:\\/\\/[^\\s]+/);\n            if (urlMatch) {\n                const url = urlMatch[0];\n                const label = part.substring(0, urlMatch.index).trim();\n                if (label && url) {\n                    newStickers.push({ label, url });\n                }\n            }\n        });\n\n        if (newStickers.length > 0) {\n            const currentStickers = JSON.parse(localStorage.getItem(storageKey) || '[]');\n            const updatedStickers = [...currentStickers, ...newStickers];\n            localStorage.setItem(storageKey, JSON.stringify(updatedStickers));\n            alert(`${newStickers.length} 个表情包已添加！`);\n        } else {\n            alert(\"未找到有效的表情包格式。请使用 '描述URL, 描述URL' 格式。逗号是英文逗号\");\n        }\n    }\n\n    const GLOBAL_STICKER_FEATURES = {\n        get: () => {\n            const customStickers = JSON.parse(localStorage.getItem(GLOBAL_STICKER_STORAGE_KEY) || '[]')\n            const allStickers = [...defaultGlobalStickers, ...customStickers];\n            const features = allStickers.map(s => ({\n                label: s.label,\n                icon: s.url,\n                isDefault: defaultGlobalStickers.some(ds => ds.label === s.label),\n                action: () => { stageAndDisplayEntry({type: 'sticker', sender: 'me', content: s.label}); togglePanel(null); }\n            }));\n            \n            features.unshift({ label: '删除', isAddBtn: true, action: () => {\n                toggleStickerDeleteMode(stickerGrid, GLOBAL_STICKER_STORAGE_KEY, GLOBAL_STICKER_FEATURES);\n            }});\n            features.unshift({ label: '添加', isAddBtn: true, action: () => {\n                const input = prompt(\"批量添加表情包 (格式: 描述1URL1,描述2URL2...用英文逗号分隔开):\");\n                parseAndAddStickers(input, GLOBAL_STICKER_STORAGE_KEY);\n                renderFeatureGrid(stickerGrid, GLOBAL_STICKER_FEATURES.get());\n            }});\n            return features;\n        }\n    };\n\n    const CHAR_STICKER_FEATURES = {\n        get: () => {\n            const storageKey = getCharStickerStorageKey();\n            const customStickers = JSON.parse(localStorage.getItem(storageKey) || '[]');\n            const features = customStickers.map(s => ({\n                label: s.label,\n                icon: s.url,\n                isDefault: false,\n                action: () => { stageAndDisplayEntry({type: 'sticker', sender: 'me', content: s.label}); togglePanel(null); }\n            }));\n\n            features.unshift({ label: '删除', isAddBtn: true, action: () => {\n                toggleStickerDeleteMode(charStickerGrid, storageKey, CHAR_STICKER_FEATURES);\n            }});\n            features.unshift({ label: '添加', isAddBtn: true, action: () => {\n                const input = prompt(`为 ${getDisplayName('char')} 批量添加专属表情包 (格式: 描述1URL1,描述2URL2...用英文逗号分隔开):`);\n                parseAndAddStickers(input, storageKey);\n                renderFeatureGrid(charStickerGrid, CHAR_STICKER_FEATURES.get());\n            }});\n            return features;\n        }\n    };\n\n    const PLUS_FEATURES = [\n        {\n            label: '相册',\n            icon: 'https://files.catbox.moe/u9635j.jpg',\n            action: () => {\n                const desc = prompt('请输入图片描述:');\n                if (desc) {\n                    stageAndDisplayEntry({ type: 'image', sender: 'me', content: { type: 'desc', value: desc } });\n                    togglePanel(null);\n                }\n            }\n        },\n        { label: '拍摄', icon: 'https://files.catbox.moe/xbvdr0.jpg', \n            action: () => {\n                const currentDate = window.currentGameDate || new Date();\n                const dateString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')}`;\n                const timeString = `${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n                \n                const dateTimeInput = prompt(\"请输入剧情日期和时间 (格式YYYY-MM-DD HH:mm)\", `${dateString} ${timeString}`);\n                if (!dateTimeInput || !/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/.test(dateTimeInput)) {\n                    if(dateTimeInput) alert(\"格式错误，请输入YYYY-MM-DD HH:mm 格式。\");\n                    return;\n                }\n        \n                const description = confirm(\"是否要记录这段时间发生了什么？\") ? prompt(\"请输入事件描述：\") : \"\";\n        \n                const [newDate, newTime] = dateTimeInput.split(' ');\n                window.currentGameDate = new Date(dateTimeInput.replace(' ', 'T'));\n                \n                const eventData = { date: newDate, time: newTime, description: description || \"\" };\n                stageAndDisplayEntry({ type: 'event', content: eventData });\n                togglePanel(null);\n            } \n        },\n        { label: '视频通话', icon: 'https://files.catbox.moe/jqu9i7.jpg', action: () => alert('本同层手机只【免费发布于discord的尾巴镇社区和旅程社区，作者暴力美学，点击链接即可免费获取https://discord.com/channels/1379304008157499423/1388180976873766973。https://discord.com/channels/1291925535324110879/1388182155707814009')},\n        { label: '位置', icon: 'https://files.catbox.moe/vtos0x.jpg', action: () => { const loc = prompt('请输入位置:'); if (loc) stageAndDisplayEntry({type: 'location', sender: 'me', content: loc}); togglePanel(null); } },\n        { label: '红包', icon: 'https://files.catbox.moe/dail6u.jpg', action: () => togglePanel('char-sticker') },\n        { label: '转账', icon: 'https://files.catbox.moe/x5ptwq.jpg', action: () => {\n            const amountStr = prompt('请输入转账金额:'); const amount = parseFloat(amountStr);\n            if (!isNaN(amount) && amount > 0) {\n                const note = prompt('请输入转账备注(可选):');\n                const transferData = {amount: amount.toFixed(2), note: note || ' ', status: 'sent'};\n                stageAndDisplayEntry({type: 'transfer', sender: 'me', content: JSON.stringify(transferData), data: transferData});\n                togglePanel(null);\n            } else if (amountStr) { alert('请输入有效金额'); }\n        }},\n        { label: '文件', icon: 'https://files.catbox.moe/rebrv2.png', action: () => { const fileName = prompt('请输入文件名:'); if (fileName) stageAndDisplayEntry({type: 'file', sender: 'me', content: fileName}); togglePanel(null); } },\n        { label: '礼物', icon: 'https://files.catbox.moe/oc3ilp.jpg', action: () => {\n            const name = prompt(\"请输入礼物名称:\"); if(!name) return;\n            const price = confirm(\"是否输入价格？\") ? prompt(\"请输入价格:\") : \"\";\n            const giftData = {name, price, status: 'sent'};\n            stageAndDisplayEntry({type: 'gift', sender: 'me', content: JSON.stringify(giftData), data: giftData});\n            togglePanel(null);\n        }},\n    ];\n    \n    function togglePanel(panelToShow) {\n        const panelContainer = document.getElementById('panel-container');\n        const currentActivePanel = document.querySelector('.panel-view.active');\n        const isActive = panelContainer.classList.contains('active');\n        \n        if (isActive && currentActivePanel && currentActivePanel.id.startsWith(panelToShow)) {\n            panelContainer.classList.remove('active');\n            currentActivePanel.classList.remove('active');\n        } else if (panelToShow) {\n            if (currentActivePanel) currentActivePanel.classList.remove('active');\n            document.getElementById(`${panelToShow}-panel`).classList.add('active');\n            if (!isActive) panelContainer.classList.add('active');\n        } else {\n            if (isActive) panelContainer.classList.remove('active');\n            if (currentActivePanel) currentActivePanel.classList.remove('active');\n        }\n    }\n\n    function toggleStickerDeleteMode(gridElement, storageKey, featureProvider) {\n        const panel = gridElement.closest('.panel-view');\n        const isCurrentlyDeleteMode = gridElement.classList.contains('sticker-delete-mode');\n        const existingConfirmBar = panel.querySelector('.delete-confirm-bar');\n        if(existingConfirmBar) existingConfirmBar.remove();\n\n        if (isCurrentlyDeleteMode) {\n            gridElement.classList.remove('sticker-delete-mode');\n            renderFeatureGrid(gridElement, featureProvider.get());\n        } else {\n            gridElement.classList.add('sticker-delete-mode');\n            renderFeatureGrid(gridElement, featureProvider.get());\n\n            const confirmBar = document.createElement('div');\n            confirmBar.className = 'delete-confirm-bar';\n            confirmBar.style.cssText = 'position: absolute; bottom: 0; left: 0; right: 0; padding: 0.625rem; background: rgba(247,247,247,0.9); display: flex; justify-content: center; align-items: center; gap: 1rem; border-top: 1px solid #E2E2E2;';\n\n            const confirmButton = document.createElement('button');\n            confirmButton.textContent = '确认删除选中项';\n            confirmButton.style.cssText = 'padding: 0.5rem 1rem; border: none; border-radius: 0.3125rem; background-color: #7aa5f5; color: white; cursor: pointer; font-size: 0.9em;';\n\n            const cancelButton = document.createElement('button');\n            cancelButton.textContent = '取消';\n            cancelButton.style.cssText = 'padding: 0.5rem 1rem; border: none; border-radius: 0.3125rem; background-color: #ccdaed; color: white; cursor: pointer; font-size: 0.9em;';\n\n            confirmBar.appendChild(cancelButton);\n            confirmBar.appendChild(confirmButton);\n            panel.appendChild(confirmBar);\n\n            cancelButton.onclick = () => {\n                toggleStickerDeleteMode(gridElement, storageKey, featureProvider);\n            };\n\n            confirmButton.onclick = () => {\n                const labelsToDelete = [];\n                gridElement.querySelectorAll('.sticker-checkbox:checked').forEach(cb => {\n                    labelsToDelete.push(cb.dataset.stickerLabel);\n                });\n\n                if (labelsToDelete.length === 0) {\n                    alert(\"请至少选择一个要删除的表情包。\");\n                    return;\n                }\n\n                if (confirm(`确定要删除选中的 ${labelsToDelete.length} 个表情包吗？`)) {\n                    const currentStickers = JSON.parse(localStorage.getItem(storageKey) || '[]'\n                    );\n                    const updatedStickers = currentStickers.filter(s => !labelsToDelete.includes(s.label));\n                    localStorage.setItem(storageKey, JSON.stringify(updatedStickers));\n                    alert(\"删除成功！\");\n                    toggleStickerDeleteMode(gridElement, storageKey, featureProvider);\n                }\n            };\n        }\n    }\n\n    function renderFeatureGrid(gridElement, features) {\n        gridElement.innerHTML = '';\n        const isDeleteMode = gridElement.classList.contains('sticker-delete-mode');\n        \n        features.forEach(feature => {\n            const item = document.createElement('div');\n            item.className = 'feature-item';\n            \n            let iconHtml = '';\n            if (feature.isAddBtn) {\n                iconHtml = `<div class=\"feature-icon\"><i class=\"fas fa-${feature.label === '添加' ? 'plus' : 'trash-alt'}\"></i></div>`;\n            } else if (feature.icon.startsWith('http')) {\n                iconHtml = `<div class=\"feature-icon\"><img src=\"${feature.icon}\" alt=\"${feature.label}\"></div>`;\n            } else {\n                 iconHtml = `<div class=\"feature-icon\"><i class=\"${feature.icon}\"></i></div>`;\n            }\n            \n            item.innerHTML = `${iconHtml}<span class=\"feature-label\">${feature.label}</span>`;\n\n            const iconContainer = item.querySelector('.feature-icon');\n            if (isDeleteMode && !feature.isAddBtn && !feature.isDefault) {\n                const checkbox = document.createElement('input');\n                checkbox.type = 'checkbox';\n                checkbox.className = 'sticker-checkbox';\n                checkbox.style.display = 'block';\n                checkbox.dataset.stickerLabel = feature.label;\n                item.appendChild(checkbox);\n\n                item.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    checkbox.checked = !checkbox.checked;\n                    iconContainer.classList.toggle('selected-for-delete', checkbox.checked);\n                });\n            } else {\n                item.addEventListener('click', feature.action);\n            }\n            \n            gridElement.appendChild(item);\n        });\n    }\n\n    function updateSignatureDisplay(signatureText) {\n        const signatureContainer = document.getElementById('user-signature-display');\n        if (!signatureContainer) return;\n        signatureContainer.textContent = signatureText || '';\n    }\n\n    function promptForDateTime(defaultText) {\n        const dateTimeInput = prompt(\"请输入发送日期和时间 (格式YYYY-MM-DD HH:mm)\", defaultText);\n        if (!dateTimeInput || !/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/.test(dateTimeInput)) {\n            if (dateTimeInput) alert(\"格式错误，请输入YYYY-MM-DD HH:mm 格式。\");\n            return null;\n        }\n        return dateTimeInput.split(' ');\n    }\n\n    function updateUserNameInUI(oldName, newName) {\n        document.getElementById('moments-user-name').textContent = newName;\n        document.querySelectorAll('.post-author-name, .liker-name, .comment-author').forEach(el => {\n            if (el.textContent === oldName) el.textContent = newName;\n        });\n        document.querySelectorAll('.recall-notice-text').forEach(notice => {\n            if (notice.textContent.includes(`\"${oldName}\"`)) {\n                notice.textContent = `\"${newName}\" 撤回了一条消息`;\n            }\n        });\n    }\n\n    function applyWallpaper(viewElement, url, defaultBg) {\n        if (url) {\n            viewElement.style.backgroundImage = `url(\"${url}\")`;\n            viewElement.style.backgroundSize = 'cover';\n            viewElement.style.backgroundPosition = 'center';\n            viewElement.style.backgroundAttachment = 'fixed';\n        } else {\n            viewElement.style.backgroundImage = defaultBg;\n            viewElement.style.backgroundSize = 'cover';\n            viewElement.style.backgroundPosition = 'center';\n            viewElement.style.backgroundAttachment = 'scroll';\n        }\n    }\n\n    function createWallpaperChangeHandler(viewElement, storageKey, defaultBg) {\n        return function(e) {\n            e.preventDefault();\n            const currentUrl = localStorage.getItem(storageKey) || '';\n            const newUrl = prompt('请输入壁纸的URL链接 (留空则恢复默认):', currentUrl);\n\n            if (newUrl !== null) {\n                if (newUrl.trim() === '') {\n                    localStorage.removeItem(storageKey);\n                    applyWallpaper(viewElement, null, defaultBg);\n                    alert('壁纸已恢复默认。');\n                } else {\n                    try {\n                        new URL(newUrl);\n                        localStorage.setItem(storageKey, newUrl);\n                        applyWallpaper(viewElement, newUrl, defaultBg);\n                        alert('壁纸已更新！');\n                    } catch (_) {\n                        alert('请输入一个有效的URL。');\n                    }\n                }\n            }\n        };\n    }\n    \n    function showDebugWindow(title, content) {\n        alert(`${title}:\\n\\n${content}`);\n    }\n\n    function setupEventListeners() {\n        document.getElementById('app-wechat').addEventListener('click', () => navigateTo('wechat'));\n        document.getElementById('app-settings').addEventListener('click', () => navigateTo('settings'));\n        document.getElementById('wechat-back-btn-dummy').addEventListener('click', () => navigateTo('home'));\n        document.getElementById('settings-back-btn').addEventListener('click', () => navigateTo('home'));\n        document.getElementById('wechat-options-btn').addEventListener('click', () => navigateTo('moments'));\n        document.getElementById('moments-back-btn').addEventListener('click', () => navigateTo('wechat'));\n\n        sendBtn.addEventListener('click', () => {\n            const text = wechatInput.value.trim();\n            if (text) {\n                stageAndDisplayEntry({type: 'message', sender: 'me', content: text});\n                wechatInput.value = '';\n                updateFooterButtonsState();\n            } else if (userMessageQueue.length > 0 || hasPendingNotifications) {\n                hasPendingNotifications = false;\n                triggerAiResponse(true);\n            }\n        });\n        \n        document.getElementById('hidden-send-trigger').addEventListener('click', () => {\n            if(confirm(\"是否要立即触发AI响应（即使没有新消息）？\")) {\n                triggerAiResponse(true);\n            }\n        });\n        \n        wechatInput.addEventListener('keydown', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); sendBtn.click(); } });\n        wechatInput.addEventListener('input', updateFooterButtonsState);\n        wechatInput.addEventListener('focus', () => togglePanel(null));\n\n        addLongPressListener(wechatInput, () => {\n            const currentPlaceholder = localStorage.getItem(`blmx_input_placeholder_${currentCharId}`) || `与 ${getDisplayName('char')} 对话...`;\n            const newPlaceholder = prompt(\"请输入新的输入框提示文字:\", currentPlaceholder);\n            if (newPlaceholder !== null) {\n                localStorage.setItem(`blmx_input_placeholder_${currentCharId}`, newPlaceholder);\n                wechatInput.placeholder = newPlaceholder;\n                alert('提示文字已更新！');\n            }\n        }, { duration: 5000, preventDefault: false });\n\n        document.getElementById('smile-btn').addEventListener('click', () => togglePanel('sticker'));\n        plusBtn.addEventListener('click', () => togglePanel('plus'));\n        document.getElementById('microphone-btn').addEventListener('click', () => {\n            const text = prompt('请输入语音内容:');\n            if (text) {\n                let durationStr = prompt('请输入语音秒数 (只输入数字):');\n                if (durationStr) {\n                    const duration = parseInt(durationStr, 10);\n                    if (!isNaN(duration) && duration > 0) {\n                        stageAndDisplayEntry({ type: 'voice', sender: 'me', content: { text: text, duration: duration } });\n                    } else {\n                        alert('请输入有效的秒数。');\n                    }\n                }\n            }\n        });\n\n        document.getElementById('post-moment-btn').addEventListener('click', () => {\n            let text = prompt(\"这一刻的想法...\");\n            if (text === null) return;\n\n            let image = \"\", image_type = \"none\", image_desc = \"\";\n\n            if (confirm(\"是否要附带图片？\")) {\n                const isUrl = confirm(\"图片是链接吗？(点击“确定”输入链接，点击“取消”输入描述)\");\n                image_type = isUrl ? \"url\" : \"desc\";\n                image = prompt(isUrl ? \"请输入图片链接:\" : \"请输入图片描述:\");\n\n                if (image === null || image.trim() === '') {\n                    image = \"\";\n                    image_type = \"none\";\n                } else if (image_type === 'url') {\n                    const desc_for_ai = prompt(\"请输入图片的文本描述（仅供AI识别，不会显示在朋友圈）:\");\n                    if (desc_for_ai) {\n                        image_desc = desc_for_ai;\n                    }\n                }\n            }\n            \n            if ((!text || text.trim() === '') && (!image || image.trim() === '')) {\n                 alert(\"不能发布空的朋友圈内容。\");\n                 return;\n            }\n\n            const currentDate = window.currentGameDate || new Date();\n            const timeString = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n            \n            const dateTimeParts = promptForDateTime(timeString);\n            if (!dateTimeParts) return;\n            const [newDate, newTime] = dateTimeParts;\n\n            blmxManager.addEntry({key: 'USER_MOMENT', data: {text, image, image_type, image_desc, date: newDate, time: newTime}});\n            renderMomentsFeed();\n            hasPendingNotifications = true;\n            updateFooterButtonsState();\n        });\n        \n        momentsFeedList.addEventListener('click', (e) => {\n            const postEl = e.target.closest('.moment-post');\n            if (!postEl) return;\n            const absolutePostId = parseInt(postEl.dataset.postId, 10); \n            const sequencePostId = parseInt(postEl.dataset.momentSequenceId, 10);\n\n            if (e.target.closest('.delete-moment-btn')) {\n                if (confirm('确定要删除这条朋友圈吗？\\n此操作也会删除相关的点赞和评论。')) {\n                    const indicesToDelete = new Set([absolutePostId]);\n                    blmxManager.logEntries.forEach((entry, index) => {\n                        if (entry.key && (entry.key.includes('_LIKE') || entry.key.includes('_COMMENT')) && entry.data.target_post_id === sequencePostId) {\n                            const momentPostIndices = [];\n                            blmxManager.logEntries.forEach((entry, i) => { if (entry.key && entry.key.includes('_MOMENT')) { momentPostIndices.push(i); } });\n                            const targetPostAbsoluteIndex = momentPostIndices[parseInt(entry.data.target_post_id, 10)];\n                            if (targetPostAbsoluteIndex === absolutePostId) {\n                                indicesToDelete.add(index);\n                            }\n                        }\n                    });\n\n                    const oldLogEntries = [...blmxManager.logEntries];\n                    blmxManager.logEntries = oldLogEntries.filter((_, index) => !indicesToDelete.has(index));\n                    \n                    blmxManager.persistLogToStorage();\n                    renderMomentsFeed();\n                    renderChatHistory();\n                }\n            } else if (e.target.closest('.comment-button')) {\n                const action = prompt(\"输入 '赞' 来点赞，或者直接输入评论内容:\");\n                if(action) {\n                    if (action.trim().toLowerCase() === '赞' || action.trim().toLowerCase() === 'like') {\n                        blmxManager.addEntry({key: 'USER_LIKE', data: {target_post_id: sequencePostId}});\n                    } else {\n                        blmxManager.addEntry({key: 'USER_COMMENT', data: {text: action, target_post_id: sequencePostId}});\n                    }\n                    renderMomentsFeed();\n                    hasPendingNotifications = true;\n                    updateFooterButtonsState();\n                }\n            }\n        });\n\n        document.body.addEventListener('click', (e) => {\n            if (e.target.matches('.message-avatar')) {\n                const row = e.target.closest('.message-row');\n                if (row) {\n                    const avatarType = row.classList.contains('me') ? 'user' : 'char';\n                    updateAvatar(avatarType);\n                }\n            }\n        });\n\n        document.getElementById('contact-name-header').addEventListener('click', () => {\n            const oldDisplayName = getDisplayName('char');\n            const newRemark = prompt('请输入新的备注:', charRemark);\n            if (newRemark !== null) {\n                charRemark = newRemark;\n                localStorage.setItem(`blmx_remark_${currentCharId}`, newRemark);\n                const newDisplayName = getDisplayName('char');\n                \n                document.getElementById('contact-name-header').textContent = newDisplayName;\n                wechatInput.placeholder = localStorage.getItem(`blmx_input_placeholder_${currentCharId}`) || `与 ${newDisplayName} 对话...`;\n                document.querySelectorAll('#moments-feed-list .post-author-name').forEach(nameEl => {\n                    if (nameEl.textContent === oldDisplayName) nameEl.textContent = newDisplayName;\n                });\n                 document.querySelectorAll('.recall-notice-text').forEach(notice => {\n                     if (notice.textContent.includes(`\"${oldDisplayName}\"`)) {\n                         notice.textContent = `\"${newDisplayName}\" 撤回了一条消息`;\n                     }\n                 });\n                alert(\"备注已更新！\");\n            }\n        });\n\n        document.getElementById('moments-user-name').addEventListener('click', () => {\n            const oldName = getDisplayName('user');\n            const newName = prompt('请输入你的新名字:', oldName);\n\n            if (newName && newName.trim() !== '' && newName !== oldName) {\n                localStorage.setItem(`blmx_user_name_${currentCharId}`, newName);\n                NAMES.user = newName;\n                updateUserNameInUI(oldName, newName);\n                \n                if (confirm(`是否让 ${getDisplayName('char')} 知道你改了新名字？`)) {\n                    const currentDate = window.currentGameDate || new Date();\n                    const defaultTime = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n                    \n                    const dateTimeParts = promptForDateTime(defaultTime);\n                    if (dateTimeParts) {\n                        const [newDate, newTime] = dateTimeParts;\n                        const momentData = { text: `我改名字啦，新名字是“${newName}”`, image: \"\", image_type: \"none\", date: newDate, time: newTime };\n                        blmxManager.addEntry({key: 'USER_MOMENT', data: momentData});\n                        renderMomentsFeed();\n                        hasPendingNotifications = true;\n                        updateFooterButtonsState();\n                    }\n                }\n                alert('名字已更新！');\n            }\n        });\n\n        document.getElementById('moments-user-avatar').addEventListener('click', () => {\n            const currentSignature = localStorage.getItem(`blmx_signature_${currentCharId}`) || '';\n            const newSignature = prompt('请输入你的个性签名:', currentSignature);\n            if (newSignature !== null) {\n                localStorage.setItem(`blmx_signature_${currentCharId}`, newSignature);\n                updateSignatureDisplay(newSignature);\n                if(confirm(`是否让 ${getDisplayName('char')} 知道你更改了签名？`)) {\n                    const currentDate = window.currentGameDate || new Date();\n                    const defaultTime = `${currentDate.getFullYear()}-${(currentDate.getMonth() + 1).toString().padStart(2, '0')}-${currentDate.getDate().toString().padStart(2, '0')} ${currentDate.getHours().toString().padStart(2, '0')}:${currentDate.getMinutes().toString().padStart(2, '0')}`;\n                    \n                       const dateTimeParts = promptForDateTime(defaultTime);\n                           if (dateTimeParts) {\n                               const [newDate, newTime] = dateTimeParts;\n                               const momentData = { text: `我的个性签名已更改为：“${newSignature}”`, image: \"\", image_type: \"none\", date: newDate, time: newTime };\n                               blmxManager.addEntry({key: 'USER_MOMENT', data: momentData});\n                               renderMomentsFeed();\n                               hasPendingNotifications = true;\n                               updateFooterButtonsState();\n                           }\n                }\n            }\n        });\n\n        document.getElementById('moments-cover-photo').addEventListener('click', () => {\n            const currentCover = localStorage.getItem(`blmx_cover_photo_${currentCharId}`) || '';\n            const newCover = prompt('请输入新的朋友圈封面URL:', currentCover);\n            if(newCover) {\n                localStorage.setItem(`blmx_cover_photo_${currentCharId}`, newCover);\n                document.getElementById('moments-cover-photo').src = newCover;\n            }\n        });\n\n        document.getElementById('delete-mode-trigger').addEventListener('click', () => {\n            const wechatView = document.getElementById('wechat-view');\n            wechatView.classList.toggle('delete-mode');\n            if (wechatView.classList.contains('delete-mode')) {\n                alert('已进入删除模式。点击任意消息或时间戳可将其删除。再次点击左上角可退出。');\n            } else {\n                alert('已退出删除模式。');\n            }\n        });\n\n        wechatBody.addEventListener('click', (e) => {\n            const wechatView = document.getElementById('wechat-view');\n            if (!wechatView.classList.contains('delete-mode')) {\n                return;\n            }\n            \n            const targetRow = e.target.closest('[data-log-index]');\n            if (targetRow) {\n                e.preventDefault();\n                e.stopPropagation();\n                \n                const indexToDelete = parseInt(targetRow.dataset.logIndex, 10);\n                let previewText = targetRow.textContent.trim().replace(/\\s+/g, ' ').substring(0, 50);\n\n                if (confirm(`确定要删除这条记录吗？\\n\\n预览: \"${previewText}...\"`)) {\n                    blmxManager.logEntries.splice(indexToDelete, 1);\n                    blmxManager.persistLogToStorage();\n                    renderChatHistory(); \n                    renderMomentsFeed();\n                }\n            }\n        }, true);\n\n        document.getElementById('image-upload-input').addEventListener('change', e => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = readerEvent => {\n                    const imageUrl = readerEvent.target.result;\n                    const imageKey = `blmx-img-${crypto.randomUUID()}`;\n                    try {\n                        sessionStorage.setItem(imageKey, imageUrl);\n                        stageAndDisplayEntry({ \n                            type: 'image', \n                            sender: 'me', \n                            content: { \n                                type: 'url', \n                                value: imageUrl,\n                                storageKey: imageKey\n                            } \n                        });\n                        togglePanel(null);\n                    } catch (err) {\n                        alert('图片太大无法发送，请选择一张小一点的图片。');\n                        console.error(\"Error saving image to sessionStorage:\", err);\n                    }\n                };\n                reader.readAsDataURL(file);\n            }\n            e.target.value = null;\n        });\n        \n        const chatView = document.getElementById('wechat-view');\n        const homeScreen = document.getElementById('app-homescreen');\n        const settingsView = document.getElementById('settings-view');\n\n        document.getElementById('change-chat-wallpaper-btn').addEventListener('click', \n            createWallpaperChangeHandler(chatView, WALLPAPER_KEYS.chat, '')\n        );\n        document.getElementById('change-home-wallpaper-btn').addEventListener('click', \n            createWallpaperChangeHandler(homeScreen, WALLPAPER_KEYS.home, \"url('https://files.catbox.moe/5brt1b.jpeg')\")\n        );\n        document.getElementById('change-settings-wallpaper-btn').addEventListener('click', \n            createWallpaperChangeHandler(settingsView, WALLPAPER_KEYS.settings, '')\n        );\n\n        document.getElementById('show-last-ai-response-btn').addEventListener('click', (e) => {\n            e.preventDefault(); \n            showDebugWindow('AI 最新原始回复', latestAiRawResponse);\n        });\n        \n        document.getElementById('show-last-sent-prompt-btn').addEventListener('click', (e) => {\n            e.preventDefault();\n            showDebugWindow('发送给 AI 的提示', latestSentPrompt);\n        });\n    }\n\n    async function start() {\n        try {\n            console.log(\"[BLMX] Fetching SillyTavern info...\");\n            const parent = window.parent;\n            window.currentGameDate = new Date();\n            \n            const charData = await parent.TavernHelper.getCharData();\n            currentCharId = charData.name;\n            NAMES.char = charData.name;\n            \n            charRemark = localStorage.getItem(`blmx_remark_${currentCharId}`) || '';\n            NAMES.user = localStorage.getItem(`blmx_user_name_${currentCharId}`) || 'User';\n            AVATARS.user = localStorage.getItem(`blmx_user_avatar_${currentCharId}`) || '';\n            const savedCharAvatar = localStorage.getItem(`blmx_char_avatar_${currentCharId}`);\n            if (savedCharAvatar) {\n                AVATARS.char = savedCharAvatar;\n            } else {\n                AVATARS.char = await parent.TavernHelper.getCharAvatarPath();\n            }\n            \n            const savedSignature = localStorage.getItem(`blmx_signature_${currentCharId}`);\n            if(savedSignature) updateSignatureDisplay(savedSignature);\n\n            const savedCover = localStorage.getItem(`blmx_cover_photo_${currentCharId}`) || `https://files.catbox.moe/5brt1b.jpeg`;\n            document.getElementById('moments-cover-photo').src = savedCover;\n\n            document.querySelector('.contact-name').textContent = getDisplayName('char');\n            document.getElementById('moments-user-name').textContent = getDisplayName('user');\n    \n        } catch (error) {\n            console.error(\"[BLMX] Failed to auto-load info from SillyTavern:\", error);\n            currentCharId = 'default_char';\n            NAMES.user = 'User';\n            NAMES.char = 'Character';\n        }\n    \n        tavernGenerateFunc = window.parent.TavernHelper.generate;\n        blmxManager = new BLMX_Protocol(window.parent.TavernHelper, currentCharId);\n        await blmxManager.initialize();\n    \n        document.getElementById('moments-user-avatar').src = AVATARS.user;\n        \n        const chatView = document.getElementById('wechat-view');\n        const homeScreen = document.getElementById('app-homescreen');\n        const settingsView = document.getElementById('settings-view');\n\n        applyWallpaper(chatView, localStorage.getItem(WALLPAPER_KEYS.chat), '');\n        applyWallpaper(homeScreen, localStorage.getItem(WALLPAPER_KEYS.home), \"url('https://files.catbox.moe/5brt1b.jpeg')\");\n        applyWallpaper(settingsView, localStorage.getItem(WALLPAPER_KEYS.settings), '');\n\n        renderFeatureGrid(stickerGrid, GLOBAL_STICKER_FEATURES.get());\n        renderFeatureGrid(charStickerGrid, CHAR_STICKER_FEATURES.get());\n        renderFeatureGrid(plusGrid, PLUS_FEATURES);\n        \n        renderChatHistory();\n        renderMomentsFeed();\n        \n        const savedPlaceholder = localStorage.getItem(`blmx_input_placeholder_${currentCharId}`);\n        wechatInput.placeholder = savedPlaceholder || `与 ${getDisplayName('char')} 对话...`;\n        wechatInput.disabled = false;\n        \n        setupEventListeners();\n        updateFooterButtonsState();\n    }\n\n    const waiterInterval = setInterval(() => {\n        if (window.parent && window.parent.TavernHelper && typeof window.parent.TavernHelper.generate === 'function') {\n            clearInterval(waiterInterval);\n            console.log('[BLMX Proxy] Successfully connected to SillyTavern!');\n            start();\n        }\n    }, 250);\n});\n</script>\n</body>\n</html>\n```",
    "trimStrings": [],
    "placement": [
        2
    ],
    "disabled": false,
    "markdownOnly": true,
    "promptOnly": false,
    "runOnEdit": true,
    "substituteRegex": 0,
    "minDepth": null,
    "maxDepth": null
}